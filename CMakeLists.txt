# Minimum required content of a CMakeLists.txt file
cmake_minimum_required(VERSION 3.19...3.20)

project(DASH
  VERSION
      3.5.1
  DESCRIPTION
    "DASH powder diffraction solution"
  LANGUAGES
    Fortran
)

include(FetchContent)

# Set up variables that will be replaced in source files
set(DASH_VERSION ${CMAKE_PROJECT_VERSION})
set(DASH_COPYRIGHT_YEAR "2021")

include(InstallRequiredSystemLibraries)
# Configure CPack based package generation
set(CPACK_PACKAGE_NAME "DASH")
set(CPACK_PACKAGE_VENDOR "The Cambridge Crystallographic Data Centre")
set(CPACK_PACKAGE_DESCRIPTION_FILE "description.txt")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "A versatile and interactive package for solving crystal structures from powder diffraction data")
set(CPACK_PACKAGE_HOMEPAGE_URL "https://github.org/ccdc-opensource/dash")
set(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME})
# set(CPACK_PACKAGE_INSTALL_DIRECTORY "")
set(CPACK_PACKAGE_ICON icons/dash_128x128.png)
set(CPACK_PACKAGE_CHECKSUM SHA256)
# set(CPACK_RESOURCE_FILE_LICENSE LICENSE)
# set(CPACK_RESOURCE_FILE_README )
# set(CPACK_RESOURCE_FILE_WELCOME)
set(CPACK_MONOLITHIC_INSTALL TRUE)
set(CPACK_PACKAGE_EXECUTABLES dash;DASH)
set(CPACK_VERBATIM_VARIABLES TRUE)
set(CPACK_GENERATOR "ZIP")

set(CPACK_SOURCE_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION})

include(CPack)

# Transform variables in .in files into their values (output goes to the build directory)
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/PCDash_Main.f90.in" "${CMAKE_CURRENT_BINARY_DIR}/PCDash_Main.f90" @ONLY)
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/variables.f90.in" "${CMAKE_CURRENT_BINARY_DIR}/variables.f90" @ONLY)

# A temporary path for winteracter 9.2
FetchContent_Declare(
  winteracter
  URL      "https://artifactory.ccdc.cam.ac.uk/artifactory/ccdc-legacy-windows-distributions/winteracter-9.2.7z"
  URL_HASH "SHA256=6c13d4e9b343e258630d879ff91f2d2d463ebe87d53d4224516e087197c2bf04"
  HTTP_HEADER "X-JFrog-Art-Api:$ENV{ARTIFACTORY_API_KEY}"
)
FetchContent_MakeAvailable(winteracter)

# Create the DASH executable target
add_executable(DASH)

target_include_directories(
  DASH
  PRIVATE
  ${winteracter_SOURCE_DIR}/include
  ${winteracter_SOURCE_DIR}/lib.if8
  ${CMAKE_CURRENT_SOURCE_DIR}
)
target_link_directories(DASH PRIVATE ${winteracter_SOURCE_DIR}/lib.if8)

# DASH was built with /QxW, which has been superseded by /arch switches
target_compile_options(DASH PRIVATE "/arch:SSE2")

target_link_libraries(
  DASH PRIVATE 
  winter.lib # Winteracter main library
  htmlhelp.lib # Used by some parts of Winteracter
)

target_sources(
  DASH PRIVATE
  # autogenerated files
  "${CMAKE_CURRENT_BINARY_DIR}/PCDash_Main.f90"
  "${CMAKE_CURRENT_BINARY_DIR}/variables.f90"
  # Main fortran files
  Align.f90
  ATMVAR.f90
  Basic_Date.f90
  Basic_Files.f90
  Basic_IO.f90
  Basic_Strings.f90
  Basic_Vectors.f90
  BatchMode.f90
  Ccslmain.f90
  Chi_sq_plot.F90
  create_fob.f90
  Declarations.f90
  Dialog_Routines.f90
  DICVAR.f90
  DICVO2.f90
  DICVO3.f90
  DICVO4.f90
  DICVO5.f90
  DICVO6.f90
  DICVO7.f90
  DICVOL91.f90
  error_message.f90
  Eval.f90
  External_RR.f90
  Fcn.f90
  Ffcalc.f90
  Fortic.f90
  forty.f90
  Fou.f90
  Frac2cart.f90
  FWHM.f90
  Generate_TicMarks.f90
  get_logref.f90
  GSAS.f90
  Init_Routines.f90
  Initialisation.f90
  Interface.f90
  licensing.f90
  LoadRAWFiles.f90
  LoadSDI.f90
  Mag.f90
  Main_Field_Changed_Routines.f90
  MCBack.f90
  MDB.f90
  Mogul.f90
  MONKEY1.F90
  MultiModal.f90
  multipeak_chisq.f90
  multipeak_fitter.f90
  MultiRun.f90
  Mvec.f90
  pawley_error_check.f90
  Pawley.f90
  PCDruid_Resource.F90
  PF_Simplex.f90
  Pf.f90
  plot_test.F90
  PO_VAR.f90
  PolyFitter_Subs.f90
  PolyLoadFiles.f90
  Pr.f90
  PRJVAR.f90
  Profile_Plot.f90
  ProjectSave.f90
  read_one_zm.f90
  REFVAR.f90
  Res2Mol2.f90
  RIETAN.f90
  Rietveld.f90
  RR_simopt.f90
  RRVAR.f90
  SA_Begin.f90
  SA_Defaults.f90
  SA_Dialogues.f90
  SA_main.f90
  SA_move_status.f90
  SA_output.f90
  SA_refresh.f90
  SA_restrain.f90
  SA_simopt.f90
  SA_soln_store.f90
  SA_structure_output.f90
  SA_subs.f90
  SA_summary.f90
  samabo.f90
  SAMVAR.f90
  SGDecode.f90
  SingleCrystal.f90
  SOLVAR.f90
  SpaceGroupDetermination.f90
  TAVAR.f90
  TOPAS.f90
  Tutorials.f90
  Upload_Cell_Constants.f90
  Upload_Widths.f90
  UserInputChecks.f90
  Utilities.f90
  Valchi.f90
  valchipro.f90
  Vicar.f90
  Wifd99.f90
  Wizard_routines.f90
  XtalFile.f90
  ZMVAR.f90

  # includes
  GLBVAR.INC
  Lattice.inc
  params.inc
  POLY_COLOURS.INC
  Reflns.inc
  SA_restrain.inc
  statlog.inc

  SGinc/ffcalctop.inc

  # Resources
  icons/bimodal.ico
  icons/dash.ico
  icons/trimodal.ico

  PCDruid_resource.RC
  res/OpenFile.bmp
  res/PolyFitterWizard.bmp
  res/TOOLBAR1.BMP
  res/WidthEquations.bmp
  res/WizardWelcome.bmp

  UnusedCode.txt
)

# Installation section
# Everything here is installed relative to the value of CMAKE_INSTALL_PREFIX (this is CMake's default behaviour)
install(
    TARGETS  DASH
    RUNTIME DESTINATION .
)

# Fetch current version of dash_requirements distribution from artifactory
# This requires that developers set up their ARTIFACTORY_API_KEY environment variable correctly
if(NOT DEFINED ENV{ARTIFACTORY_API_KEY})
    message(FATAL_ERROR "ARTIFACTORY_API_KEY environment variable is not defined, cannot download dash_requirements distribution files. See https://confluence.ccdc.cam.ac.uk/x/oK7I for info.")
endif()

# Specify a build of dash_requirements. This part can become more complex later, downloading the latest version from a branch perhaps
set(DASH_REQUIREMENTS_BUILD "314611")
set(DASH_REQUIREMENTS_BRANCH "main")
set(DASH_REQUIREMENTS_SHA256 "e004d8a30066c1efb749cea9ccef54c29e47a14100f47cd7aeee7e929cf3c2d3")

# While DASH can be built in 32bit mode, nothing stops us from starting 64bit executables
set(DASH_REQUIREMENTS_PLATFORM "windows-dynamic-64")

FetchContent_Declare(
  dash_requirements
  URL      "https://artifactory.ccdc.cam.ac.uk/artifactory/ccdc-cpp-main-builds/${DASH_REQUIREMENTS_PLATFORM}/distribution/dash_requirements/dash_requirements-${DASH_REQUIREMENTS_BUILD}-${DASH_REQUIREMENTS_BRANCH}-${DASH_REQUIREMENTS_PLATFORM}.7z"
  URL_HASH "SHA256=${DASH_REQUIREMENTS_SHA256}"
  HTTP_HEADER "X-JFrog-Art-Api:$ENV{ARTIFACTORY_API_KEY}"
)
FetchContent_MakeAvailable(dash_requirements)

install(
    DIRECTORY   "${dash_requirements_SOURCE_DIR}/"
    DESTINATION zmconv
)

# Install Documentation
set(docs "Documentation")
# It is expected that the docs repository is cloned next to the main repository
# install(
#     DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../../docs/CSDS/dash/dash_files/"
#     DESTINATION ${docs}/dash
# )

# Install Tutorials
install(
    FILES       Tutorial_1.xye Tutorial_1.mol2
    DESTINATION "${docs}/Tutorial1/Data files"
)

install(
    FILES       Tutorial_2.xye Tutorial_2.mol2
    DESTINATION "${docs}/Tutorial2/Data files"
)

install(
    FILES       Tutorial_3.xye Tutorial_3-trans.mol2 Tutorial_3-cis.mol2
                Tutorial_3-ModelA.zmatrix Tutorial_3-ModelB.zmatrix
                Tutorial_3-ModelC.zmatrix
    DESTINATION "${docs}/Tutorial3/Data files"
)

install(
    FILES       Tutorial_4.xye Tutorial_4-half.mol2 Tutorial_4-full.mol2
    DESTINATION "${docs}/Tutorial4/Data files"
)

install(
    FILES       Tutorial_5.xye Tutorial_5.mol2 Tutorial_5-2.mol2
    DESTINATION "${docs}/Tutorial5/Data files"
)

install(
    FILES       Tutorial_6.raw Tutorial_6-atoms.mol2 Tutorial_6-frags.mol2
    DESTINATION "${docs}/Tutorial6/Data files"
)

install(
    FILES       "Extinction Symbol Documents/Advanced.asc"
                "Extinction Symbol Documents/Dopmmm.hkl"
                "Extinction Symbol Documents/ESMANUAL for DASH.DOC"
                "Extinction Symbol Documents/parameter_input.asc"
    DESTINATION "${docs}/Extinction Symbol Documents"
)

install(
    FILES       "Unsupported Extras/MDash.exe"
                "Unsupported Extras/MDASH.pdf"
                "Unsupported Extras/ReadMe.txt"
    DESTINATION "Unsupported Extras"
)

install(
    FILES       ExtinctionSymbol.exe SpaceGroupSymbols.dat TOPAS.inc
                RIETAN.cmd RIETAN2000.tem RIETANFP.tem
    DESTINATION .
)

install(
    DIRECTORY  icons
    DESTINATION .
)

install(
    DIRECTORY   expcli
    DESTINATION .
    COMPONENT
)
