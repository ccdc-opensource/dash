CCSL Mark 4 Update 54 4-July-95
C
C
C
C
C
C               C A M B R I D G E   C R Y S T A L L O G R A P H Y
C
C                      S U B R O U T I N E   L I B R A R Y
C
C
C
C
C
C
C
C
C
C   Parameter ATFS altered from 20     to 50    
C   Parameter ATOM altered from 50     to 150   
C   Parameter BVAR altered from 200    to 400   
C   Parameter CSTR altered from 20     to 300   
C   Parameter F2VA altered from 200    to 300   
C   Parameter MATS altered from 3000   to 80000 
C   Parameter OLAP altered from 70     to 200   
C   Parameter OMAX altered from 200    to 300   
C   Parameter PHAS altered from 1      to 9     
C   Parameter PSLK altered from 300    to 1000  
C   Parameter PVAR altered from 1000   to 2000  
C   Parameter REFS altered from 1000   to 10000 
C   Parameter SLAK altered from 20     to 500   
C   Parameter SORC altered from 1      to 5     
C   Parameter VVAR altered from 250    to 500   
C
C                      P R O F I L E   R E F I N E M E N T
C
C
C LEVEL 8      SUBROUTINE ABCRPR(N)
        SUBROUTINE ABCRPR(N)
C
C *** ABCRPR updated by WIFD 22 Feb 89 ***
C
CH Multiple entry routine to deal with all aspects of absorption correction
CH for Profile Refinement
CA On entry N gives action required:
CA    N=1 interpret L ABSC card
CA    N=2 calculate absorption correction and its parameter's derivative
CA    N=3 apply shift to parameter
CA    N=4 write out new L ABSC card
CA    N=5 deal with absence of L ABSC card
CA    N=6 fix parameter if no card given
C
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /DGEOM/IGEOM,UM(9),NLR,ANGLIN(3),ALAMBD(5,5),
     & NLAMB,ILAMB
      EQUIVALENCE (WLGTH,ALAMBD(1,1))
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRABSC/NABTYP(5),ABSPR(2,5),KABSPR(2,5),
     & ABSCOR,DERABQ(2),NABSPR(5)
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
      GO TO (1,2,3,4,5,6) , N
      GO TO 100
C
C HAVE IN COMM0N /SCRACH/ A CARD STARTING 'L ABSC' - READ REST:
   1  CALL RDINTG(NABTYP(JSOURC),7,IPT,80,IER)
      IF (NABTYP(JSOURC) .EQ. 0) THEN
        CALL MESS(LPT,0,'No absorption correction')
        GO TO 50
      ENDIF
      CALL RDNUMS(ABSPR(1,JSOURC),IPT,2,NABSPR(JSOURC),IER)
      WRITE (LPT,2000) (ABSPR(II,JSOURC),II=1,NABSPR(JSOURC))
2000  FORMAT (/' Absorption coefficient(s)=',2F12.4)
      IF (ABS(ABSPR(1,JSOURC))+ABS(ABSPR(2,JSOURC)) .EQ. 0.) GO TO 10
      GO TO 100
C
C CALCULATE FUNCTION WHICH WILL BE P4 IN CALxx, AND ITS DERIVATIVE
   2  IF (NABTYP(JSOURC) .EQ. 0) GO TO 100
C THIS BIT NOT YET WRITTEN FOR CN:
      IF (.NOT. TOF) GO TO 10
C TIME OF FLIGHT:
      WABSPR=WLGTH*ABSPR(2,JSOURC)+ABSPR(1,JSOURC)
      IF (WABSPR .LE. 0.001) THEN
        WA=WABSPR/3.
        ABSCOR=1.-WABSPR*(1.-2.*WA)
        DERABQ(1)=(4.*WA-1.)/ABSCOR
      ELSE
        EXPABS=EXP(-2.*WABSPR)
        ABSCOR=(1.-EXPABS)/(2.*WABSPR)
        DERABQ(1)=(EXPABS/ABSCOR-1.)/WABSPR
      ENDIF
      DERABQ(2)=DERABQ(1)*WLGTH
      GO TO 100
C
C APPLY SHIFT IN COEFFICIENT:
   3  IF (JPHASE .EQ. 1) CALL ADJUST(ABSPR(ISPC,JSOURC))
      GO TO 100
C
C WRITE OUT NEW 'L ABSC' CARD FOR PR:
   4  WRITE (NEWIN,2001) NABTYP(JSOURC),ABSPR(1,JSOURC),
     & ABSPR(2,JSOURC)
2001  FORMAT ('L ABSC',I2,2F10.4)
** NEED METHOD OF PUTTING OUT *S
      GO TO 100
C
C DEAL WITH ABSENCE OF 'L ABSC' CARD:
   5  CALL MESS(LPT,1,
     & 'No L ABSC card - assuming no absorption correction')
      NABTYP(JSOURC)=0
  50  ABSPR(1,JSOURC)=0.
      ABSPR(2,JSOURC)=0.
  10  ABSCOR=1.
      DERABQ(1)=0.
      DERABQ(2)=0.
      GO TO 100
C
C FIX ABS COR IF NO CARD WAS GIVEN:
   6  IF (NABTYP(JSOURC) .EQ. 0) CALL ADDFX5(6,2,0,1,JSOURC,4)
      GO TO 100
C
C
      ENTRY ABCPR8(NP,NV)
C RECORD NP'TH PARAMETER AS VARIABLE NUMBER NV:
      KABSPR(NP,JSOURC)=NV
      GO TO 100
C
C
      ENTRY ABCPR9
C RECORD ALL PARAMETERS FIXED:
      DO 11 I=1,2
      DO 11 J=1,NSOURC
  11  KABSPR(I,J)=0
C
100   RETURN
      END
C
C
C
C
C LEVEL 3      SUBROUTINE ADDPAW(NSLTYP,ISGEN,ISP,AM,WEIGHT)
      SUBROUTINE ADDPAW(NSLTYP,ISGEN,ISP,AM,WEIGHT)
C
C *** ADDPAW updated by JCM 8 Mar 89 ***
C
CC 19B
CH Add slack constraint to list for Pawley type constrained PR
CA On entry NSLTYP=type of constraint:
CA      NSLTYP=3 means 2 constrained clumps of intensities as found by FAM4PR
CA On entry ISGEN  is the GENUS of the variable to be slackly constrained.
CA On entry ISP(1) is the species of the first intensity of the first clump
CA          ISP(2) is the species of the first intensity of the second clump
CA          AM  is a 1x2 real array holding the coefficents of the constraint
CA          WEIGHT is to weight this "observation" by 1/sigma squared.
C
CD Adds constraint to list for type NSLTYP slack constraints
CN Only at present for NSLTYP=3, so expects specifically only 2 clumps of
CN intensities to be linked.
C
      DIMENSION ISP(2),AM(2)
      COMMON /PAWLPR/AKLO,AKHI,SLACK,STRKT,STRTOL,SLKTOL,ITST,
     & ISPSLK(2,1000),IGSLAK(1000),AMSLAK(2,1000),WTSLAK(1000),
     & WEELEV,KOM16
      LOGICAL STRKT
      COMMON /SLAKDA/NSLAK(4),SLKSWD(4),SLAKWT(4),
     & CHISQD(4),ISLKTP,NSKTOT,KOM24
C
      NSKTOT=NSKTOT+1
C%
C      CALL ERRCHK(2,NSLAK(NSLTYP),%PSLK%,0,
      CALL ERRCHK(2,NSLAK(NSLTYP),1000,0,
     & 'Pawley-type slack constraiints')
      NSLTEM=NSLAK(NSLTYP)
      IGSLAK(NSLTEM)=ISGEN
      ISPSLK(1,NSLTEM)=ISP(1)
      ISPSLK(2,NSLTEM)=ISP(2)
      AMSLAK(1,NSLTEM)=AM(1)
      AMSLAK(2,NSLTEM)=AM(2)
      WTSLAK(NSLTEM)=WEIGHT
      RETURN
      END
C
C
C
C
C LEVEL 1     SUBROUTINE ADF4G2(PAR)
      SUBROUTINE ADF4G2(PAR)
C
C *** ADF4G2 by WIFD 2 Jun 89 ***
C
CH Like ADJUST, but special to deal with family 4, genus 2
CA On entry PAR is the parameter to be updated
C

      INCLUDE 'PARAMS.INC'
      COMMON /F4PARS/NGEN4(9,5),F4VAL(3,MF4PAR),
     & F4PAR(3,MF4PAR),KF4PAR(3,MF4PAR),F4PESD(3,MF4PAR),KOM6
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
C
      XOLD=PAR
      XTEM=(XOLD+SHIFT)/F4VAL(IGEN,ISPC)
      ARG=0.2*(XTEM-1.)
      SHINE=(ARG+SQRT(ARG*ARG+1.))**25
      XNEW=0.2*F4VAL(IGEN,ISPC)*ALOG(1.+148.4131591*SHINE)
      PAR=XNEW
      RETURN
      END
C
C
C
C
C LEVEL 8      SUBROUTINE APSHD2
      SUBROUTINE APSHD2
C
C *** APSHD2 updated by PJB Sept 93 ***
C
CX
CC 7B
CH Applies shifts for 2theta, time and cell for D2 type LSQ
CP Only useful if called from CELLSQ, D2LSQ or similar.  Expects suitable type
CP of Least Squares to be set up.
C
CP Also expects shifts in BLSQ and esds in DERIVB (as these are not now needed
CP for their original uses).
CD Scans all variables, deals with those which are redundant and whose shifts
CD are therefore not immediately available, deals with possible fudging, and
CD applies the shifts.
C
CO Outputs new values, shifts, esds, old values and shift/esd
C
      LOGICAL SHFCEL
      CHARACTER *4 LNAM1,LNAM2
      COMMON /DERBAS/DERIVB(400),LVARB
      COMMON /DERVAR/DERIVV(500),LVARV
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /MATDAT/MATPNT(401),BLSQ(400)
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /POINTS/LVRBS(500),LVRPR(500),LBSVR(400),LRDVR(300)
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
C
      SHFCEL=.FALSE.
      WRITE (LPT,2000) ICYC
2000  FORMAT (/////'1 ++++++++++ Shifts in variables for cycle',I3,
     & ' ++++++++++ ')
      CALL MESS(LPT,2,'  Variable       New           Esd          '//
     & 'Shift          Old          Shift/Esd ')
C
C INITIALISE SHIFT AVERAGES:
      CALL FETSHF(1,0.,0.)
C
C COUNT ALL VARIABLES:
      DO 1 I=1,LVARV
C J=WHICH BASIC VARIABLE:
      J=LVRBS(I)
C KPACK=WHICH PACKED PARAMETER SPEC:
      KPACK=LVRPR(I)
C IF VARIABLE IS BASIC:
      IF (J .GT. 0) THEN
        SHIFT=BLSQ(J)
        ESD=DERIVB(J)
C OTHERWISE IT IS REDUNDANT, BY CONSTRAINT NUMBER -J:
      ELSE
        CALL SHFESD(-J)
      ENDIF
C
C GET ITS PRINTING NAME:
      CALL PARNAM(LNAM1,LNAM2,3,KPACK)
C AND ITS FAMILY, GENUS AND SPECIES:
      CALL PUNPAK(KPACK,IFAM,IGEN,ISPC)
C FAMILY 1, GENUS 1 - CELL PARAMETERS:
      IF (IGEN .EQ. 1) THEN
        IF (ISPC .EQ. 7) THEN
          CALL THETA2(3)
          GO TO 2
        ENDIF
        CALL CELSHF(ISPC)
        SHFCEL=.TRUE.
      ENDIF
C FAMILY 1, GENUS 2 - PKCN PARAMETERS:
      IF (IGEN .EQ. 2) CALL PCTF01(3)
C FAMILY 1, GENUS 3 - ZEROPOINT
      IF (IGEN .EQ. 3) CALL ZEROPR(3)
C
   2  CALL FETSHF(2,SHIFT,ESD)
      WRITE (LPT,2006) LNAM1,LNAM2,XNEW,ESD,SHIFT,XOLD,SHESD
2006  FORMAT (' ',1X,A4,1X,A4,5G14.5)
   1  CONTINUE
      CALL FETSHF(3,0.,0.)
      IF (SHFCEL) CALL RECELL(1,1)
      RETURN
      END
C
C
C
C
C LEVEL 10      SUBROUTINE APSHPR(ALSQ,MATSZ,PCXX,PFXX,MAGSHF)
      SUBROUTINE APSHPR(ALSQ,MATSZ,PCXX,PFXX,MAGSHF)
C
C *** APSHPR updated by PJB 1 Feb 1994 ***
C
CX
CC 19B
CH Applies shifts to parameters for PR with slack constraints
C
CP On entry, array BLSQ holds shifts, and DERIVB holds esds
CD Deals with redundant variables by interpreting constraints
CD Finds and applies fudge factors
CD Identifies species of parameter, then calls specific routines actually
CD    to apply shifts, thus not needing all COMMONs to be explicit here
CD
CD If slack constraints are used, just before exit recalculates ends of bonds
CO Prints original value, shift, esd and new value for each basic variable
CO Puts this printing in lines for everything except family 2 parameters,
CO    and in clumps per atom for family 2
C
C%
C      LOGICAL SHFCEL,TESTOV,HEAD,NPROP
      EXTERNAL PCXX,PFXX,MAGSHF
      LOGICAL SHFCEL,HEAD,NPROP
      DIMENSION DPROP(3)
      CHARACTER *4 LNAM1,LNAM2
      COMMON /ATBLOC/NAME,IPNAME(12)
      CHARACTER *4 NAME,IPNAME
      COMMON /ATBLOK/IBUFF,PNEW(12),PESD(12),PSHIFT(12),POLD(12),
     & PSESD(12)
      COMMON /DERBAS/DERIVB(400),LVARB
      COMMON /DERVAR/DERIVV(500),LVARV
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /MATDAT/MATPNT(401),BLSQ(400)
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /POINTS/LVRBS(500),LVRPR(500),LBSVR(400),LRDVR(300)
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SLAKDA/NSLAK(4),SLKSWD(4),SLAKWT(4),
     & CHISQD(4),ISLKTP,NSKTOT,KOM24
      COMMON /SLKGEO/NSTYP,BOBS(500),EOBS(500),IATM(500,2),
     & ISYM(500),ILAT(500),CELLTR(3,500),XSLAK(3,500),
     & COSIN(3,3),IABASE(500),NST1,SLONLY,TOSTAR(6,6),BCALC(500),
     & DERCEL(6,500),DERPOS(3,500,2),ITYPSK(500),INVBON(10,
     & 500),NINVB(500),INANG(100,3),INTOR(100,6),
     & DERBON(10),NVB(10),NUMBON,NTARNM,NUMANG,NUMTOR,KOM25
      LOGICAL SLONLY
C
      IF (SIMUL) GO TO 100
      WRITE (LPT,2000) ICYC
2000  FORMAT (/////'1 ++++++++++ Shifts in variables for cycle',I3,
     & ' ++++++++++ ')
C
C START PRINT CONTROL:
      IG=0
      IBUFF=0
      HEAD=.FALSE.
      JPHASE=0
      JSOURC=0
      SHFCEL=.FALSE.
C
C CLEAR SHIFT AVERAGING:
      CALL FETSHF(1,0.,0.)
C SCAN ALL VARIABLES:
      DO 1 I=1,LVARV
C J=WHICH BASIC VARIABLE IS THIS I'TH VARIABLE
      J=LVRBS(I)
C KPACK=PACKED SPEC OF THIS PARAMETER
      KPACK=LVRPR(I)
      IF (J .LE. 0) THEN
C VARIABLE IS REDUNDANT, BY CONSTRAINT NUMBER -J:
        CALL SHFESD(-J)
      ELSE
C
C BASIC VARIABLE:
        SHIFT=BLSQ(J)
        ESD=DERIVB(J)
      ENDIF
C
C KEEP CURRENT PHASE & SOURCE:
      JP=JPHASE
      JS=JSOURC
C UNPACK PARAMETER SPEC:
      CALL KUNPAK(KPACK,IFAM,IGEN,ISPC,JPHASE,JSOURC)
      IF (JPHASE .NE. IPHASE) THEN
C NEW PHASE:
        IF (MULFAS) THEN
C TIDY PREVIOUS:
          IF (SHFCEL) THEN
            CALL RECELL(1,1)
            CALL CELSDP(ALSQ,MATSZ)
          ENDIF
C ADJUST ENDS OF ANY BONDS INVOLVING ALTERED COORDINATES:
          CALL GEOMCO(2)
          CALL PHMOVE(-1,IPHASE)
          WRITE (LPT,2011) JPHASE
2011      FORMAT (/' Phase',I3,' :')
          CALL PHMOVE(1,JPHASE)
          CALL LOGPHA(JPHASE)
        ENDIF
        SHFCEL=.FALSE.
      ENDIF
      IF (IFAM .EQ.3 .OR. IFAM .EQ. 6 .AND. (JS .NE. JSOURC))
     &  CALL LOGSOU(JSOURC)
C
C BRANCH ON FAMILY:
      GO TO (11,12,13,14,15,16), IFAM
      CALL ERRMES(-1,0,'family too big in APSHPR')
C
C FAMILY 1, GENUS 1 - MISCELLANEOUS SINGLY NAMED SPECIES (TFAC, A* ETC,
C EXTN,PROR,SPHA)
  11  GO TO (31,35,35,35,35,35,35,36,37,38,39,39,39) , ISPC
      CALL ERRMES(-1,0,'species too big in APSHPR')
C
C TFAC:
  31  CALL LLTFAC(3)
      GO TO 40
C
C FAMILY 1 GENUS 1 ALSO CONTAINS THE CELL PARAMETERS:
  35  CALL CELSHF(ISPC-1)
      SHFCEL=.TRUE.
      GO TO 40
C
C EXTINCTION CORRECTION PARAMETER EXTN:
  36  CALL EXCRPR(3)
      GO TO 40
C
C PREFERRED ORIENTATION
  37  CALL PREFOR(3)
      GO TO 40
C
C FAMILY 1, GENUS 1, SPECIES 10 - SCALE FOR PHASE, SPHA:
  38  CALL LPSCAL(3)
      GO TO 40
C FAMILY 1 GENUS 1, SPECIES 11,12,13 PROPAGATION VECTOR
   39 CALL PROPAG(3,ISPC-10)
        DPROP(ISPC-10)=SHIFT
        NPROP=.TRUE.
      GO TO 40
C
C FAMILY 6: MISCELLANEOUS SOURCE DEPENDENT;
  16  GO TO (61,62,63) , IGEN
      CALL ERRMES(-1,0,'genus too big in APSHPR')
C
C FAMILY 6 GENUS 1 - SINGLY NAMED, SOURCE-DEPENDENT SPECIES (SCAL,TTHM)
  61  GO TO (51,52) , ISPC
      CALL ERRMES(-1,0,'species too big in APSHPR')
C
C FAMILY 6, GENUS 1, SPECIES 1 - SCALE FOR SOURCE, SCAL:
  51  CALL LSSCAL(3)
      GO TO 40
C
C MONOCHROMATOR 2 THETA FOR LX:
  52  CALL TTHMLX(3)
      GO TO 40
C
C FAMILY 6, GENUS 2 - ABSC:
  62  CALL ABCRPR(3)
      GO TO 40
C
C FAMILY 6, GENUS 3 - BACK:
  63  CALL BACKPR(3)
      GO TO 40
C
C FAMILY 2 - THESE ARE ALL TO DO WITH THE STRUCTURE FACTOR:
C STOP APPLYING THE SHIFT MORE THAN ONCE TO RELATED SCATS:
  12  IF (J .LT. 0 .AND. ISPC .EQ. 10) GO TO 1
      IF (ISPC .LE. 12) CALL F2SHFT
      IF (ISPC .GT. 12) CALL MAGSHF(3)
      GO TO 40
C
C FAMILY 3 - ZERO POINT, PEAK CENTRE AND PEAK FUNCTION PARAMETERS:
C IF ANY FAMILY 2 SHIFTS LEFT IN BUFFER, PRINT THEM:
  13  CALL PRBLOK
C
C GENUS 1=ZERO POINT, 2=PEAK CENTRE, REST ARE PEAK FUNCTION:
      GO TO (41,42) , IGEN
      GO TO 43
C JvdS this seems to be where the results of the Pawley Refinement are written to the global variables
C ZERO:
  41  CALL ZEROPR(3)
      GO TO 40
C
C PEAK CENTRE PARAMETERS DEPEND ON TYPE OF REFINEMENT:
  42  CALL PCXX(3)
      GO TO 40
C
C REMAINING PEAK FUNCTION PARAMETERS:
  43  CALL PFALL(3)
      GO TO 40
C
C FAMILY 4 - LONG VECTORS (SO FAR, INTS, SIGS, GAMS . . IN PAWLEY)
  14  CALL FAM4PR(3,PCXX,PFXX)
      GO TO 40
C
C FAMILY 5 ARE MULTIPOLES, EXCLUDED FOR NOW:
  15  GO TO 1
C
C COMM0N EXIT TO PRINT SHIFTS:
  40  CALL FETSHF(2,SHIFT,ESD)
      CALL PARNAM(LNAM1,LNAM2,3,KPACK)
      IF (IFAM .NE. 2) GO TO 6
C FOR FAMILY 2, DETECT CHANGE OF GENUS (ATOM)
      IF (IG .NE. IGEN) THEN
        HEAD=.FALSE.
        CALL PRBLOK
C
C PUT FIRST ENTRY FOR NEW ATOM INTO BUFFERS:
        NAME=LNAM1
        IG=IGEN
      ENDIF
      IF (IBUFF .GE. 12) CALL PRBLOK
      IBUFF=IBUFF+1
      IPNAME(IBUFF)=LNAM2
      PNEW(IBUFF)=XNEW
      PESD(IBUFF)=ESD
      PSHIFT(IBUFF)=SHIFT
      POLD(IBUFF)=XOLD
      PSESD(IBUFF)=SHESD
      GO TO 1
C
C HERE TO PRINT NOT FAMILY 2 SHIFT AS BEFORE:
   6  IF (.NOT. HEAD) CALL MESS(LPT,1,'  Variable       New      '//
     & '     Esd          Shift          Old          Shift/Esd ')
      HEAD=.TRUE.
      WRITE (LPT,2006) LNAM1,LNAM2,XNEW,ESD,SHIFT,XOLD,SHESD
2006  FORMAT (' ',1X,A4,1X,A4,5G14.5)
   1  CONTINUE
      CALL PRBLOK
      IF (SHFCEL) THEN
        CALL RECELL(1,1)
        CALL CELSDP(ALSQ,MATSZ)
      ENDIF
      IF (NPROP) CALL REINDX(DPROP)
C
C ADJUST ENDS OF ANY BONDS INVOLVING ALTERED COORDINATES:
      CALL GEOMCO(2)
      CALL PHMOVE(-1,NPHASE)
C
      CALL FETSHF(3,0.,0.)
C
 100  RETURN
      END
C
C
C
C
C LEVEL 5      SUBROUTINE BACKIN
      SUBROUTINE BACKIN
C
C *** BACKIN by JCM 18 Jun 85 ***
C
C INTERPRETS ONE 'L BACK' CARD - USED IN PROFILE REFINEMENT INPUT
C
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /GRDBCK/IBACK,NBACK(5),ARGBAK(100,5),
     & BACKGD(100,5),KBCKGD(100,5),NBK,LBKD(20),ZBAKIN
      LOGICAL ZBAKIN
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /LREAD/ILREA(22,5),KOM18
      DIMENSION ILREAD(22)
      EQUIVALENCE (ILREAD(1),ILREA(1,1))
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
      IPT=7
      N=NBACK(KSOURC)+1
C
C IF NOT FIRST L BACK CARD READ BRANCH ON WHETHER IBACK .GT./.LT. 0
      IF (ILREAD(11) .GT. 1 .AND. IBACK .LT. 0) GO TO 150
      IF (ILREAD(11) .GT. 1 .AND. IBACK .GT. 0) GO TO 200
C
C IF FIRST L BACK CARD FIND OUT WHAT IBACK IS
      IF (ILREAD(11) .EQ. 1) CALL RDINTG(IBACK,IPT,IPT,80,IER)
C
C BRANCH ON WHETHER IBACK .GT./.LT. 0
      IF (IBACK .LT. 0) GO TO 160
C
C IBACK .GT. 0 :      BACKGROUND REFINEMENT
C
 302  WRITE (LPT,2500) IBACK
2500  FORMAT(/' Background refinement type ',I5)
      GO TO (310,320,330,340) ,IBACK
      CALL ERRIN2(IBACK,1,'Type of background refinement',
     & 'illegal - 1, 2, 3 or 4 only')
      GO TO 100
C
 310  CALL MESS(LPT,1,'Polynomial function')
      GO TO 400
C
 320  CALL MESS(LPT,1,'Chebyschev polynomial (1st kind) function')
      GO TO 400
C
 330  CALL MESS(LPT,1,'Chebyschev polynomial (2nd kind) function')
      GO TO 400
C
 340  CALL MESS(LPT,1,'Fourier cosine series function')
      GO TO 400
C
 400  NBK= 0
C
C 1ST BACKGROUND CARD NOW JOINS UP WITH FURTHER BACKGROUND CARDS
 200  NBK= NBK+1
      LBKD(NBK)= N
      CALL RDNUMS(BACKGD(N,KSOURC),IPT,20,NUM,IER)
      IF (IER .NE. 0) IERR= IERR+1
      NBACK(KSOURC)= NBACK(KSOURC)+NUM
      IER=IERR
C%
C      CALL ERRCHK(1,NBACK(KSOURC),%BACK%,1,'background parameters')
      CALL ERRCHK(1,NBACK(KSOURC),100,1,'background parameters')
      IF (IER .NE. IERR) GO TO 100
C
      LBKD(NBK+1)= NBACK(KSOURC)+1
      CALL MESS(LPT,1,'Background parameter(s) :')
      CALL PRILIS(BACKGD(1,KSOURC),N,NBACK(KSOURC))
      GO TO 100
C
C
C
C NOT 1ST CARD AND IBACK .LT. 0 : READ TYPE OF BACKGROUND WANTED -
C OCCURS ON EVERY CARD, SAME ON EACH IF IBACK .LT. 0:
 150  CALL RDINTG(IB,IPT,IPT,80,IER)
C 1ST CARD AND IBACK .LT. 0 JUMPS TO THIS POINT
 160  IF (NBACK(KSOURC) .EQ. 0) GO TO 2
      IF (IB .EQ. IBACK) GO TO 1
      WRITE (LPT,3001) IBACK,IB
      WRITE (ITO,3001) IBACK,IB
3001  FORMAT (/' ERROR ** background type altered from',I4,' to',I4)
      IERR=IERR+1
      GO TO 100
C
C   2  IBACK=IB
   2  IF ((IBACK .GE. 0) .OR. (IBACK .LE. -3)) THEN
        CALL ERRIN2(IBACK,2,'type of background approximation',
     &  'not allowed - only -1 or -2')
        GO TO 100
      ENDIF
C
C READ NEXT NUMBER PAIR ON CARD:
   1  CALL RDREAL(ARGBAK(NBACK(KSOURC)+1,KSOURC),IPT,IPT,80,IER)
C JUMP ON END OF CARD INFORMATION:
      IF (IER .EQ. 100) GO TO 7
      IER=IERR
C%
C      CALL ERRCHK(2,NBACK(KSOURC),%BACK%,1,
      CALL ERRCHK(2,NBACK(KSOURC),100,1,
     & 'background table entries')
      IF (IER .NE. IERR) GO TO 100
C
   5  CALL RDREAL(BACKGD(NBACK(KSOURC),KSOURC),IPT,IPT,80,IER)
      IF (IER .NE. 100) GO TO 6
      CALL ERRRE2(ARGBAK(NBACK(KSOURC),KSOURC),2,
     & 'no background value with arg=',' ')
      GO TO 10
C
   6  IF (NBACK(KSOURC) .EQ. 1) GO TO 1
      IF (ARGBAK(NBACK(KSOURC),KSOURC) .GT.
     & ARGBAK(NBACK(KSOURC)-1,KSOURC)) GO TO 1
      WRITE (LPT,3004) ARGBAK(NBACK(KSOURC),KSOURC),
     & ARGBAK(NBACK(KSOURC)-1,KSOURC)
      WRITE (ITO,3004) ARGBAK(NBACK(KSOURC),KSOURC),
     & ARGBAK(NBACK(KSOURC)-1,KSOURC)
3004  FORMAT (/' ERROR ** arguments for backgrounds not in',
     & ' strictly ascending order'/' ',F12.2,' follows',F12.2)
      IERR=IERR+1
      GO TO 100
C
   7  IF (NBACK(KSOURC) .EQ. N-1) THEN
        CALL ERRMES(1,1,'no non-zero numbers given on L BACK card')
        GO TO 100
      ENDIF
C
  10  IF (N .NE. 1) GO TO 3
      WRITE (LPT,2000) IBACK
2000  FORMAT(/' Background approximation type ',I5)
      GO TO (11,12) ,-IBACK
      CALL ERRIN2(IBACK,2,'Type of background','illegal')
      GO TO 100
C
  11  CALL MESS(LPT,1,'Linear interpolation required')
      GO TO 4
C
  12  CALL MESS(LPT,1,'Cubic spline approximation to be used')
C
   4  CALL MESS(LPT,1,'Argument    Background')
   3  WRITE (LPT,2001) (ARGBAK(J,KSOURC),
     & BACKGD(J,KSOURC),J=N,NBACK(KSOURC))
2001  FORMAT (1X,F12.2,F12.2)
      GO TO 100
C
 100  RETURN
      END
C
C
C
C
C LEVEL 6      SUBROUTINE BACKPR(N)
      SUBROUTINE BACKPR(N)
C
C *** BACKPR by WIFD 20 Aug 86
C
C MULTIPLE ENTRY ROUTINE TO DEAL WITH ALL ASPECTS OF BACKGROUNDS FOR CN
C
C ON ENTRY, N=1 MEANS INTERPRET L BACK CARD
C           N=2
C             IBACK .LT. 0
C               MEANS SET YBACK (IN COMM0N /OBSCAL) TO BE BACKGROUND AT
C               ARGI (IN COMMON /PRPKFN)
C             IBACK .GT. 0
C               MEANS CALCULATE YBACK AND ITS DERIVATIVES
C           N=3 APPLICABLE ONLY FOR IBACK .GT. 0
C               MEANS APPLY SHIFTS TO BACKGROUND PARAMETERS
C           N=4 APPLICABLE ONLY FOR IBACK .GT. 0
C               MEANS WRITE OUT NEW L BACK CARD
C               (IBACK .LT. 0 LEADS TO TRIVIAL OUTPUT OF LBACK CARD
C
C USES IBACK TO INDICATE MODE OF FINDING BACKGROUND;
C IF IBACK .LT. 0 THEN BACKGROUND APPROXIMATION IS REQUIRED.
C AT PRESENT IBACK=-1 OR -2
C AVAILABLE,     -1  MEANING LINEAR INTERPOLATION IN TABLE USING ALNINT
C                -2  MEANING USE CUBIC SPLINE PREVIOUSLY SET UP
C                (0 WILL MEAN READ VALUES FROM FILE ?)
C IF IBACK .GT. 0 THEN BACKGROUND REFINEMENT IS REQUIRED
C

      INCLUDE 'PARAMS.INC'

      COMMON /CONSTA/PI,RAD,DEG,TWOPI,FOURPI,PIBY2,ALOG2,SQL2X8,VALMUB
      COMMON /DERVAR/DERIVV(500),LVARV
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /GRDBCK/IBACK,NBACK(5),ARGBAK(100,5),
     & BACKGD(100,5),KBCKGD(100,5),NBK,LBKD(20),ZBAKIN
      LOGICAL ZBAKIN
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /OBSCAL/OBS,DOBS,GCALC,YCALC,DIFF,ICODE,SUMWD,NOBS,
     & IWGH(5),WTC(4),WT,SQRTWT,WDIFF,YBACK,YPEAK,YMAX,CSQTOT
      EQUIVALENCE (IWGHT,IWGH(1))
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /POINTS/LVRBS(500),LVRPR(500),LBSVR(400),LRDVR(300)
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END
      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      COMMON /SPLBCK/SCOEFF(100,5)
C
      GO TO (1,2,3,4) , N
      GO TO 100
C
C READ ONE L BACK CARD:
   1  CALL BACKIN
      GO TO 100
C
C CALCULATE YBACK VALUE AT ARGI: BIFURCATE ON WHETHER IBACK LT/EQ/GT 0
   2  IF (IBACK) 200,250,300
C
C BACKGROUND INTERPOLATION APPROXIMATIONS
 200  GO TO (11,12) , -IBACK
  11  YBACK=ALNINT(ARGBAK(1,JSOURC),BACKGD(1,JSOURC),ARGI,
     & NBACK(JSOURC))
      GO TO 100
C
  12  YBACK=SPLINT(-1,NBACK(JSOURC),ARGBAK(1,JSOURC),
     & BACKGD(1,JSOURC),SCOEFF(1,JSOURC),ARGI)
      GO TO 100
C
C BACKGROUND READ FROM FILE
 250  GO TO 100
C
C BACKGROUND AND DERIVATIVES CALCULATED FROM BACKGROUND FUNCTION
 300  GO TO (310,320,330,340) , IBACK
C
C SIMPLE POLYNOMIAL MODEL
 310  YBACK= 0.
      AMUL= 1.
      BMUL= (ARGI-ARGMIN(JSOURC))/(ARGMAX(JSOURC)-ARGMIN(JSOURC))
      DO 311 I=1,NBACK(JSOURC)
      YBACK= YBACK+BACKGD(I,JSOURC)*AMUL
      L=KBCKGD(I,JSOURC)
      IF (L .NE. 0) DERIVV(L)= DERIVV(L) + AMUL
      AMUL= AMUL*BMUL
 311  CONTINUE
      GO TO 100
C
C CHEBYSCHEV POLYNOMIAL (OF THE FIRST KIND) MODEL
 320  YBACK= BACKGD(1,JSOURC)
      L=KBCKGD(1,JSOURC)
      IF (L .NE. 0) DERIVV(L)= DERIVV(L) + 1.
      IF (NBACK(JSOURC) .LE. 1) GO TO 100
C XCHEB IS DEFINED BETWEEN -1 AND 1
      XCHEB= (2.*ARGI-(ARGMAX(JSOURC)+ARGMIN(JSOURC)))/
     & (ARGMAX(JSOURC)-ARGMIN(JSOURC))
      CHEB0= 0.
      CHEB1= 1.
      DO 321 I=2,NBACK(JSOURC)
      CHEB2= 2.*XCHEB*CHEB1-CHEB0
      IF (I .EQ. 2) CHEB2= 0.5*CHEB2
      YBACK= YBACK+BACKGD(I,JSOURC)*CHEB2
      L=KBCKGD(I,JSOURC)
      IF (L .NE. 0) DERIVV(L)= DERIVV(L) + CHEB2
      CHEB0=CHEB1
      CHEB1=CHEB2
 321  CONTINUE
      GO TO 100
C
C CHEBYSCHEV POLYNOMIAL (OF THE SECOND KIND) MODEL
 330  YBACK= BACKGD(1,JSOURC)
      L=KBCKGD(1,JSOURC)
      IF (L .NE. 0) DERIVV(L)= DERIVV(L) + 1.
      IF (NBACK(JSOURC) .LE. 1) GO TO 100
C XCHEB IS DEFINED BETWEEN -1 AND 1
      XCHEB= (2.*ARGI-(ARGMAX(JSOURC)+ARGMIN(JSOURC)))/
     & (ARGMAX(JSOURC)-ARGMIN(JSOURC))
      CHEB0= 0.
      CHEB1= 1.
      DO 331 I=2,NBACK(JSOURC)
      CHEB2= 2.*XCHEB*CHEB1-CHEB0
      YBACK= YBACK+BACKGD(I,JSOURC)*CHEB2
      L=KBCKGD(I,JSOURC)
      IF (L .NE. 0) DERIVV(L)= DERIVV(L) + CHEB2
      CHEB0=CHEB1
      CHEB1=CHEB2
 331  CONTINUE
      GO TO 100
C
C FOURIER COSINE SERIES
 340  YBACK= BACKGD(1,JSOURC)
      L=KBCKGD(1,JSOURC)
      IF (L .NE. 0) DERIVV(L)= DERIVV(L) + 1.
      IF (NBACK(JSOURC) .LE. 1) GO TO 100
C XTEM IS DEFINED BETWEEN 0 AND TWOPI
      XTEM= (ARGI-ARGMIN(JSOURC))/(ARGMAX(JSOURC)-ARGMIN(JSOURC))
      DO 341 I=2,NBACK(JSOURC)
      COSNX= COS(TWOPI*FLOAT(I-1)*XTEM)
      YBACK= YBACK+BACKGD(I,JSOURC)*COSNX
      L=KBCKGD(I,JSOURC)
      IF (L .NE. 0) DERIVV(L)= DERIVV(L) + COSNX
 341  CONTINUE
      GO TO 100
C
C APPLY SHIFTS TO BACKGROUND PARAMETERS
   3  IF (IBACK .GT. 0) THEN
        IF (MULFAS .AND. JPHASE .GT. 1) GO TO 100
        CALL ADJUST(BACKGD(ISPC,JSOURC))
      ENDIF
      GO TO 100
C
C WRITE NEW L BACK CARD (APPLICABLE ONLY FOR IBACK .GT. 0)
   4  DO 40 I=1,NBK
      IF (LBKD(I) .GT. 0) GO TO 42
  40  CONTINUE
      WRITE(LPT,3001) NBK,LBKD
3001  FORMAT(/' PROGRAM ERROR *** Too many background cards being '//
     & 'written out - NBK =',I4/' LBKD holds ',10I3)
      STOP
C
  42  N1= LBKD(I)
      N2= LBKD(I+1)-1
      LBKD(I)= -LBKD(I)
      IF (I. EQ. 1) WRITE(NEWIN,2004) IBACK,(BACKGD(J,JSOURC),
     & J=N1,N2)
      IF (I. NE. 1) WRITE(NEWIN,2005) (BACKGD(J,JSOURC),J=N1,N2)
 2004 FORMAT('L BACK',1X,I4,4X,6(F10.5,1X))
 2005 FORMAT('L BACK',1X,7(F10.5,1X))
      GO TO 100
C
C
      ENTRY BACKP8(NP,NV)
C RECORD THAT PARAMETER NP IS VARIABLE NUMBER NV:
      KBCKGD(NP,JSOURC)=NV
      GO TO 100
C
C
      ENTRY BACKP9
C RECORD ALL PARAMETERS FIXED:
      DO 21 J=1,NSOURC
      DO 21 I=1,NBACK(J)
  21  KBCKGD(I,J)=0
C
 100  RETURN
      END
C
C
C
C
C LEVEL 7      SUBROUTINE CALCD2(H)
      SUBROUTINE CALCD2(H)
C
C *** CALCD2 by JCM 14 Mar 85 ***
C
CX
CC 7B
CH Gives the calculated function for LSQ refinement for which the
CH observations are time-of-flight values, and calculates derivatives.
CA On entry H is a 1x3 vector holding h,k,l
CP /CELPAR/ holds the reciprocal cell quadratic products in CPARS(1:6,2), and
CP                their fix/vary information in KCPARS(1:6)
CP /THET2/ holds THE2, the refinabale value of 2 theta degrees
CP               KTHE2, the fix/vary information for THE2, and
CP               THCON1=cos theta (converted to radians)
CD Forms GCALC in /OBSCAL/ as PKCN(1)*252.777*lambda + PKVCN(2) lambda squared
CP                          + ZERO
CD and all derivatives in DERIVV in /DERVAR/
C
      DIMENSION H(3),C(6)
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /CELPAR/CELL(3,3,2),V(2),ORTH(3,3,2),CPARS(6,2),KCPARS(6),
     & CELESD(6,6,2),CELLSD(6,6),KOM4
      COMMON /DERVAR/DERIVV(500),LVARV
      COMMON /DGEOM/IGEOM,UM(9),NLR,ANGLIN(3),ALAMBD(5,5),
     & NLAMB,ILAMB
      EQUIVALENCE (WLGTH,ALAMBD(1,1))
      COMMON /OBSCAL/OBS,DOBS,GCALC,YCALC,DIFF,ICODE,SUMWD,NOBS,
     & IWGH(5),WTC(4),WT,SQRTWT,WDIFF,YBACK,YPEAK,YMAX,CSQTOT
      EQUIVALENCE (IWGHT,IWGH(1))
      COMMON /POINTS/LVRBS(500),LVRPR(500),LBSVR(400),LRDVR(300)
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
** THIS IS ONLY HERE FOR KNOW, WHICH IS NOT NICE
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
      COMMON /PRZERO/ZEROSP(6,9,5),KZROSP(6,
     & 9,5),DKDZER(6),NZERSP(9,5)
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      COMMON /THET2/THE2,KTHE2,THCON1
C
C FIRST FORM D* SQUARED AND ITS DERIVATIVE WRT A*, B* ETC:
      CALL CELDER(H,C)
C
C NOW D*:
      DSTAR(1)=SQRT(DSTAR2)
      KNOW=1
      TWOTHD(JSOURC)=THE2
      CALL PCTF01(2)
      GCALC=ARGK
C
C DERIVATIVE WRT 2THETA DEGREES IF REQD:
      L=KTHE2
C DT/DLAM * DLAM/D(2THETA DEGREES) ; THCON1 HOLDS COS THETA * RADIANS
      IF (L .GT. 0) DERIVV(L)=DTDWL*THCON1/DSTAR(1)
C
C DERIVATIVES WRT PEAK CENTRE PARAMETERS:
      L=KPCNSP(1,JPHASE,JSOURC)
      IF (L .GT. 0) DERIVV(L)=DTDPCN(1)
      L=KPCNSP(2,JPHASE,JSOURC)
      IF (L .GT. 0) DERIVV(L)=DTDPCN(2)
C AND ZERO
      L=KZROSP(1,JPHASE,JSOURC)
      IF (L .GT. 0) DERIVV(L)=DKDZER(1)
C
C DERIVATIVES WRT CELL PARAMETERS A* B* ETC; IN STAGES, DT/DLAM,
C DLAM/D(DSTAR SQRD), D(DSTAR SQRD)/DA* (AS OUT OF CELDER):
      FAC=DTDWL*(-0.5*WLGTH/DSTAR2)
      DO 2 I=1,6
      L=KCPARS(I)
      IF (L .GT. 0) DERIVV(L)=C(I)*FAC
   2  CONTINUE
C
      RETURN
      END
C
C
C
C
C LEVEL 9       SUBROUTINE CALPR(PCXX,PFXX)
      SUBROUTINE CALPR(PCXX,PFXX)
C
C  *** CALPR updated by JCM 17 Apr 89 ***
C
CH Gives calculated function to match observed for all PR applications
CA PCXX is the name of the routine giving peak centre
CA PFXX is the name of the routine giving peak function
CP on entry in /PRPKFN/ expects ARGI, the argument for the I'th observation
C
CD Forms GCALC, then summed to make YPEAK
CD Adds derivatives of GCALC into previously cleared DERIVV, and via RFACPR
CD gives GGCALC and contributions to SOMEGA.
C
CD GCALC is made from several functions multiplied together.
CD We write GCALC = P1*P2*P3* . . . where:
CD    P1 is an outside multiplying factor containing scale, Lp, multiplicity,
CD       overal tf, etc - it does not contain any structure parameters
CD    P2 is a fuction of the structure factor, usually Fc squared.
CD    P3 is an extinction correction
CD    P4 is an absorption correction
CD    P5 is the peak function
CD
CD YPEAK is then the sum over contributing k values of GCALC.
C
CD Should work for all refinement types (RIET, CAILS, SAPS . .)
CD                 all data sources (TOF, CN, LX . . )
C
C
      EXTERNAL PCXX,PFXX
      LOGICAL TESTOV
      COMPLEX FCALC

	INCLUDE 'params.inc'
C%
C      DIMENSION DERIVA(%VVAR%),CDERS(6),DERIV4(5)
      DIMENSION DERIVA(500),CDERS(6),DERIV4(5)
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /CELPAR/CELL(3,3,2),V(2),ORTH(3,3,2),CPARS(6,2),KCPARS(6),
     & CELESD(6,6,2),CELLSD(6,6),KOM4
      COMMON /CONSTA/PI,RAD,DEG,TWOPI,FOURPI,PIBY2,ALOG2,SQL2X8,VALMUB
      COMMON /DERVAR/DERIVV(500),LVARV
      COMMON /DGEOM/IGEOM,UM(9),NLR,ANGLIN(3),ALAMBD(5,5),
     & NLAMB,ILAMB
      EQUIVALENCE (WLGTH,ALAMBD(1,1))
      COMMON /FCAL/FC,FCMOD,COSAL,SINAL,FCDERS(300),DERIVT(300)
      COMPLEX FC,DERIVT

      COMMON /F4PARS/NGEN4(9,5),F4VAL(3,MF4PAR),
     & F4PAR(3,MF4PAR),KF4PAR(3,MF4PAR),F4PESD(3,MF4PAR),KOM6

      COMMON /OBSCAL/OBS,DOBS,GCALC,YCALC,DIFF,ICODE,SUMWD,NOBS,
     & IWGH(5),WTC(4),WT,SQRTWT,WDIFF,YBACK,YPEAK,YMAX,CSQTOT

      EQUIVALENCE (IWGHT,IWGH(1))
      COMMON /OVER/ITFAC,OTFAC(10),KOTFAC(10),NTFAC,JTFAC,KOM15
      EQUIVALENCE (TFAC,OTFAC(1)),(KTFAC,KOTFAC(1))
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /POINTS/LVRBS(500),LVRPR(500),LBSVR(400),LRDVR(300)
      COMMON /POSNS/NATOM,X(3,150),KX(3,150),AMULT(150),
     & TF(150),KTF(150),SITE(150),KSITE(150),
     & ISGEN(3,150),SDX(3,150),SDTF(150),SDSITE(150),KOM17
      COMMON /PRABSC/NABTYP(5),ABSPR(2,5),KABSPR(2,5),
     & ABSCOR,DERABQ(2),NABSPR(5)
      COMMON /PRBLEM/NFAM,NGENPS(6,9),NSPCPS(6,9),
     & LF1SP(5),LF3SP(10,9,5),LVFST1(6,9,5),
     & LBFST1(6,9,5),NVARF(6,9,5),
     & NBARF(6,9,5),LF6SP(3,5)
      DIMENSION NGENS(6),NSPC(6)
      EQUIVALENCE (NGENS(1),NGENPS(1,1)),(NSPC(1),NSPCPS(1,1))
      COMMON /PREORI/NPRTYP,PRFDIR(3),PRFLEN,PRFPAR,KPRFPR,PRFCOR,DERPRQ
      COMMON /PREXTN/NEXTYP,EXTPR,KEXTPR,EXTCO,DEREXQ,DXDFQ
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON

      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END

      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /PRSAVE/KPOINT(200),SAVP2(200),SAVDER(300,200),
     & SAVPRC(200),SAVDPC(200),SAVFCN(200)
      COMMON /PRSTAT/SMYC,SMYD,SMYO,SMIO,SMID,SMWYOS,IZCT,
     & P5,IOP1,IOP2,KMI(9),KMA(9)
      COMMON /PRZERO/ZEROSP(6,9,5),KZROSP(6,
     & 9,5),DKDZER(6),NZERSP(9,5)
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      COMMON /TTHMNC/TTHMON(5),KTHMON(5),C2TMON(5),
     & S4TMON(5),OPCMON(5),ALPCOR,DLPCOR
C
      COMMON /POSCMN/POSREF(MPSCMN)
C

      COMMON /CMN299/KIPT(MPTS),KNIPT(MAXPIK),ZNORM(MAXPIK),
     &DZNDKQ(MAXPIK),DZNDVQ(9,MAXPIK),IOCCR(MPTS),JOCCR(MPTS)
	COMMON /REFLNZ/ZARGK(MRFLNZ),ZXDEL(MRFLNZ)
      COMMON /CMNNOW/NOBSNOW
C
 
      LOGICAL LOGIPK
      COMMON /IPKCMN/ LOGIPK,IPK,PIK(MIPK)
C
C IF X-RAY, DEAL FIRST WITH LP FOR THIS ARGI:
      IF (LX) CALL TTHMLX(2)
C
C CYCLE OVER K:
      K1=KIPT(NOBSNOW)+1
      K2=KIPT(NOBSNOW+1)
	KMIN=K1
      DO 11 KK=K1,K2
        KNOW=KNIPT(KK)
        KMOD=KNOW
	  ARGK=ZARGK(KNOW)
C
C FORM D* SQUARED,S SQUARED, AND DERIVATIVES WRT RECIPROCAL CELL
C PARAMETERS:
        CALL CELDER(REFH(1,KNOW),CDERS)
        DSTAR(KNOW)=SQRT(DSTAR2)
C
      CALL PCXX(2)
C
      L2=NVARF(2,JPHASE,1)
      L123=NVARF(1,JPHASE,JSOURC)+L2+NVARF(3,JPHASE,JSOURC)*NSOURC
      L1ST=LVFST1(1,JPHASE,1)
C
C FORM P1 AND SOME FAMILY 1 QUOTIENT DERIVATIVES (ALL /P1):
C EACH DATA TYPE HAS DIFFERENT FACTOR:
      IF (TOF) FAC=1./(DSTAR2*DSTAR2)
      IF (CN) FAC=1./(SIN(RAD*ARGK)*SIN(0.5*RAD*ARGK))
      IF (SR) FAC=1./(SIN(RAD*ARGK)*SIN(0.5*RAD*ARGK))
	IF (LX) FAC=ALPCOR
C	This next line was the original line, but it's been commented
C	out for numerical stability reasons and replaced by
C	the line above
C      IF (LX) FAC=ALPCOR*V(2)*V(2)
      P1=SCALEP(JPHASE)*SCALES(JSOURC)*EXP(-2.*SSQRD*TFAC)*
     & AMUL(KNOW)*FAC
C TFAC DERIVATIVE:
      L=KTFAC
      IF (L .NE. 0) DERIVA(L)=-2.*SSQRD
C SCALE DERIVATIVES:
      L=KSCALS(JSOURC)
      IF (L .NE. 0) DERIVA(L)=1./SCALES(JSOURC)
      L=KSCALP(JPHASE)
      IF (L .NE. 0) DERIVA(L)=1./SCALEP(JPHASE)
C
C PREFERRED ORIENTATION:
      IF (NPRTYP .GT. 0) THEN
        L=KPRFPR
        CALL PREFOR(2)
        P1=P1*PRFCOR
        IF (L .NE. 0) DERIVA(L)=DERPRQ
      ENDIF
C
C IF X-RAY, MONOCHROMATOR ANGLE:
      IF (LX) THEN
        L=KTHMON(JSOURC)
        IF (L .NE. 0) DERIVA(L)=DLPCOR
      ENDIF
C
C NEXT DO P2, THE PART DEPENDENT ON THE STRUCTURE FACTOR:
C IF CAIL, P2 IS SIMPLY F4PAR(1,KNOW):
      IF (CAIL .OR. APES) THEN
        IF (KF4PAR(1,KNOW) .EQ. 0) THEN
          F4PAR(1,KNOW)=1.
        ELSE
          DERIV4(1)=1.
        ENDIF
        IF (F4PAR(1,KNOW).NE. 0.) DERIV4(1)=1./F4PAR(1,KNOW)
        P2=F4PAR(1,KNOW)
      ELSE
C SET BASE FOR DERIVATIVES:
        III=LVFST1(2,JPHASE,1)
C NEW K:
C IF NO FAMILY 2 VARIABLES, NO NEED FOR LFCALC:
        IF (L2 .GT. 0) THEN
          CALL LFCALC(REFH(1,KNOW))
          F=0.
          IF (.NOT. TESTOV(2.,FCMOD)) F=2./FCMOD
          P2=FCMOD*FCMOD
C CONVERT DERIVATIVES FOR FAMILY 2 FROM BEING 'OF FCMOD' TO 'OF P2'
C DP2/DV = DMODFC/DV * DP2/DMODFC - AND ALL ARE DIVIDED BY P2
C GIVING D(GCALC)/DV OVER GCALC=(DP2/DV OVER P2)
          DO I=1,L2
            DERIVA(III+I)=F*FCDERS(I)
          END DO
        ELSE
          FC=FCALC(REFH(1,KNOW))
          P2=FC*CONJG(FC)
          FCMOD=SQRT(P2)
        ENDIF
C
      ENDIF
C
C P3:
      CALL EXCRPR(2)
      P3=EXTCO
      DP2DFQ=DP2DFQ+DXDFQ
      L=KEXTPR
      IF (L .GT. 0) DERIVA(L)=DEREXQ
C
C P4:
      CALL ABCRPR(2)
      P4=ABSCOR
      DO 88 IA=1,2
      L=KABSPR(IA,JSOURC)
      IF (L .GT. 0) DERIVA(L)=DERABQ(IA)
  88  CONTINUE
C
C P5 - PEAK FUNCTION:
C
      YNORM=ZNORM(KK)
      DYNDKQ=DZNDKQ(KK)
      DO I=1,NPKGEN(JPHASE,JSOURC)
        DYNDVQ(I)=DZNDVQ(I,KK)
      END DO
C
      P5=YNORM
C
C ADJUST DERIVATIVES WRT ZERO POINT:
      DO 14 I=1,NZERSP(JPHASE,JSOURC)
      L=KZROSP(I,JPHASE,JSOURC)
      IF (L .GT. 0) DERIVA(L)=DYNDKQ*DKDZER(I)
  14  CONTINUE
C
C ADJUST DERIVATIVES WRT PEAK CENTRE PARAMETERS, IF ANY:
      DO 13 I=1,NPKCSP(JPHASE,JSOURC)
      L=KPCNSP(I,JPHASE,JSOURC)
      IF (L .GT. 0) DERIVA(L)=DYNDKQ*DTDPCN(I)
  13  CONTINUE
C
C TAKE DERIVATIVES AS FORMED BY PFXX AND PUT INTO DERIVA
C ^^^^^ WE COULD CONSIDER ADDING CONTRIBUTIONS IN SIGS AND GAMS RATHER THAN
C ^^^^^ JUST SWITCHING BETWEEN A FUNCTIONAL VARIATION AND A SPECIAL REFINEMENT
C ^^^^^ I.E. S^2 = S1^2 + S2^2
      DO 12 I=1,NPKGEN(JPHASE,JSOURC)
      DDDTEM=DYNDVQ(I)
C IF SAPS OR APES, AND REFINING THIS SIGS/GAMS:
      IF (RIET .OR. CAIL) GO TO 29
C ^^^^^ INSTEAD OF 4 IN THE FOLLOWING LINE WE MAY WISH, AT A LATER DATE,
C ^^^^^ TO CONNECT THE GENERA OF FAMILIES 2 & 4 ASSOCIATED WITH THE
C ^^^^^ SAME VARIABLE. I.E. INSTEAD OF 4 WE HAVE I4PD(I)
C      IF (I .NE. 4) GO TO 29
C ^^^^^ THE FOLLOWING IS A BIT OBSCURE AND QUIRKY
      IF (TOF) THEN
        IG=I-2
      ELSE
        IG=I+1
      ENDIF
      IF (IG .NE. 2 .AND. IG .NE. 3) GO TO 29
      IF (KF4PAR(IG,KNOW) .GT. 0) THEN
**** CHECK THIS - SHOULD BE DERIVATIVE OF P5 WRT SIGS
C ^^^^^ NEXT LINE MAY HAVE DPDDPD(I,2) MULTIPLIED IN AT A LATER DATE.
        DERIV4(IG)=DDDTEM
        GO TO 12
      ENDIF
  29  DO 112 J=1,NPKFSP(I,JPHASE,JSOURC)
C ^^^^^ NEXT LINE MAY HAVE DPDDPD(I,1) MULTIPLIED IN AT A LATER DATE.
      L=KPFNSP(I,J,JPHASE,JSOURC)
      IF (L .GT. 0) DERIVA(L)=DDDTEM*DERPFN(I,J)
  112 CONTINUE
   12 CONTINUE
C
C NOW CELL PARAMETERS, A* - F*, WHOSE DERIVATIVES SO FAR ARE OF D*SQUARED:
      IF (CN .OR. LX .OR. SR) FAC=DKDDS
      IF (TOF) FAC=DTDWL*(-0.5*WLGTH)/DSTAR2
      DO 10 I=1,6
C CHAIN RULE: YNORM - ARGK - D*SQRD - CELL PARAM.
      L=KCPARS(I)
      IF (L .GT. 0) DERIVA(L)=DYNDKQ*CDERS(I)*FAC
   10 CONTINUE
C
C
      GCALC = P1*P2*P3*P4*P5
      PIK(KNOW)=P1*P3*P4*P5
      YPEAK=YPEAK+GCALC
C
C PUT APPROXIMATION TO I(CALC) INTO COMM0N:
      AICALC(KNOW)=P1*P2
C
C SET GGCALC(K FOR THIS I), AND ADD P5 IN TO SOMEGA(K):
      CALL RFACPR(6,PCXX)
C
C FAMILIES 1,2,3:
C THIS ONLY WORKS IF WE DO NOT HAVE 2 CAIL PHASES:
       DO I=1,L123
         DERIVV(L1ST+I)=DERIVV(L1ST+I) + DERIVA(L1ST+I)*GCALC
       END DO
C FAMILY 4:
      IF (.NOT. RIET) THEN
C WE NOW PICK UP WHICHEVER FAMILY 4 GENERA ARE BEING REFINED
** THIS WON'T BE RIGHT YET BUT COULD BE WORKED ON:
** (AND ONCE RIGHT, IT COULD BE SET ONCE ONLY RATHER THAN EVERY TIME):
        L4ST=1
        L4FIN=1
        IF (.NOT. CAIL) L4FIN=4
        DO 42 I=L4ST,L4FIN
        L4=KF4PAR(I,KNOW)
        IF (L4 .NE. 0) DERIVV(L4)=DERIVV(L4)+DERIV4(I)*GCALC
  42    CONTINUE
      ENDIF
C FAMILY 6:
C SCALE DERIVATIVES:
      L=KSCALS(JSOURC)
      IF (L.GT.0) DERIVV(L)=DERIVV(L) + DERIVA(L)*GCALC
      DO 7 IA=1,2
      L=KABSPR(IA,JSOURC)
      IF (L.GT.0) DERIVV(L)=DERIVV(L) + DERIVA(L)*GCALC
   7  CONTINUE
  11  CONTINUE
C
 100  RETURN
      END
C
C

C
C
C
C
C LEVEL 9      SUBROUTINE CONTRI(PCXX,PFXX,IUNI)
      SUBROUTINE CONTRI(PCXX,PFXX,IUNI)
C
C *** CONTRI BY JCM 26 Sep 90 ***
C
CH Determines which (if any) reflections contribute to a given data point
CH And does other processing, writing to temporary file
C
      EXTERNAL PCXX,PFXX

	INCLUDE 'PARAMS.INC'
      LOGICAL CONT,EXCLD
      DIMENSION TEMP(6)
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /EXCREG/NEXCL(5),EXCLUD(40,5)
      COMMON /OBSCAL/OBS,DOBS,GCALC,YCALC,DIFF,ICODE,SUMWD,NOBS,
     & IWGH(5),WTC(4),WT,SQRTWT,WDIFF,YBACK,YPEAK,YMAX,CSQTOT
      EQUIVALENCE (IWGHT,IWGH(1))
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END
      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /PRSTAT/SMYC,SMYD,SMYO,SMIO,SMID,SMWYOS,IZCT,
     & P5,IOP1,IOP2,KMI(9),KMA(9)
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
C
C.. Note only 3 phases specifically hardwired here
      COMMON /ZSTORE/ NPTS,ZARGI(MPPTS),ZOBS(MPPTS),ZDOBS(MPPTS),
     &ZWT(MPPTS),ICODEZ(MPPTS),KOBZ(MPPTS)


C
C NON-ZERO CODE FOR EXCLUDED REGIONS:
      ICODE=0
      IF (NEXCL(JSOURC) .NE. 0) THEN
        IF (EXCLD(ARGI,EXCLUD(1,JSOURC),NEXCL(JSOURC))) ICODE=1
      ENDIF
C
C DISCOVER LOWER AND UPPER LIMITS OF REFLECTION NUMBERS CONTRIBUTING TO THIS:
      CONT=.FALSE.
      IF (ICODE .EQ. 0) THEN
C THE 10 IS ARBITRARY:
        KM=KMIN-10
        IF (KM .LT.1) KM=1
        DO 1 KNOW=KM,MAXKK(JPHASE)
        CALL CELDER(REFH(1,KNOW),TEMP)
        DSTAR(KNOW)=SQRT(DSTAR2)
        CALL PCXX(5)
        CALL PFXX(5)
        IF (.NOT.REFUSE) THEN
          CONT=.TRUE.
C SET 'WE HAVE AT LEAST ONE CONTRIBUTING REFLECTION':
        ELSE
          IF (ARGK .GT. ARGI) GO TO 2
          KMIN=KNOW+1
        ENDIF
C
   1    CONTINUE
C
C KMAX=0 IF NONE CONTRIBUTING, OTHERWISE = NUMBER OF LAST CONTRIBUTING:
   2    KMAX=KNOW-1
      ENDIF
      IF (.NOT. CONT) KMAX=0
C
C GET WEIGHT INTO WT:
      IF (JPHASE .EQ. 1) CALL WGHTLS(2,ARGI)
C COLLECT LARGEST:
** NOT YET USED & NOT YET IN COMMON
      YMAX=AMAX1(YMAX,OBS)
C WRITE OUT TO SCRATCH DATASET, UNFORMATTED, FOR REINPUT EVERY CYCLE:
      IF (JPHASE .EQ. 1) NOBS=NOBS+1
      KMI(JPHASE)=KMIN
      KMA(JPHASE)=KMAX
      WRITE (IUNI) ARGI,OBS,DOBS,WT,ICODE,(KMI(J),
     & KMA(J),J=1,NPHASE)
C
      ZARGI(NOBS)=ARGI
      ZOBS(NOBS)=OBS
      ZDOBS(NOBS)=DOBS
      ZWT(NOBS)=WT
      ICODEZ(NOBS)=ICODE
      NPTS=NOBS
C
      RETURN
      END
C
C
C
C
C LEVEL 1      LOGICAL FUNCTION DFLTD2(IFAM,IGEN,ISPC)
      LOGICAL FUNCTION DFLTD2(IFAM,IGEN,ISPC)
C
C *** DFLTD2 moved by JCM to PR section 23 March 92 ***
C
CX
CC 7A
CH Called as a substitute for DEFALT out of VARMAK in main program CELLSQ
CA On entry IFAM, ISPC, IGEN give family, genus, species of parameter
CA On exit LOGICAL DFLTD2 is TRUE if the parameter is to be varied, or
CA                           FALSE if to be fixed.
C
C ONLY VARY CELL BY DEFAULT:
C TO KEEP COMPILERS HAPPY:
      I=IFAM
      DFLTD2=(IGEN .EQ. 1 .AND. ISPC .LE. 6)
      RETURN
      END
C
C
C
C
C LEVEL 1      LOGICAL FUNCTION DFLTPR(IFAM,IGEN,ISPC)
      LOGICAL FUNCTION DFLTPR(IFAM,IGEN,ISPC)
C
C *** DFLTPR updated by JCM 17 Apr 89 ***
C
CH Gives default setting of fix/vary for parameters of PR LSQ (CN, LX, TOF . .)
CA IFAM,IGEN,ISPC on entry specify parameter
CA DFLTPR on exit is TRUE if the parameter is by default varied, FALSE fixed
CD Called as substitute for DEFALT out of VARMAK
C
      COMMON /ANISO/ATF(6,50),KATF(6,50),IAPT(150),
     & IATYP(50),KOM1
      COMMON /MAGDAT/NMAG,MAGAT(150),JMAGAT(10),NMFORM(10),
     & ANGM(4,10),KANGM(4,10),SMOD(2,10),
     & KSMOD(2,10),PHIH(4,10),KPHIH(4,10),
     & LPHI(4,10),NPHI(10),TPTAB(25,10),
     & IPTAB(25,10),SPIND(3,3,2,10),KOM19
C
      DFLTPR=.TRUE.
C VARY ANYTHING GIVEN IN FAMILIES 1, 3  AND 4:
      GO TO (100,2,100,100,100,100) , IFAM
      GO TO 100
C
C IN FAMILY 2 MOSTLY VARY, BUT FIX SITE:
   2  IF (ISPC .LT. 10) GO TO 100
      IF (ISPC .EQ. 11) GO TO 101
C IF VARYING ITF BY DEFAULT, CHECK THERE IS NOT ALSO ATF:
      IF (ISPC .EQ. 12) THEN
        IF (IAPT(IGEN) .EQ. 0) GO TO 100
        GO TO 101
      ENDIF
      IF (ISPC .GT. 12) THEN
        IF (MAGAT(IGEN) .NE. 0) GO TO 100
      ENDIF
C
C FIX:
 101  DFLTPR=.FALSE.
 100  RETURN
      END
C
C
C
C
C LEVEL 5      SUBROUTINE EIGEN(ALSQ,MATSZ)
      SUBROUTINE EIGEN(ALSQ,MATSZ)
C
C *** EIGEN redefined by JCM 14 Jan 93 ***
C
CX
CC 19B
CH Writes eigenvalues and eigenvectors of normal matrix for CAIL
CH intensities to a file, and/or the matrix itself.
C
CA ALSQ and MATSZ specify the LSQ matrix in the usual way.
CP For a CAIL refinement, NVARF must hold information about family 4 parameters
CP On an I card read by IICD2, the integer after PREE signals:
CP      containing 1= print eigenvalues, send both values & vectors
CP                    to binary file .EIG
CP      containing 2= as 1, but print both values & vectors.
CP      containing 100= print matrix to binary file .IHM (for Intesity Hessian
CP                    matrix.
CO Writes eigenvalues of the matrix on the printer output
CO Writes eigenvalues and eigenvectors, unformatted, to a file whose name
CO is requested intetractively, and whose default extension is .EIG
CO Writes the original matrix to a file whose name is requested interactively,
CO and whose default extension is .IHM.
C
      DIMENSION ALSQ(MATSZ)
C%
C      DIMENSION A(%BVAR%,%BVAR%),D(%BVAR%),E(%BVAR%)
      DIMENSION A(400,400),D(400),E(400)

      INCLUDE 'PARAMS.INC'
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRBLEM/NFAM,NGENPS(6,9),NSPCPS(6,9),
     & LF1SP(5),LF3SP(10,9,5),LVFST1(6,9,5),
     & LBFST1(6,9,5),NVARF(6,9,5),
     & NBARF(6,9,5),LF6SP(3,5)
      DIMENSION NGENS(6),NSPC(6)
      EQUIVALENCE (NGENS(1),NGENPS(1,1)),(NSPC(1),NSPCPS(1,1))
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END
      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SCRACH/MESSAG,NAMFIL
      CHARACTER *80 ICARD,MESSAG*100,NAMFIL*100
      EQUIVALENCE (ICARD,MESSAG)
C
C OUT IF LIST NOT WANTED:
       IF (SIMUL .OR. .NOT. CAIL .OR. IPRNT(6) .EQ. 0) GO TO 100
C
      I1=IPRNT(6)/100
      I2=IPRNT(6)-I1*100
C
C SET UP MATRIX FROM INVERSE LSQ MATRIX:
C NUMBER OF BASIC VARIABLES IN FAMILY 4:
*** ??? SUSPECT NEED FOR CYCLE OVER PHASES:
      N=NBARF(4,JPHASE,1)
      L=LBFST1(4,JPHASE,1)
      DO 5 I=1,N
      DO 6 J=I,N
      A(I,J)=ELEMAT(ALSQ,MATSZ,I+L,J+L)
      A(J,I)=A(I,J)
   6  CONTINUE
   5  CONTINUE
C
C PRINT MATRIX IF REQUIRED:
      IF (I1 .NE. 0) THEN
        MESSAG='intensity Hessian matrix'
        NAMFIL='.IHM'
        IHM=NOPFIL(1112)
        DO 9 I=1,N
        WRITE (IHM) (A(L,I),L=1,N)
   9    CONTINUE
      ENDIF
      IF (I2 .NE. 0) THEN
        MESSAG='eigenvalues & vectors'
        NAMFIL='.EIG'
        MAT=NOPFIL(1112)
C HOUSEHOLDER:
C%
C        CALL TRED2(A,N,%BVAR%,D,E,.TRUE.)
        CALL TRED2(A,N,400,D,E,.TRUE.)
C QL:
C%
C        CALL TQLI(D,E,N,%BVAR%,A,.TRUE.)
        CALL TQLI(D,E,N,400,A,.TRUE.)
C
C PRINT EIGENVALUES:
        CALL MESS(LPT,2,
     &  'Eigenvalues of normal LSQ matrix relating to INTS:')
        DO 1 I=1,N
        IF (I2 .EQ. 1) WRITE (LPT,2001) D(I)
2001    FORMAT (1X,G12.3)
        IF (I2 .EQ. 2) WRITE (LPT,2002) D(I),(A(L,I),L=1,N)
2002    FORMAT (/1X,G12.3/(1X,7G11.3))
C AND UNFORMATTED TO UNIT MAT:
        WRITE (MAT) D(I),(A(L,I),L=1,N)
   1    CONTINUE
      ENDIF
C
 100  RETURN
      END
C
C
C
C
C LEVEL 3      SUBROUTINE EXCLIN
      SUBROUTINE EXCLIN
C
C *** EXCLIN by JCM 18 Jun 85 ***
C
C INTRPETS ONE L EXCL CARD
C
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /EXCREG/NEXCL(5),EXCLUD(40,5)
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
      IPT=7
      N=NEXCL(KSOURC)+1
C READ PAIRS OF NUMBERS TILL END OF CARD:
   1  CALL RDREAL(EXCLUD(NEXCL(KSOURC)+1,KSOURC),IPT,IPT,80,IER)
      IF (IER .EQ. 100) GO TO 101
C
C CHECK NOT TOO MANY:
      IER=IERR
C%
C      CALL ERRCHK(1,NEXCL(KSOURC),%EXCL%,1,'excluded regions')
      CALL ERRCHK(1,NEXCL(KSOURC),40,1,'excluded regions')
      IF (IER .NE. IERR) GO TO 100
C
      CALL RDREAL(EXCLUD(NEXCL(KSOURC)+2,KSOURC),IPT,IPT,80,IER)
      NEXCL(KSOURC)=NEXCL(KSOURC)+2
      IF (NEXCL(KSOURC).EQ.2) GO TO 1
      IF (EXCLUD(NEXCL(KSOURC)-1,KSOURC) .LT. EXCLUD(NEXCL(KSOURC)-2,
     & KSOURC)) GO TO 3
      IF (EXCLUD(NEXCL(KSOURC),KSOURC) .GT. EXCLUD(NEXCL(KSOURC)-1,
     & KSOURC)) GO TO 1
   3  WRITE (LPT,3000) EXCLUD(NEXCL(KSOURC),KSOURC),EXCLUD(NEXCL(KSOURC)
     & -1,KSOURC)
      WRITE (ITO,3000) EXCLUD(NEXCL(KSOURC),KSOURC),EXCLUD(NEXCL(KSOURC)
     & -1,KSOURC)
3000  FORMAT (/' ERROR ** boundaries for excluded regions',
     & 'not in strictly ascending order'/' Pair',F12.2,' and',F12.2)
      IERR=IERR+1
      GO TO 100
C
 101  WRITE (LPT,2000) (EXCLUD(I,KSOURC),I=N,NEXCL(KSOURC))
2000  FORMAT(/' Exclude '/(1X,F12.2,' TO',F12.2/))
 100  RETURN
      END
C
C
C
C
C LEVEL 8      SUBROUTINE EXCRPR(N)
      SUBROUTINE EXCRPR(N)
C
C *** EXCRPR by JCM 9 May 88 ***
C
CH Multiple entry routine to deal with all aspects of extinction corrections
CH  for profile refinement
C
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /CELPAR/CELL(3,3,2),V(2),ORTH(3,3,2),CPARS(6,2),KCPARS(6),
     & CELESD(6,6,2),CELLSD(6,6),KOM4
      COMMON /DGEOM/IGEOM,UM(9),NLR,ANGLIN(3),ALAMBD(5,5),
     & NLAMB,ILAMB
      EQUIVALENCE (WLGTH,ALAMBD(1,1))
      COMMON /FCAL/FC,FCMOD,COSAL,SINAL,FCDERS(300),DERIVT(300)
      COMPLEX FC,DERIVT
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PREXTN/NEXTYP,EXTPR,KEXTPR,EXTCO,DEREXQ,DXDFQ
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
C
      GO TO (1,2,3,4,5,6) , N
C
C GIVEN AN 'L EXTN' CARD IN COMM0N /SCRACH/, READ REST OF IT:
   1  CALL RDINTG(NEXTYP,7,IPT,80,IER)
C DO NOT LOOK FURTHER AT NEXTYP YET AS 1 IS ASSUMED
      IF (TOF) THEN
        WRITE (LPT,2000) NEXTYP
2000    FORMAT (/' Type ',I2,' extinction correction -- simple Bragg',
     &  ' model'/'      (ref. Sabine, Aust. J. Phys. 1985,38,507.) ')
      ENDIF
      CALL RDREAL (EXTPR,IPT,IPT,80,IER)
      WRITE (LPT,2005) EXTPR
2005  FORMAT (/' Extinction correction parameter =',F10.4,' microns ')
      IF (EXTPR .EQ. 0.) GO TO 10
      GO TO 100
C
C FORM EXTINCTION CORRECTION WHICH WILL BE P3 IN CALxx, AND DERIVATIVE:
   2  IF (EXTPR .EQ. 0.) GO TO 10
C ONLY FOR TOF AT PRESENT:
      IF (.NOT. TOF) GO TO 10
      UCOF=0.75*WLGTH*V(2)
      UTEM=UCOF*FCMOD
      UALP=UCOF*EXTPR
      UEXT=UTEM*EXTPR
      EXTCO=1./(1.+UEXT*UEXT)
      DEREXQ=-EXTCO*UTEM*UEXT
      DXDFQ=-EXTCO*UALP*UEXT
      EXTCO= SQRT(EXTCO)
      GO TO 100
C
C APPLY SHIFT IN COEFFICIENT:
   3  CALL ADJUST(EXTPR)
      GO TO 100
C
C WRITE OUT NEW 'L EXTN' CARD FOR TOF:
   4  WRITE (NEWIN,2001) NEXTYP,EXTPR
2001  FORMAT ('L EXTN',2X,I2,1X,F10.4)
      GO TO 100
C
C
C DEAL WITH ABSENCE OF 'L EXTN' CARD:
   5  CALL MESS(LPT,1,
     & 'No L EXTN card - assuming no extinction correction')
      NEXTYP=0
      EXTPR=0.
  10  EXTCO=1.0
      DEREXQ=0.
      DXDFQ=0.
      GO TO 100
C
C FIX EXT COR IF NO CARD GIVEN:
   6  IF (NEXTYP .EQ. 0) CALL ADDFX5(1,1,8,1,1,4)
      GO TO 100
C
C
      ENTRY EXCPR8(NV)
C RECORD THAT THE EXTN CORRECTION PARAMETER IS VARIABLE NUMBER NV:
      KEXTPR=NV
      GO TO 100
C
C
      ENTRY EXCPR9
C RECORD THAT THE EXTN CORRECTION PARAMETER IS FIXED:
      KEXTPR=0
C
 100  RETURN
      END
C
C
C
C
C LEVEL 9      SUBROUTINE FAM4PR(N,PCXX,PFXX)
      SUBROUTINE FAM4PR(N,PCXX,PFXX)
C
C *** FAM4PR updated by PJB 1 Feb 1994 ***
C
CC 19B
CH Multiple entry subroutine for CAIL, SAPS operations
C

      INCLUDE 'PARAMS.INC'
      EXTERNAL PCXX,PFXX
      DIMENSION KK1(2),AM(2),BM(2),IH(3),SUMPKN(5)
      LOGICAL TOOWEE
      REAL ARTEM(6)
C%
C      DIMENSION ISTRIK(%REFS%),ISLAK(%REFS%),ARCLUM(%REFS%),
      DIMENSION ISTRIK(ITMREF),ISLAK(ITMREF),ARCLUM(ITMREF),
C%
C     1ICLUMP(%REFS%),CLUMUL(%REFS%),TOOWEE(%REFS%)
     1ICLUMP(ITMREF),CLUMUL(ITMREF),TOOWEE(ITMREF)
** CAN WE USE /SCRAT/ FOR THAT LOT ?? **
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /DGEOM/IGEOM,UM(9),NLR,ANGLIN(3),ALAMBD(5,5),
     & NLAMB,ILAMB
      EQUIVALENCE (WLGTH,ALAMBD(1,1))
      COMMON /F4PARS/NGEN4(9,5),F4VAL(3,MF4PAR),
     & F4PAR(3,MF4PAR),KF4PAR(3,MF4PAR),F4PESD(3,MF4PAR),KOM6
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PAWLPR/AKLO,AKHI,SLACK,STRKT,STRTOL,SLKTOL,ITST,
     & ISPSLK(2,1000),IGSLAK(1000),AMSLAK(2,1000),WTSLAK(1000),
     & WEELEV,KOM16
      LOGICAL STRKT
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /POINTS/LVRBS(500),LVRPR(500),LBSVR(400),LRDVR(300)
      COMMON /PRBLEM/NFAM,NGENPS(6,9),NSPCPS(6,9),
     & LF1SP(5),LF3SP(10,9,5),LVFST1(6,9,5),
     & LBFST1(6,9,5),NVARF(6,9,5),
     & NBARF(6,9,5),LF6SP(3,5)
      DIMENSION NGENS(6),NSPC(6)
      EQUIVALENCE (NGENS(1),NGENPS(1,1)),(NSPC(1),NSPCPS(1,1))
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
      COMMON /SLAKDA/NSLAK(4),SLKSWD(4),SLAKWT(4),
     & CHISQD(4),ISLKTP,NSKTOT,KOM24
      CHARACTER*10 CONTYP(5)
      DATA CONTYP/' ',' STRICT * ','SLACK TO *',' FIXED *',
     & ' STRICT - '/
C
      GO TO (10,20,30,100,50) , N
C
C ENTRY FROM INPLPR TO READ LIMITS FROM L SLIM CARD:
  10  CALL RDREAL(STRTOL,7,IPT,80,IER)
      CALL RDREAL(SLKTOL,IPT,IPT,80,IER)
      IF (SAPS .OR. APES) THEN
        CALL RDREAL(WEELEV,IPT,IPT,80,IER)
        WRITE (LPT,2029) WEELEV
2029    FORMAT (/' Intensity/ESD slack constraint criterion = ',F10.3)
      ENDIF
      WRITE (LPT,2019) STRTOL,SLKTOL
2019  FORMAT (/' Limit for strict constraints=',F10.3/
     & '        for slack constraints=',F10.3)
      GO TO 100
C
C ENTRY FROM MAIN PROGRAMS TO DETERMINE CONSTRAINTS EACH CYCLE:
  20  IF (PRECYC) GO TO 100
      CALL JGMZER(ISTRIK,1,MAXKK(JPHASE))
      CALL JGMZER(ISLAK,1,MAXKK(JPHASE))
      NSPCPS(4,JPHASE)=MAXKK(JPHASE)
C REMOVE ALL CONSTRAINTS ON FAMILY 4 PARS - THIS WILL TAKE OUT ANY
C THE USER GAVE ON CARDS ALSO:
C ^^^^^ HOWEVER, WE MUST BE ABLE TO ALLOW USER TO FIX AND RELATE PARAMETERS
C ^^^^^ AND KEEP THEM SO.
      KK1(1)=KPAK(4,0,0,0,0)
      CALL SUBCON(2,KK1,AM,4)
      NSLAK(3)=0
      ITST=0
C
      AM(1)=1.
      AM(2)=-1.
C
C SCAN FIRST FOR STRICT:
      KNOW=1
C ^^^^^ NOTE CHANGE OF LABEL 2
      CALL CELDER(REFH(1,KNOW),ARTEM)
      DSTAR(KNOW)=SQRT(DSTAR2)
      CALL PCXX(5)
   2  AKLO=ARGK
      KNOW=KNOW+1
      IF (KNOW .GT. MAXKK(JPHASE)) GO TO 1
      CALL CELDER(REFH(1,KNOW),ARTEM)
      DSTAR(KNOW)=SQRT(DSTAR2)
      CALL PCXX(5)
      AKHI=ARGK
C PFXX(6) GIVES SEPARATION OF ADJACENT REFLECTION POSITIONS,
C AND FLAGS AS STRICT OR SLACK ACCORDING TO STRTOL OR SLKTOL
      CALL PFXX(6)
      IF ( STRKT) THEN
        ITST=ITST+1
        ISTRIK(KNOW-1)=1
C RELATE PARAMETER KNOW-1 AND PARAMETER KNOW:
        IGST=1
        IF (SAPS) IGST=2
        DO 35 IG=IGST,NGENPS(4,JPHASE)
        KK1(1)=KPAK(4,IG,KNOW-1,JPHASE,1)
        KK1(2)=KPAK(4,IG,KNOW,JPHASE,1)
        CALL ADDCON(2,KK1,AM,4)
  35    CONTINUE
      ENDIF
      GO TO 2
C
C SCAN AGAIN FOR SLACK:
   1  K=1
      AM(2)=1.
C K IS THE FIRST OF A POTENTIAL CLUMP:
      NCLUMP=0
   3  KNOW=K
      ISLAK(K)=0
      CALL PCXX(5)
      SUMMUL=AMUL(K)
      SUMMAR=SUMMUL*ARGK
C SUM INTENSITIES BUT ALSO ESDs.
      SUMMIN=SUMMUL*F4PAR(1,K)
      SUMESD=SUMMUL*F4PESD(1,K)
      IF (SAPS .OR. APES) THEN
        DO 24 IG=2,NGENPS(4,JPHASE)
        SUMPKN(IG)=F4PAR(IG,K)*SUMMUL
  24    CONTINUE
      ENDIF
C K IS THE BASE FROM WHICH WE TEST (POSSIBLY) SEVERAL ADJACENT:
C K1 RECORDS THE "PREVIOUS" NON-FIXED K:
      K1=K
      DO 5 L=K+1,MAXKK(JPHASE)
C IF ALREADY FIXED, IGNORE:
      IF (ISTRIK(L) .EQ. 2) GO TO 5
C COLLECT A CLUMP OF ALL REFLECTIONS STRICTLY CONSTRAINED TO THE BASE K:
      IF (ISTRIK(K1) .NE. 1) GO TO 11
C CURRENT REFLECTION IS STRICTLY CONSTRAINED TO PREVIOUS (NON-FIXED) ONE:
      SUMMUL=SUMMUL+AMUL(L)
      KNOW=L
      CALL PCXX(5)
      SUMMAR=SUMMAR+AMUL(L)*ARGK
      DELTIN=AMUL(L)*F4PAR(1,L)
      SUMMIN=SUMMIN+DELTIN
      SUMESD=SUMESD+AMUL(L)*F4PESD(1,L)
      IF (SAPS .OR. APES) THEN
        DO 25 IG=2,NGENPS(4,JPHASE)
        SUMPKN(IG)=SUMPKN(IG)+AMUL(L)*F4PAR(IG,L)
  25    CONTINUE
      ENDIF
      K1=L
   5  CONTINUE
      L=MAXKK(JPHASE)+1
C
C END OF CLUMP:
  11  NCLUMP=NCLUMP+1
      ICLUMP(NCLUMP)=K
      ICLUMP(NCLUMP+1)=L
      ARCLUM(NCLUMP)=SUMMAR/SUMMUL
      CLUMUL(NCLUMP)=SUMMUL
C NOW FORCE ALL INTS IN CLUMP TO BE THE MEAN VALUE:
      FAV=SUMMIN/SUMMUL
      DO 12 I=K,L-1
      F4PAR(1,I)=FAV
  12  CONTINUE
      IF (SAPS .OR. APES) THEN
C CHECK IF THE INTENSITY OF THIS CLUMP IS TOO SMALL -
C THIS IS ONLY NEEDED FOR SAPS OR APES.
        TOOWEE(NCLUMP)= SUMMIN/SUMESD .LT. WEELEV
        DO 26 I=K,L-1
        DO 27 IG=2,NGENPS(4,JPHASE)
        IF (TOOWEE(NCLUMP)) CALL ADDFX5(4,IG,I,JPHASE,1,4)
        F4PAR(IG,I)=SUMPKN(IG)/SUMMUL
  27    CONTINUE
  26    CONTINUE
      ENDIF
C
C DETECT SLACK CONSTRAINT BETWEEN THIS CLUMP AND ANY PREVIOUS:
      AKHI=ARCLUM(NCLUMP)
      KK1(1)=ICLUMP(NCLUMP)
      BM(1)=CLUMUL(NCLUMP)
      DO 13 I=NCLUMP-1,1,-1
      AKLO=ARCLUM(I)
      CALL PFXX(6)
C IF THIS IS NOT SLACK, NONE FURTHER WILL BE:
      IF (SLACK .EQ. 0.) GO TO 33
C A SLACK CONSTRAINT:
      KK1(2)=ICLUMP(I)
C
C TAKE ACTION ON SLACK CONSTRAINTS FOR INTENSITIES IF CAIL OR APES
      IF (CAIL .OR. APES) THEN
        ISLAK(K)=ISLAK(K)+1
C EVALUATE WEIGHT AND THEN INCLUDE THE EXTRA WEIGHTING:
        WEIGHT=3./(F4PAR(1,ICLUMP(NCLUMP))+F4PAR(1,ICLUMP(I)))**2
        WEIGHT=WEIGHT*SLACK
        BM(2)=CLUMUL(I)
        CALL ADDPAW(3,1,KK1,BM,WEIGHT)
      ENDIF
C
C TAKE ACTION ON SLACK CONSTRAINTS FOR PEAK WIDTHS FOR SAPS AND APES ONLY
C IF INTENSITIES OF EITHER CLUMP ARE NOT TOO SMALL.
      IF (SAPS .OR. APES) THEN
        IF (TOOWEE(I) .OR. TOOWEE(NCLUMP)) GO TO 13
        DO 29 IG=2,NGENPS(4,JPHASE)
        ISLAK(K)=ISLAK(K)+1
C ^^^^^ THE FOLLOWING WEIGHTING IS RATHER RANDOM AT PRESENT
        WEIGHT=400./(F4PAR(IG,ICLUMP(NCLUMP))+F4PAR(IG,ICLUMP(I)))**2
        WEIGHT=WEIGHT*SLACK
        CALL ADDPAW(3,IG,KK1,AM,WEIGHT)
  29    CONTINUE
      ENDIF
  13  CONTINUE
C NO MORE SLACK CONSTRAINTS START FROM CURRENT CLUMP:
  33  K=L
      IF (K .LE. MAXKK(JPHASE)) GO TO 3
C
C FINALLY A PRINTING CYCLE:
C ^^^^^ ALL THIS PRINTING NEEDS TIDYING UP
   4  WRITE (LPT,2000) ICYC
2000  FORMAT(// ' Processing reflections on cycle ',I4)
      IF (FIXED .AND. CAIL) CALL MESS(LPT,1,
     & ' No.  h    k    l  INTENSITY     Posn         Flags ')
      IF (FIXED .AND. .NOT.CAIL) CALL MESS(LPT,1,
     & ' No.  h    k    l  INTENSITY     Posn    SIGS     Flags ')
      IF (.NOT. FIXED .AND. CAIL) CALL MESS(LPT,1,
     & ' No.   h       k       l     INTENSITY     Posn         Flags ')
      IF (.NOT. FIXED .AND. .NOT.CAIL) CALL MESS(LPT,1,
     & ' No.   h       k       l     INTENSITY     Posn    SIGS'//
     &'     Flags ')
C ^^^^^ WE CAN WRITE THE ABOVE LINE WITH SIGS / GAMS ETC.
C ^^^^^ USING DYNAMIC FORMATTING - SEE SUBROUTINE HKLOUT.
C
C ^^^^^ THE FOLLOWING DO LOOP NEEDS COMPLETELY REVAMPED
      DO 40 KNOW=1,MAXKK(JPHASE)
      NTYP1=1
      NTYP2=1
      CALL PCXX(5)
      IF (FIXED) CALL INDFIX(REFH(1,KNOW),IH)
      IF (ISTRIK(KNOW) .EQ. 1) NTYP1=2
      IF (KNOW.GT.1 .AND. ISTRIK(KNOW-1).EQ.1 .AND. ISTRIK(KNOW)
     & .NE. 1) NTYP1=5
C ^^^^^ BE CAREFUL OF THE NEXT LINE
      IF (ISTRIK(KNOW) .EQ. 2) NTYP1=4
      IF (ISLAK(KNOW) .NE. 0) NTYP2=3
C
      IF (CAIL) THEN
        IF (NTYP2 .EQ. 3) THEN
          IF (FIXED) THEN
            WRITE(LPT,2001) KNOW,IH,F4PAR(1,KNOW),ARGK,CONTYP(NTYP1),
     &      CONTYP(NTYP2),ISLAK(KNOW)
          ELSE
            WRITE(LPT,2003) KNOW,(REFH(I,KNOW),I=1,3),F4PAR(1,KNOW),
     &      ARGK,CONTYP(NTYP1),CONTYP(NTYP2),ISLAK(KNOW)
          ENDIF
        ELSE
          IF (FIXED) THEN
            WRITE(LPT,2001) KNOW,IH,F4PAR(1,KNOW),ARGK,CONTYP(NTYP1)
2001      FORMAT (1X,I3,3I5,F12.3,1X,F12.3,2A10,I4)
2003      FORMAT (1X,I3,3F8.3,F12.3,1X,F12.3,2A10,I4)
          ELSE
            WRITE(LPT,2003) KNOW,(REFH(I,KNOW),I=1,3),F4PAR(1,KNOW),
     &      ARGK,CONTYP(NTYP1)
          ENDIF
        ENDIF
      ENDIF
      IF (.NOT.CAIL) THEN
        IF (NTYP2 .EQ. 3) THEN
          IF (NGENPS(4,JPHASE).EQ.2) THEN
            IF (FIXED) THEN
              WRITE (LPT,2002) KNOW,IH,F4PAR(1,KNOW),ARGK,
     &        F4PAR(2,KNOW),
     &        CONTYP(NTYP1),CONTYP(NTYP2),ISLAK(KNOW)
            ELSE
              WRITE (LPT,2004) KNOW,(REFH(I,KNOW),I=1,3),
     &        F4PAR(1,KNOW),ARGK,F4PAR(2,KNOW),
     &        CONTYP(NTYP1),CONTYP(NTYP2),ISLAK(KNOW)
            ENDIF
2002        FORMAT (1X,I3,3I5,F10.3,1X,F12.3,1X,F10.3,2A12,I4)
2004        FORMAT (1X,I3,3F8.3,F10.3,1X,F12.3,1X,F10.3,2A12,I4)
          ELSE IF (NGENPS(4,JPHASE).EQ.3) THEN
            IF (FIXED) THEN
              WRITE (LPT,2202) KNOW,IH,F4PAR(1,KNOW),ARGK,
     &        (F4PAR(IG,KNOW),IG=2,3),
     &        CONTYP(NTYP1),CONTYP(NTYP2),ISLAK(KNOW)
            ELSE
              WRITE (LPT,2204) KNOW,(REFH(I,KNOW),I=1,3),
     &        F4PAR(1,KNOW),ARGK,(F4PAR(IG,KNOW),IG=2,3),
     &        CONTYP(NTYP1),CONTYP(NTYP2),ISLAK(KNOW)
            ENDIF
2202        FORMAT (1X,I3,3I5,F10.3,1X,F12.3,2(1X,F10.3),2A12,I4)
2204        FORMAT (1X,I3,3F8.3,F10.3,1X,F12.3,2(1X,F10.3),2A12,I4)
          ENDIF
        ELSE
          IF (NGENPS(4,JPHASE).EQ.2) THEN
            IF (FIXED) THEN
              WRITE (LPT,2002) KNOW,IH,F4PAR(1,KNOW),ARGK,F4PAR(2,KNOW),
     &        CONTYP(NTYP1)
            ELSE
              WRITE (LPT,2004) KNOW,(REFH(I,KNOW),I=1,3),
     &        F4PAR(1,KNOW),ARGK,F4PAR(2,KNOW),CONTYP(NTYP1)
            ENDIF
          ELSE IF (NGENPS(4,JPHASE).EQ.3) THEN
            IF (FIXED) THEN
              WRITE (LPT,2202) KNOW,IH,F4PAR(1,KNOW),ARGK,
     &        (F4PAR(IG,KNOW),IG=2,3),CONTYP(NTYP1)
            ELSE
              WRITE (LPT,2204) KNOW,(REFH(I,KNOW),I=1,3),
     &        F4PAR(1,KNOW),ARGK,
     &        (F4PAR(IG,KNOW),IG=2,3),CONTYP(NTYP1)
            ENDIF
          ENDIF
        ENDIF
      ENDIF
  40  CONTINUE
C
      WRITE( LPT,2008) MAXKK(JPHASE),ITST,NSLAK(3),MAXKK(JPHASE)-ITST
2008  FORMAT( //,' Total of ',I5,' reflections ',/
     &           '          ',I5,' strict constraints ',/
     &           '          ',I5,' slack constraints ',//
     &           '  making  ',I5,' possible variable intensities '/)
      GO TO 100
C
C ENTRY FROM NWINPR TO APPLY SHIFT:
  30  IF (IGEN .EQ. 2) THEN
        CALL ADF4G2(F4PAR(IGEN,ISPC))
      ELSE
        CALL ADJUST(F4PAR(IGEN,ISPC))
      ENDIF
      F4PESD(IGEN,ISPC)=ESD
      GO TO 100
C
C ENTRY FROM SETPR TO SET UP DEFAULTS:
  50  STRTOL=2.0
      SLKTOL=1.
      WEELEV=3.
      WRITE (LPT,2018) STRTOL,SLKTOL,WEELEV
2018  FORMAT (/' No L SLIM card read -'/
     &' Limit for strict constraints=',F10.3/
     &'        for slack constraints=',F10.3/
     &'        for intensity/ESDs   =',F10.3)
      GO TO 100
C
C
      ENTRY FM4PR8(NG,NS,NV)
C SET PARAMETER TO BE VARIABLE NV:
      KF4PAR(NG,NS)=NV
      GO TO 100
C
C
      ENTRY FM4PR9
C CLEAR ALL FAMILY 4 PARAMETERS TO BE FIXED (EVEN IF NONE INVOLVED):
      DO 9 I=1,3
C%
C      DO 9 J=1,%REFS%
      DO 9 J=1,ITMREF
   9  KF4PAR(I,J)=0
      GO TO 100
C
 100  RETURN
      END
C
C
C
C LEVEL 1      SUBROUTINE FRENEL(Z,FRCOS,FRSIN)
      SUBROUTINE FRENEL(Z,FRCOS,FRSIN)
C
C *** FRENEL by WIFD 23 Feb 93 ***
C
CX
CC 9C
CH Calculates ?
CA On entry Z holds the argument
CA On exit FRCOS, FRSIN hold ?
C
      COMMON /CONSTA/PI,RAD,DEG,TWOPI,FOURPI,PIBY2,ALOG2,SQL2X8,VALMUB
C
      FZ= (1.+Z*0.926)/(2.+Z*(1.792+Z*3.104))
      GZ= 1./(2.+Z*(4.142+Z*(3.492+Z*6.670)))
C
      ARG=PIBY2*Z*Z
      SINARG=SIN(ARG)
      COSARG=COS(ARG)
      FRCOS=0.5+FZ*SINARG-GZ*COSARG
      FRSIN=0.5-FZ*COSARG-GZ*SINARG
C
      RETURN
      END
C
C
C
C
C LEVEL 5      SUBROUTINE HKLOUT(PCXX,ALSQ,MATSZ)
      SUBROUTINE HKLOUT(PCXX,ALSQ,MATSZ)
C
C *** HKLOUT updated by PJB 1 Feb 1994 ***
C
CH Writes h,k,l list, possibly plus other info, to unit LKH
CP On entry, reflection indices must be in REFH in /REFLNS/
CP IREF, various LOGICALS in /REFIPR give type of refinement -
CP in particular RIET, CAIL, SAPS, APES . .
C
      EXTERNAL PCXX


      INCLUDE 'PARAMS.INC'
      DIMENSION ALSQ(MATSZ)
C%
C      DIMENSION IH(3),ADIAG(%BVAR%),ICOV(30)
      DIMENSION IH(3),ADIAG(400),ICOV(30)
      CHARACTER *80 FMT1,FMT2
C
      PARAMETER (IREFSM=2000)
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
C
      COMMON /HCVCMN/ LCV,ICORL(15,IREFSM),ICLUMP(IREFSM)
C
      COMMON /DERBAS/DERIVB(400),LVARB
      COMMON /F4PARS/NGEN4(9,5),F4VAL(3,MF4PAR),
     & F4PAR(3,MF4PAR),KF4PAR(3,MF4PAR),F4PESD(3,MF4PAR),KOM6
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END

      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /POINTS/LVRBS(500),LVRPR(500),LBSVR(400),LRDVR(300)
      COMMON /PRBLEM/NFAM,NGENPS(6,9),NSPCPS(6,9),
     & LF1SP(5),LF3SP(10,9,5),LVFST1(6,9,5),
     & LBFST1(6,9,5),NVARF(6,9,5),
     & NBARF(6,9,5),LF6SP(3,5)
      DIMENSION NGENS(6),NSPC(6)
      EQUIVALENCE (NGENS(1),NGENPS(1,1)),(NSPC(1),NSPCPS(1,1))
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
      COMMON /SCRACH/MESSAG,NAMFIL
      CHARACTER *80 ICARD,MESSAG*100,NAMFIL*100
      EQUIVALENCE (ICARD,MESSAG)
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
      COMMON /POSCMN/POSREF(MPSCMN)
C
C
      DATA FMT1/'(3I5  ,F10.3,F10.4,I5,30I4)'/
      DATA FMT2/'(3I5  ,3(F10.3,F10.4))'/
C
C
C OUT IF LIST NOT WANTED:
      IF (SIMUL) GO TO 999
      IF (IABS(MODERR(JSOURC)).NE.2 .AND. RIET) GO TO 999
      MESSAG='HKL listing'
      NAMFIL='.HKL'
      CALL OPNFIL(LKH,113)
      IF (CAIL) THEN
        MESSAG='HCV listing'
        NAMFIL='.HCV'
        lcv=72
        CALL OPNFIL(LCV,113)
      END IF
      MESSAG='reflection positions file'
      NAMFIL='.TIC'
      ITK=73
      CALL OPNFIL(ITK,113)
C IF CAIL, GET DIAGONAL LSQ MATRIX INVERSE ELEMEMTS:
      IF (CAIL) THEN
        DO 88 I=1,LVARB
  88    ADIAG(I)=SQRT(ELEMAT(ALSQ,MATSZ,I,I))
      ENDIF
C IF LX, ALTER FORMATS:
      IF (LX) THEN
        FMT1(10:10)='5'
        FMT1(16:16)='5'
        FMT2(12:12)='5'
        FMT2(18:18)='5'
      ENDIF
C FLOATING FORMATS
      IF (.NOT. FIXED) THEN
        FMT1(3:6)='F8.3'
        FMT2(3:6)='F8.3'
      ENDIF
      DO 5 I=1,MAXKK(JPHASE)
      IF (FIXED) CALL INDFIX(REFH(1,I),IH)
      KNOW=I
      CALL PCXX(2)
      IF (ARGK.LT.180.0) THEN
        WRITE(ITK,1700) (IH(II),II=1,3),ARGK,DSTAR(I)
 1700   FORMAT(3I4,F12.5,F10.6)
      ELSE
        WRITE(ITK,1710) (IH(II),II=1,3),ARGK,DSTAR(I)
 1710   FORMAT(3I4,F12.3,F10.6)
      END IF
      IF (RIET) THEN
        IF (FIXED) THEN
          WRITE (LKH,FMT2) IH
        ELSE
          WRITE (LKH,FMT2) (REFH(J,I),J=1,3)
        ENDIF
      ENDIF
C CAIL:
      IF (CAIL) THEN
        IF (IPRNT(5) .EQ. 0) THEN
          IF (FIXED) THEN
            WRITE (LKH,FMT2) IH,F4PAR(1,I),
     &      F4PESD(1,I)
          ELSE
            WRITE (LKH,FMT2) (REFH(J,I),J=1,3),F4PAR(1,I),
     &      F4PESD(1,I)
          ENDIF
        ENDIF
        IF (IPRNT(5) .GT. 0) THEN
C SET NO COVARIANCES:
          CALL JGMZER(ICOV,1,30)
C WHICH VARIABLE IS THIS PARAMETER?
          K=KF4PAR(1,I)
C IF FIXED, NO COVARIANCES:
          IF (K .EQ. 0) GO TO 89
C WHICH BASIC VARIABLE (IE ROW OF LSQ MATRIX) IS THIS VARIABLE?
          I1=K
  90      K=LVRBS(I1)
C STARTING INTS MAY BE STRICTLY RELATED TO ONE PREVIOUS:
          IF (K .LT. 0) THEN
            I1=I1-1
            GO TO 90
          ENDIF
C
C IF FIRST INTS, RECORD OFFSET FOR PRINTING CLUMP NUMBER:
          IF (I .EQ. 1) KBASE=K-1
C NOW FIND THE NEXT IPRNT(5) BASICS AFTER K:
          L1=K+IPRNT(5)
          IF (L1 .GT. L4END(JPHASE)) L1=L4END(JPHASE)
          DO 91 L=K+1,L1
  91      ICOV(L-K)=NINT(100.*ELEMAT(ALSQ,MATSZ,K,L)/
     &    (ADIAG(K)*ADIAG(L)))
C  89      CIITEM=F4PESD(1,I)
  89      CIITEM=ADIAG(K)**2
          WRITE (LKH,FMT1) IH,F4PAR(1,I),adiag(K),K-KBASE,
     &    (ICOV(L),L=1,IPRNT(5))
          ICLUMP(I)=K-KBASE
          DO L=1,IPRNT(5)
            ICORL(L,I)=ICOV(L)
          END DO
        ENDIF
      ENDIF
** THIS WON'T DO - NGEN4 IS AT PRESENT IN COMMON WHICH IS SWOPPED - SORT OUT
      IF (SAPS.OR.APES) WRITE (LKH,FMT2) IH,
     & (F4PAR(IG,I),F4PESD(IG,I),IG=1,NGEN4(JPHASE,JSOURC))
   5  CONTINUE
      IF (CAIL) CALL HKL2HCV(IPRNT(5))
 100  CALL CLOFIL(LKH)
      IF (CAIL) CALL CLOFIL(LCV)
      CALL CLOFIL(ITK)
 999  RETURN
      END
C
C
C
C
C LEVEL 7      SUBROUTINE IICD2
      SUBROUTINE IICD2
C
C *** IICD2 updated by JCM 13 May 90 ***
C
      CHARACTER *4 INEED(6)
      CHARACTER *2 INEX(2)
      COMMON /GRDBCK/IBACK,NBACK(5),ARGBAK(100,5),
     & BACKGD(100,5),KBCKGD(100,5),NBK,LBKD(20),ZBAKIN
      LOGICAL ZBAKIN
      COMMON /IINFO/IIN,ACOEFF(20)
      COMMON /IINFOW/IIREAD(20)
      CHARACTER *4 IIREAD
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      DATA INEED/'PRFC','PRFO','PRPR','PRCV','PREE','ZBAK'/
      DATA INEX/'In','Ex'/
C
C FIRST READ STANDARD LSQ OPTIONS NCYC, CYC1, PRIN, MCOR:
      CALL IICD1
C
C REMAINING OPTIONS PECULIAR TO PR:
C DEFAULTS:
      IPRNT(2)=0
      IPRNT(3)=0
      IPRNT(4)=0
      IPRNT(5)=0
      IPRNT(6)=0
      DO 1 I=1,6
      DO 2 J=1,IIN
      IF (INEED(I) .EQ. IIREAD(J)) GO TO 3
   2  CONTINUE
      GO TO 1
C
   3  IF (I .EQ. 6) THEN
        ZBAKIN=ACOEFF(J) .EQ. 1.
      ELSE
        IPRNT(I+1)=NINT(ACOEFF(J))
      ENDIF
   1  CONTINUE
C
      IF (IPRNT(2) .NE. 0) THEN
        CALL MESS(LPT,1,'Reflection information to be printed ')
        CALL DEPRIN(IPRNT(2))
      ENDIF
      IF (IPRNT(3) .NE. 0) THEN
        CALL MESS(LPT,1,'Reflections to be output to file for Fourier')
        CALL DEPRIN(IPRNT(3))
      ENDIF
      IF (IPRNT(4) .NE. 0) THEN
        CALL MESS(LPT,1,'Profile including zeros to be output to file')
        CALL DEPRIN(IPRNT(4))
      ENDIF
      IF (IPRNT(5) .NE. 0) WRITE (LPT,2003) IPRNT(5)
2003  FORMAT (' Print',I3,' covariances between I and successive',
     & ' intensities on .HKL file')
      IF (IPRNT(6) .NE. 0) CALL MESS(LPT,1,
     & 'CAIL intensity eigenvalues and eigenvectors to be sent to'//
     & ' .EIG file')
C
      I=2
      IF (ZBAKIN) I=1
      CALL MESS(LPT,1,INEX(I)//'clude points at which Y(peak)=0'//
     & ' while collecting counts')
C
      RETURN
      END
C
C
C
C
C LEVEL 10       SUBROUTINE INOBPR(ISCR,NFLOP,PCXX,PFXX)
       SUBROUTINE INOBPR(ISCR,NFLOP,PCXX,PFXX)
C
C *** INOBPR updated BY JBF and PJB 8 Mar 1994 ***
C
CH Read PR observation data, and write to scratch dataset
C MODEOB gives type of data: 1 3 FP numbers ARGI OBS DOBS
C                            2 Binary ARGI OBS DOBS ICODE
C                            3 ILL Grenoble CN powder data format

C
      EXTERNAL PCXX,PFXX

      INCLUDE 'PARAMS.INC'
      LOGICAL ENDIP
      DIMENSION INOBS(10),NN(10),ISCR(2)
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /OBSCAL/OBS,DOBS,GCALC,YCALC,DIFF,ICODE,SUMWD,NOBS,
     & IWGH(5),WTC(4),WT,SQRTWT,WDIFF,YBACK,YPEAK,YMAX,CSQTOT
      EQUIVALENCE (IWGHT,IWGH(1))
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END

      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /PRSTAT/SMYC,SMYD,SMYO,SMIO,SMID,SMWYOS,IZCT,
     & P5,IOP1,IOP2,KMI(9),KMA(9)
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
      COMMON /SCRACH/MESSAG,NAMFIL
      CHARACTER *80 ICARD,MESSAG*100,NAMFIL*100
      EQUIVALENCE (ICARD,MESSAG)
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
C MAKE SCRATCH FILE ON WHICH TO HAND OVER OBSERVATIONS TO MAIN:
      ISCR(1)=NOPFIL(1005)
C AND IF MULTI-PHASE, ANOTHER ONE FOR ALTERNATE USE:
      IF (MULFAS) ISCR(2)=NOPFIL(1005)
      NFLIP=1
      NFLOP=2
      NOBS=0
C CYCLE OVER SOURCES:
      DO 52 JSOUR=1,NSOURC
      JSOURC=JSOUR
C SET UP WHETHER TOF, CN ETC:
      CALL LOGSOU(JSOURC)
C
      IF (SIMUL .AND. .NOT. PRECYC) THEN
C INITIALISE SCRATCH FILE QUANTITIES FOR SIMULATION:
        IF (TOF) THEN
          OPDTOT=1.+ARGSTP(JSOURC)
          ARGI=ARGMIN(JSOURC)/OPDTOT
        ENDIF
        OBS=0.
        DOBS=1.
        ICODE=0
      ELSE
C
C OPEN OBSERVATIONS FILE
        MESSAG='Observations file'
        IF (JSOURC .GT. 1) MESSAG='Next obs file'
        M=11
        IF (MODEOB(JSOURC) .EQ. 2) M=1011
        CALL OPNFIL(LUNI,M)
      ENDIF
C
C COLLECT MAXIMUM OBS:
      YMAX=0.
C
C SCAN ALL PHASES:
      DO 51 JP=1,NPHASE
      JPHASE=JP
      IF (JPHASE .GT. 1) THEN
        REWIND(ISCR(NFLOP))
        REWIND(ISCR(NFLIP))
** DO WE NEED TO DUMP OUT THE EXISTING PHASE?
        CALL PHMOVE(1,JPHASE)
      ENDIF
C
C START COUNT UP CONTRIBUTING REFLECTIONS - OBSERVATIONS MUST BE IN SEQUENCE:
      KMIN=1
      KOUNT=0
** NB WE HAVE NO WAY OF SIMULATING ANYTHING BUT TF AT PRESENT
      IF (MODEOB(JSOURC) .EQ. 3) THEN
C GRENOBLE FORMAT FOR CONSTANT WAVELENGTH NEUTRON DIFFRACTOMETERS
C READ 4 LINES OF COMMENT AND IGNORE;  THEN READ IN FORMAT 10(I2,I8)
        READ (LUNI,1010) ICARD
1010    FORMAT (A80,///)
        CALL MESS(LPT,1,'Data file in Grenoble sum file format:')
        CALL MESS(LPT,1,'Title reads: ')
        CALL MESS(LPT,0,ICARD)
      ELSE IF (MODEOB(JSOURC) .EQ. 4) THEN
C THIS IS SOMETIMES USED FOR LABORATORY X-RAY DATA TOO
        DO 5 I=1,10
   5    NN(I)=1
      ENDIF
C
C GET NEXT OBSERVATION:
  10  IF (SIMUL.AND. .NOT. PRECYC) THEN
        IF (TOF) THEN
          ARGI=ARGI*OPDTOT
          IF (ARGI .GT. ARGMAX(JSOURC)) GO TO 50
        ELSE
          ARGI=ARGMIN(JSOURC)+FLOAT(KOUNT)*ARGSTP(JSOURC)
          KOUNT=KOUNT+1
        ENDIF
        GO TO 11
      ENDIF
C
C PHASES OTHER THAN FIRST:
      IF (JPHASE .GT. 1) THEN
C READ FROM THE OTHER TEMPORARY FILE - KMI & KMA ARE PARTIALLY FILLED:
        READ (ISCR(NFLOP),END=50) ARGI,OBS,DOBS,WT,ICODE,
     &  (KMI(I),KMA(I),I=1,NPHASE)
        GO TO 11
      ELSE
C BRANCH ON DIFFERENT INPUT FORMATS FOR OBSERVATIONS:
        GO TO (60,1,2,3,4) , MODEOB(JSOURC)+1
      ENDIF
C
C USER'S OWN ROUTINE SUPPLIED FOR NON-STANDARD INPUT IF REQUIRED:
  60  CALL QPRIN(ARGI,OBS,DOBS,ICODE,ENDIP)
      IF (ENDIP) GO TO 50
      GO TO 11
C
C TYPE 1: 3 FLOATING POINT NUMBERS:
   1  READ (LUNI,1001,END=50) ICARD
1001  FORMAT (A80)
      CALL RDREAL(ARGI,1,IPT,80,IER)
      CALL RDREAL(OBS,IPT,IPT,80,IER)
      CALL RDREAL(DOBS,IPT,IPT,80,IER)

      IF (IER .EQ. 100) DOBS=SQRT(OBS)
      GO TO 11
C
C MODE 2 INPUT (FOR ANY DATA SOURCE) - BINARY:
   2  READ (LUNI,END=50) ARGI,OBS,DOBS,ICODE
  11  CALL CONTRI(PCXX,PFXX,ISCR(NFLIP))
      GO TO 10
C
C MODEOB(JSOURC) = 3 IS GRENOBLE SUM FILE FORMAT (USUALLY CN):
   3  READ(LUNI,1000,END=50) (NN(I),INOBS(I),I=1,10)
1000  FORMAT (10(I2,I6))
      GO TO 19
C
C MODEB(JSOURC) = 4 (USUALLY LX):
   4  READ(LUNI,1002,END=50) (INOBS(I),I=1,10)
1002  FORMAT (10I8)
C
C PROCESS A WHOLE LINE OF 10 ENTRIES:
  19  DO 12 I=1,10
      ARGI=ARGMIN(JSOURC)+FLOAT(KOUNT)*ARGSTP(JSOURC)
      KOUNT=KOUNT+1
      IF (NN(I) .EQ. 0 .AND. MODEOB(JSOURC) .EQ. 3) GO TO 12
      OBS=FLOAT(INOBS(I))
      DOBS=SQRT(OBS/FLOAT(NN(I)))
      CALL CONTRI(PCXX,PFXX,ISCR(NFLIP))
  12  CONTINUE
      GO TO 10
C
C END OF INPUT:
  50  IF (JPHASE .EQ. 1) NSOBS(JSOURC)=NOBS
C SWITCH TEMPORARY DATASETS:
      CALL FLIP(NFLIP,NFLOP)
C END OF ONE PHASE
  51  CONTINUE
C
C END OF ONE SOURCE OF OBS:
  52  IF (.NOT. SIMUL .OR. PRECYC) CALL CLOFIL(LUNI)
C
C LEAVES NFLOP AS ONE TO READ FROM:
 100  RETURN
      END
C
C
C
C
C LEVEL 9      SUBROUTINE INPLP0(PCXX,PFXX)
      SUBROUTINE INPLP0(PCXX,PFXX)
C
C *** INPLP0 updated by JCM 28 Dec 92 ***
C
CH Reads L cards for Profile refinement, phase 0 (phase independent cards)
CD Reads most L cards, ignoring FIX, VARY, RELA, FUDG which will be read later.
C
CD If called from RDPHA0, records information off the following:
CD    SCAL   Scale factor
CD    RTYP   Mode of presentation of input reflection data
CD    WGHT   Weighting scheme (one day take this out into STLSP0 and use WGHTLS)
CD    PKCN   Peak centre parameters (which NB are being kept as one
CD           for each phase at present, just in case)
CD    ZERO   Zero point (ditto)
CD    OTYP   Mode of presentation of input observation data
CD    BACK   Background approximation - may be several cards
CD    EXCL   Excluded regions - may be several cards
CD    WVLN   Wavelengths (for constant wavelength or X-Ray)
CD    ABSC   Absorption correction coefficient
CD    EXTN   Extinction correction coefficient
CD    PROR   Preferred orientation coefficient
CD    THE2   2 theta for time of flight
CD    TTHM   Monochromator 2 theta angle (X-Ray)
C
      EXTERNAL PCXX,PFXX
      CHARACTER *2 INEX(2)
      CHARACTER *14 ARGTYP(2)
C%
C      CHARACTER *4 IWD,LTABLE(%LCRD%),LTICTB(5),LPH0TB(14)
      CHARACTER *4 IWD,LTABLE(22),LTICTB(5),LPH0TB(14)
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /DGEOM/IGEOM,UM(9),NLR,ANGLIN(3),ALAMBD(5,5),
     & NLAMB,ILAMB
      EQUIVALENCE (WLGTH,ALAMBD(1,1))
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /LREAD/ILREA(22,5),KOM18
      DIMENSION ILREAD(22)
      EQUIVALENCE (ILREAD(1),ILREA(1,1))
      COMMON /OBSCAL/OBS,DOBS,GCALC,YCALC,DIFF,ICODE,SUMWD,NOBS,
     & IWGH(5),WTC(4),WT,SQRTWT,WDIFF,YBACK,YPEAK,YMAX,CSQTOT
      EQUIVALENCE (IWGHT,IWGH(1))
      COMMON /OMITPR/MIS,AMISS(3,100),KOM12
      COMMON /PAWLPR/AKLO,AKHI,SLACK,STRKT,STRTOL,SLKTOL,ITST,
     & ISPSLK(2,1000),IGSLAK(1000),AMSLAK(2,1000),WTSLAK(1000),
     & WEELEV,KOM16
      LOGICAL STRKT
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      DATA LTABLE/'TFAC','SCAL','SLIM','RTYP','SPHA','WGHT',
     & 'PKCN','ZERO','PKFN','OTYP','BACK','EXCL','WVLN','ABSC',
     & 'EXTN','PROR','TTHM','THE2','OMIT','REFK',' ',' '/
      DATA LPH0TB/'SCAL','RTYP','WGHT','PKCN','ZERO','OTYP','BACK',
     & 'EXCL','WVLN','ABSC','EXTN','PROR','TTHM','THE2'/
      DATA LTICTB/'RTYP','PKCN','ZERO','WVLN','THE2'/
      DATA INEX/'In','Ex'/
      DATA ARGTYP/'Time of flight','2 theta'/
C
C SET 'NO L CARDS READ':
C%
C      CALL JGMZER(ILREAD,1,%LCRD%)
      CALL JGMZER(ILREAD,1,22)
C
C READ ALL 'L' CARDS:
      IF (MULFAS) CALL P0TEMP(.TRUE.)
      ID=IABS(INREAD(12))
      NCARD=ICDNO(12)
      IF (NCARD .LE. 0) THEN
        CALL ERRMES(1,1,'No "L" cards given')
        GO TO 100
      ENDIF
C
      DO 3 ICD=1,NCARD
      CALL CARDIN(ID)
      ID=ID+NYZ
      CALL RDWORD(IWD,LEN,3,IPT,80,0,IER)
C IGNORE L CARD IF NOT ONE WE WANT:
C%
C      L=NCFIND(IWD,LTABLE,%LCRD%)
      L=NCFIND(IWD,LTABLE,22)
      IF (L .LE. 0) GO TO 3
** NB IF WE EVER WANT THESE AFTER THE INPUT PHASE WE MUST DO BETTER THAN THIS
      IF (TIC) THEN
        L=NCFIND(IWD,LTICTB,5)
        IF (L .LE. 0) GO TO 3
        GO TO (14,17,18,23,28) , L
      ENDIF
C NOW DO WE WANT IT FOR PHASE 0?
      LL=NCFIND(IWD,LPH0TB,14)
      IF (LL .LE. 0) GO TO 3
      ILREAD(L)=ILREAD(L)+1
      GO TO (12,14,16,17,18,20,21,22,23,
     & 24,25,26,27,28) , LL
C
C L SCAL - THIS IS THE SCALE OF A SOURCE:
  12  CALL LSSCAL(1)
      GO TO 3
C
C L RTYP:
  14  CALL RDINTG(MODERR(KSOURC),IPT,IPT,80,IER)
      MMODER=IABS(MODERR(KSOURC))
      IF (MMODER .GT. 3) GO TO 7
      IA=1
      IF (.NOT. TOF) IA=2
      CALL RDREAL(ARGMIN(KSOURC),IPT,IPT,80,IER)
      CALL RDREAL(ARGMAX(KSOURC),IPT,IPT,80,IER)
      CALL RDREAL(ARGSTP(KSOURC),IPT,IPT,80,IER)
      WRITE (LPT,2009) ARGTYP(IA),ARGMIN(KSOURC)
2009  FORMAT (//' Data limits considered:'/' Minimum ',A14,' =',F12.2)
      IF (ARGMAX(KSOURC).NE.0.)WRITE (LPT,2006)ARGTYP(IA),ARGMAX(KSOURC)
2006  FORMAT (' Maximum ',A14,' =',F12.2)
      IF (ARGSTP(KSOURC) .NE. 0.) WRITE (LPT,2007) ARGTYP(IA),
     & ARGSTP(KSOURC)
2007  FORMAT (' Step in ',A14,' =',F12.2)
      GO TO (71,72,73) , MMODER
   7  CALL ERRIN2(MODERR(KSOURC),2,'reflection input type',
     & 'not allowed')
      GO TO 3
C
  71  CALL MESS(LPT,1,'Reflection indices input as sets of 3 I5'//
     & ' integers from .HKL file')
      GO TO 10
C
  72  CALL MESS(LPT,1,'Reflection indices to be generated by program'//
     & ' then output to file .HKL')
      GO TO 10
C
  73  CALL MESS(LPT,1,'Reflection indices to be generated by program'//
     & ' - regenerate next run')
  10  I=2
      IF (MODERR(KSOURC) .LT. 0) I=1
      CALL MESS(LPT,1,INEX(I)//'clude any space group absences')
      GO TO 3
C
C L WGHT:
  16  CALL RDINTG(IWGH(KSOURC),IPT,IPT,80,IER)
      IF (IWGH(KSOURC) .GT. 3 .OR. IWGH(KSOURC) .LE. 0) GO TO 8
      GO TO (41,42,43) , IWGH(KSOURC)
   8  CALL ERRIN2(IWGH(KSOURC),2,'weighting scheme',
     & 'not allowed - type 1, 2 or 3 only')
      GO TO 3
C
C UNIT WEIGHTS:
  41  CALL MESS(LPT,1,'Unit weights')
      GO TO 3
C
C WEIGHT TO BE USED AS READ:
  42  CALL MESS(LPT,1,
     & 'Weights to be used as read from reflection data')
      GO TO 3
C
C SIGMA READ, WEIGHT IS 1/SIGMA SQUARED:
  43  CALL MESS(LPT,1,'Sigma read from reflection data'//
     & ' - weight is 1/sigma squared')
      GO TO 3
C
C L PKCN:
  17  CALL RDWORD(IWD,LEN,IPT,IPT,80,-1,IER)
      IF (IWD .NE. 'TYPE') CALL PCXX(1)
** TEMPORARY - PFXX - IE PFALL - IGNORES ITS OWN 'TYPE' CARDS
      GO TO 3
C
C L ZERO:
  18  CALL ZEROPR(1)
      GO TO 3
C
C L OTYP:
  20  CALL RDINTG(MODEOB(KSOURC),IPT,IPT,80,IER)
      IF (MODEOB(KSOURC) .LT. 0 .OR. MODEOB(KSOURC) .GT. 4) THEN
        CALL ERRIN2(MODEOB(KSOURC),2,'mode of giving obs data',
     &  'unacceptable')
        GO TO 3
      ENDIF
C
      GO TO (61,62,63,64,65) , MODEOB(KSOURC)+1
  61  CALL MESS(LPT,1,
     & 'Observations to be input by user''s routine QPRIN')
      GO TO 3
C
  62  CALL MESS(LPT,1,'Observations to be input as '//
     & 'tof,Yobs,DYobs,(scale),(code), in formats F10 and I5')
      GO TO 3
C
  63  CALL MESS(LPT,1,'Observations to be input as tof,Yobs,DYobs,'//
     & '(scale),(code), unformatted from binary file')
      GO TO 3
C
  64  CALL MESS(LPT,1,
     & 'Observations to be input as sets of n,obs in format 10(I2,I6)')
      GO TO 3
C
  65  CALL MESS(LPT,1,
     & 'Observations to be input as sets of obs in format 10(I8)')
      GO TO 3
C
C L BACK:
  21  CALL BACKPR(1)
      GO TO 3
C
**???ought these to be per phase?
C L EXCL:
  22  CALL EXCLIN
      GO TO 3
C
C L WVLN:
  23  IF (TOF) GO TO 3
      CALL RDNUMS(ALAMBD(1,KSOURC),IPT,5,NLAMB,IER)
      WRITE(LPT,2002) NLAMB,(ALAMBD(I,KSOURC),I=1,NLAMB)
2002  FORMAT (' ',I3,' Wavelength(s): ',5(1X,F9.6))
      GO TO 3
C
C L ABSC:
  24  CALL ABCRPR(1)
      GO TO 3
C
C L EXTN:
  25  CALL EXCRPR(1)
      GO TO 3
C
C L PROR:
  26  CALL PREFOR(1)
      GO TO 3
C
C L TTHM:
  27  CALL TTHMLX(1)
      GO TO 3
C
C L THE2:
  28  CALL RDREAL(TWOTHD(KSOURC),IPT,IPT,80,IER)
      SINTH=SIN(RADIAN(TWOTHD(KSOURC)/2.))
      TWSNTH(KSOURC)=2.*SINTH
      WRITE (LPT,2020) TWOTHD(KSOURC),TWSNTH(KSOURC)
2020  FORMAT (/' 2 theta =',F10.3,' degrees;  2 sin theta =',F10.5)
      GO TO 3
C
   3  CONTINUE
C
 100  IF (MULFAS) CALL P0TEMP(.FALSE.)
      RETURN
      END
C
C
C
C
C LEVEL 10      SUBROUTINE INPLPR(PCXX,PFXX)
      SUBROUTINE INPLPR(PCXX,PFXX)
C
C *** INPLPR updated by JCM 30 Jan 92 ***
C
CH Reads most L cards for Profile refinement, in sequence
CD Reads L cards, ignoring FIX, VARY, RELA, FUDG which will be read later,
CD and all the cards which would be phase-independent in multiphase, which
CD have been read already by INPLP0.
C
CD If called from STLSPR, records information off the following:
CD    TFAC   An overall temperature factor (applied squared in this case)
*CD    SCAL   Scale factors
*CD    RTYP   Mode of presentation of input reflection data
*CD    WGHT   Weighting scheme
*CD    PKCN   Peak centre parameters
*CD    ZERO   Zero point
CD    PKFN   Peak function parameters
*CD    OTYP   Mode of presentation of input observation data
*CD    BACK   Background approximation - may be several cards
*CD    EXCL   Excluded regions - may be several cards
*CD    WVLN   Wavelengths (for constant wavelength or X-Ray)
*CD    ABSC   Absorption correction coefficient
*CD    EXTN   Extinction correction coefficient
*CD    PROR   Preferred orientation coefficient
*CD    THE2   2 theta for time of flight
*CD    TTHM   Monochromator 2 theta angle (X-Ray)
CD    SLIM   Limits for CAIL - SAPS - APES
CD    OMIT   h k l values for reflection to omit this run
C
*CD If called from PICTIC, interprets only the 5 cards:
*CD    RTYP, PKCN, ZERO WVLN, THE2
C


      INCLUDE 'PARAMS.INC'

      EXTERNAL PCXX,PFXX
      CHARACTER *2 INEX(2)
      CHARACTER *14 ARGTYP(2)
C%
C      CHARACTER *4 IWD,LTABLE(%LCRD%),LTICTB(5),LPHNTB(6)
      CHARACTER *4 IWD,LTABLE(22),LTICTB(5),LPHNTB(6)
      DIMENSION IH(3)
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /DGEOM/IGEOM,UM(9),NLR,ANGLIN(3),ALAMBD(5,5),
     & NLAMB,ILAMB
      EQUIVALENCE (WLGTH,ALAMBD(1,1))
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /LREAD/ILREA(22,5),KOM18
      DIMENSION ILREAD(22)
      EQUIVALENCE (ILREAD(1),ILREA(1,1))
      COMMON /OBSCAL/OBS,DOBS,GCALC,YCALC,DIFF,ICODE,SUMWD,NOBS,
     & IWGH(5),WTC(4),WT,SQRTWT,WDIFF,YBACK,YPEAK,YMAX,CSQTOT
      EQUIVALENCE (IWGHT,IWGH(1))
      COMMON /OMITPR/MIS,AMISS(3,100),KOM12
      COMMON /PAWLPR/AKLO,AKHI,SLACK,STRKT,STRTOL,SLKTOL,ITST,
     & ISPSLK(2,1000),IGSLAK(1000),AMSLAK(2,1000),WTSLAK(1000),
     & WEELEV,KOM16
      LOGICAL STRKT
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END
      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      DATA LTABLE/'TFAC','SCAL','SLIM','RTYP','SPHA','WGHT',
     & 'PKCN','ZERO','PKFN','OTYP','BACK','EXCL','WVLN','ABSC',
     & 'EXTN','PROR','TTHM','THE2','OMIT','REFK',' ',' '/
      DATA LTICTB/'RTYP','PKCN','ZERO','WVLN','THE2'/
      DATA LPHNTB/'TFAC','PKFN','SLIM','OMIT','SPHA','REFK'/
      DATA INEX/'In','Ex'/
      DATA ARGTYP/'Time of flight','2 theta'/
C
*C SET 'NO L CARDS READ':
*%      CALL JGMZER(ILREAD,1,%LCRD%)
C
C READ ALL 'L' CARDS:
      INREAD(12)=-IABS(INREAD(12))
      ID=IABS(INREAD(12))
      NCARD=ICDNO(12)
      IF (NCARD .LE. 0) THEN
        CALL ERRMES(1,1,'No "L" cards given')
        GO TO 100
      ENDIF
C
      DO 3 ICD=1,NCARD
      CALL CARDIN(ID)
      ID=ID+NYZ
      CALL RDWORD(IWD,LEN,3,IPT,80,0,IER)
C IGNORE L CARD IF NOT ONE WE WANT:
C%
C      L=NCFIND(IWD,LTABLE,%LCRD%)
      L=NCFIND(IWD,LTABLE,22)
      IF (L .LE. 0) GO TO 3
C NOW FIND OUT IF WE REALLY WANT IT:
      IF (.NOT. TIC) THEN
        LL=NCFIND(IWD,LPHNTB,6)
        IF (LL .EQ. 0) GO TO 3
        ILREAD(L)=ILREAD(L)+1
        GO TO (11,19,13,29,15,30) , LL
      ELSE
        LL=NCFIND(IWD,LTICTB,5)
        IF (LL .LE. 0) GO TO 3
        ILREAD(L)=ILREAD(L)+1
        GO TO (14,17,18,23,28) , LL
      ENDIF
C
C L TFAC:
  11  CALL LLTFAC(1)
      GO TO 3
*C
*C L SCAL - THIS IS THE SCALE OF A SOURCE:
*  12  CALL LSSCAL(1)
*      GO TO 3
C
C L SLIM:
  13  CALL FAM4PR(1,PCXX,PFXX)
      GO TO 3
C
**???only once?
C L RTYP:
  14  CALL RDINTG(MODERR(KSOURC),IPT,IPT,80,IER)
      MMODER=IABS(MODERR(KSOURC))
      IF (MMODER .GT. 3) GO TO 7
      IA=1
      IF (.NOT. TOF) IA=2
      CALL RDREAL(ARGMIN(KSOURC),IPT,IPT,80,IER)
      CALL RDREAL(ARGMAX(KSOURC),IPT,IPT,80,IER)
      CALL RDREAL(ARGSTP(KSOURC),IPT,IPT,80,IER)
      WRITE (LPT,2009) ARGTYP(IA),ARGMIN(KSOURC)
2009  FORMAT (//' Data limits considered:'/' Minimum ',A14,' =',F12.2)
      IF (ARGMAX(KSOURC).NE.0.)WRITE (LPT,2006)ARGTYP(IA),ARGMAX(KSOURC)
2006  FORMAT (' Maximum ',A14,' =',F12.2)
      IF (ARGSTP(KSOURC) .NE. 0.) WRITE (LPT,2007) ARGTYP(IA),
     & ARGSTP(KSOURC)
2007  FORMAT (' Step in ',A14,' =',F12.2)
      GO TO (71,72,73) , MMODER
   7  CALL ERRIN2(MODERR(KSOURC),2,'reflection input type',
     & 'not allowed')
      GO TO 3
C
  71  CALL MESS(LPT,1,'Reflection indices input as sets of 3 I5 '//
     & 'integers from .HKL file')
      GO TO 10
C
  72  CALL MESS(LPT,1,'Reflection indices to be generated by program'//
     & ' then output to file .HKL')
      GO TO 10
C
  73  CALL MESS(LPT,1,'Reflection indices to be generated by program'//
     & ' - regenerate next run')
  10  I=2
      IF (MODERR(KSOURC) .LT. 0) I=1
      CALL MESS(LPT,1,INEX(I)//'clude any space group absences')
      GO TO 3
C
C L SPHA:
  15  CALL LPSCAL(1)
      GO TO 3
C
C L PKCN:
  17  CALL RDWORD(IWD,LEN,IPT,IPT,80,-1,IER)
      IF (IWD .NE. 'TYPE') CALL PCXX(1)
** TEMPORARY - PFXX - IE PFALL - IGNORES ITS OWN 'TYPE' CARDS
      GO TO 3
C
C L ZERO:
  18  CALL ZEROPR(1)
      GO TO 3
C
C L PKFN:
  19  CALL PFALL(1)
      GO TO 3
C
C L WVLN:
  23  IF (TOF) GO TO 3
      CALL RDNUMS(ALAMBD(1,KSOURC),IPT,5,NLAMB,IER)
      WRITE(LPT,2002) NLAMB,(ALAMBD(I,KSOURC),I=1,NLAMB)
2002  FORMAT (' ',I3,' Wavelength(s): ',5(1X,F9.6))
      GO TO 3
C
C L THE2:
  28  CALL RDREAL(TWOTHD(KSOURC),IPT,IPT,80,IER)
      SINTH=SIN(RADIAN(TWOTHD(KSOURC)/2.))
      TWSNTH(KSOURC)=2.*SINTH
      WRITE (LPT,2020) TWOTHD(KSOURC),TWSNTH(KSOURC)
2020  FORMAT (/' 2 theta =',F10.3,' degrees;  2 sin theta =',F10.5)
      GO TO 3
C
C L OMIT:
  29  DO 79 I=1,3
      CALL RDINTG(IH(I),IPT,IPT,80,IER)
  79  CONTINUE
      IER=IERR
C%
C      CALL ERRCHK(2,MIS,%OMIT%,0,'omitted reflections')
      CALL ERRCHK(2,MIS,100,0,'omitted reflections')
      IF (IER .NE. IERR) GO TO 3
C
      CALL INDFLO(AMISS(1,MIS),IH)
      WRITE (LPT,2000) IH
2000  FORMAT (' Reflection',3I5,' to be EXcluded from the ',
     & 'refinement')
      GO TO 3
C
C L REFK:
  30  CALL RDREAL(AKNOTS,IPT,IPT,80,IER)
      IF (AKNOTS .LE. 1.) THEN
        WRITE(LPT,2051) AKNOTS
2051    FORMAT (/' Knots required at spacing of',F7.3,
     &  ' times number of reflections')
      ELSE
        WRITE (LPT,2052) NINT(AKNOTS)
2052    FORMAT (/' Knots required at',I4,' peaks')
      ENDIF
C
   3  CONTINUE
C
 100  RETURN
      END
C
C
C
C
C LEVEL 9      SUBROUTINE INRFPR(PCXX,PFXX)
      SUBROUTINE INRFPR(PCXX,PFXX)
C
C *** INRFPR updated by JBF 4 July 1955 ***
C
CC 19B
CH Organises reflection data for all sorts of PR
CA PCXX must be set to the required Peak Centre subroutine
CA PFXX must be set to the required Peak Function subroutine
CP MODER must have been set to give type of reflection input
CP MAG must be .FALSE. for non-magnetic, .TRUE. for magnetic
CP Symmetry must be set by SYMOP and SYMUNI
CP IREF etc must be set in /REFINE/ giving type of refinement
C
CD Obtains list of h,k,l s, either by reading them in from some
CD previous run, or generating them.  Fills in /REFLNS/ arrays REFH,
CD AMUL, and if Pawley-type and reading h,k,l, reads F4PAR(1, in /F4PARS/
CD also, and possibly F4PAR(2.
CD
CD If entered with TIC = .TRUE. generates reflections.
C
C
      LOGICAL NOMORE,ISPABS,SFC,MAGABS,MAGNET
      CHARACTER *1 ICHR
      CHARACTER *129 VFMT
      CHARACTER *131 VFMM
      COMPLEX FCALC,FCAL
      EXTERNAL PCXX,PFXX
    
      INCLUDE 'params.inc'

C%
C      DIMENSION IH(3),H(3),TEMREF(3,%REFS%),IORDER(%REFS%),
      DIMENSION IH(3),H(3),TEMREF(3,ITMREF),IORDER(ITMREF),
     & TEMMUL(ITMREF),ARG(ITMREF),TF4P(6,ITMREF),TEMP(6),
     & ARGN(ITMREF),ANT(ITMREF)

      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /CONSTA/PI,RAD,DEG,TWOPI,FOURPI,PIBY2,ALOG2,SQL2X8,VALMUB
      COMMON /DGEOM/IGEOM,UM(9),NLR,ANGLIN(3),ALAMBD(5,5),
     & NLAMB,ILAMB
      EQUIVALENCE (WLGTH,ALAMBD(1,1))
      COMMON /F4PARS/NGEN4(9,5),F4VAL(3,MF4PAR),
     & F4PAR(3,MF4PAR),KF4PAR(3,MF4PAR),F4PESD(3,MF4PAR),KOM6
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /OMITPR/MIS,AMISS(3,100),KOM12
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRBLEM/NFAM,NGENPS(6,9),NSPCPS(6,9),
     & LF1SP(5),LF3SP(10,9,5),LVFST1(6,9,5),
     & LBFST1(6,9,5),NVARF(6,9,5),
     & NBARF(6,9,5),LF6SP(3,5)
      DIMENSION NGENS(6),NSPC(6)
      EQUIVALENCE (NGENS(1),NGENPS(1,1)),(NSPC(1),NSPCPS(1,1))
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END
      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
      COMMON /REFLNZ/ZARGK(MRFLNZ),ZXDEL(MRFLNZ)
      COMMON /SATELL/PROP(3),KPROP(3),KSTAB(24),NKSTAR,IPROP,FKSTAR,
     & NKC,KCENT,INCOM,KOM21
      LOGICAL INCOM
      COMMON /SCRACH/MESSAG,NAMFIL
      CHARACTER *80 ICARD,MESSAG*100,NAMFIL*100
      EQUIVALENCE (ICARD,MESSAG)
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      DATA VFMT/'(/'' Reflections to be used:''/'' Serial  h'',3X,''k'',
     &3X,''l'',2X,''  Argument  D-spacing M'',7X,''F = A + iB'',5X,    '
     &'F*F     Intensity'')'/
      DATA VFMM/'(/'' Reflections to be used:''/'' Serial  h'',3X,''k'',
     &3X,''l'',2X,''  Argument  D-spacing M'',3X,''    F*F   '',6X,    '
     &'Q*Q        Intensity'')'/
C
C DECIDE WHETHER INDICES MAY HAVE FRACTIONAL PARTS:
C
      FIXED=(.NOT. MAG .OR. (IPROP.LE.0))
      IF (.NOT. FIXED) THEN
        VFMM(43:43)='5'
        VFMM(50:50)='5'
        VFMM(57:57)='4'
      ENDIF
C DECIDE WHETHER FCS MAY BE PRINTED:
      IF (TIC) THEN
        SFC= (ICDNO(1).NE.0.AND.ICDNO(6).NE.0)
      ELSE
        SFC= (RIET .OR. SAPS)
      ENDIF
      IF (.NOT. SFC) THEN
        VFMT(86:)=')'
        VFMT(86:)=')'
      ENDIF
C
C COUNT REFLECTIONS:
      MAXKK(JPHASE)=0
C
C FOR ALL SOURCES:
      DO 5 JSOUR=1,NSOURC
      JSOURC=JSOUR
      CALL LOGSOU(JSOURC)
C
C IF MODER +VE, SPACE GROUP ABSENCES TO BE EXCLUDED:
      MMODER=IABS(MODERR(JSOURC))
C SET SINTHETA/LAMBDA LIMIT
      SM=STHMXX(JSOURC)
      DSTAMX=2.*SM
C
C IF REQUIRED, OPEN FILE ON WHICH TO READ H,K,L,INTS:
      IF (MMODER .EQ. 1 .AND. .NOT. TIC) THEN
        MESSAG='File to read h,k,l list'
        NAMFIL='.HKL'
        INHKL=-9999
        CALL OPNFIL(INHKL,111)
      ELSE
C
C  SET UP TO GENERATE NUCLEAR HKLS:
        CALL SETGEN(SM)
      ENDIF
      MAGREF=1
      IF (MMODER .EQ. 1 .AND. .NOT. TIC) MAGREF=3
      NFLAG=-9999
C
C TYPE 1 READS LIST OF HKL'S TO USE FROM FILE:
C IF CAIL, READ INTS FOR EACH REFLECTION FROM PREVIOUS CYCLES
C IF SAPS/APES, READ INTS FOR EACH REFLECTION, AND POSSIBLY ALSO SIGS
C N.B. BOTH INTS AND SIGS HAVE THEIR SIGMAS THERE ALSO
   2  GO TO (46,47,49) , MAGREF
  49  N2G4L=NUMS
      CALL RDDATA(INHKL,IH,H,TF4P(1,MAXKK(JPHASE)+1),-6,NUMS)
      IF (NUMS .EQ. -9999) GO TO 4
C
      MUL=MULBOX(H)
C JOIN TO TEST WHETHER WANTED:
      GO TO 50
C
C HERE TO GENERATE ALL HKL'S WITHIN GIVEN MAX THETA:
   46 CALL GENMUL(H,NOMORE,MUL)
      IF (NOMORE) THEN
        IF (MAG .AND. IPROP .NE. 0) THEN
          MAGREF=2
          GO TO 2
        ELSE
          GO TO 4
        ENDIF
      ENDIF
      GO TO 50
C
   47 CALL GENMAG(H,NOMORE,MUL,SM,NFLAG)
      IF (NOMORE) THEN
C RESTORE FULL SYMMETRY IF NECESSARY (JBF modification)
        IF (NKSTAR.GT.1) CALL SYMBAK
        GO TO 4
      ENDIF
C
C IF ASKED, IGNORE SPACE GROUP ABSENCES:
  50  IF (.NOT. MAG .AND. MODERR(JSOURC) .GT. 0) THEN
        IF (ISPABS(H)) GO TO 2
      ENDIF
      DSTAR(1)=VCTMOD(1.,H,2)
      IF (DSTAR(1) .GT. DSTAMX) GO TO 2
C
C CHECK WHETHER INDICES ARE IN LIST TO OMIT:
      M=1
      IF (MIS .GT. 0) CALL EQVEC(AMISS,H,MIS,M,0)
      IF (M .LE. MIS) GO TO 2
C
C CHECK LIMITS OF ARGK:
      KNOW=1
      CALL PCXX(5)
      IF (ARGK .LT. ARGMIN(JSOURC) .OR. (ARGMAX(JSOURC) .NE. 0. .AND.
     & ARGK .GT. ARGMAX(JSOURC))) GO TO 2
C
C CHECK REFLECTION IN GIVEN ASYMMETRIC UNIT:
      IF (MUL .EQ. 0) THEN
        WRITE (LPT,2000) H
2000    FORMAT (/' Reflection',3F5.1,' not in given unit -- IGNORED')
        GO TO 2
      ENDIF
C
C HERE TO ACCEPT A SET OF INDICES:
C%
C      CALL ERRCHK(2,MAXKK(JPHASE),%REFS%,0,'reflections')
      CALL ERRCHK(2,MAXKK(JPHASE),ITMREF,0,'reflections')
C
      CALL GMEQ(H,TEMREF(1,MAXKK(JPHASE)),1,3)
      TEMMUL(MAXKK(JPHASE))=FLOAT(MUL)
      ARG(MAXKK(JPHASE))=ARGK
      GO TO 2
C
C ALL INDICES STORED NOW
   4  IF (MMODER .EQ. 1) CALL CLOFIL(INHKL)
   5  CONTINUE
C
      IF (MAXKK(JPHASE) .LE. 0) CALL ERRMES(1,0,
     & 'no reflections found in data limits')
C
C SORT INTO ORDER
      CALL SORTX(ARG,IORDER,MAXKK(JPHASE))
      IF (TIC .OR. (IPRNT(2) .GT. 0)) THEN
        IF (SFC) THEN
          DO 1 I=1,3
   1      H(I)=0.
          FCAL=FCALC(H)
          FC=CABS(FCAL)
          FCSQ=FC*FC
          WRITE(LPT,2050) FC,FCSQ
2050      FORMAT (//' Nuclear F(0,0,0)   is   ',F10.2/
     &    '        F(0,0,0)^2 is ',F12.2//)
        ENDIF
        IF (MAG) THEN
          WRITE(LPT,VFMM)
        ELSE
          WRITE(LPT,VFMT)
        ENDIF
      ENDIF
C** EXPAND THIS IF FLOATING
C ^^^^^ WRITE MORE IF I OR SIGS READ
C THIS IS OUTPUT IF ANY PRINTING AT ALL IS REQUESTED FOR REFLNS
C
      IF (SAPS .OR. APES) THEN
        NG4L=N2G4L/2
        PRECYC= NG4L .LT. NGENPS(4,JPHASE)
        IF (PRECYC) SIMUL=.TRUE.
      ENDIF
C
      KNOW=0
      KTIC=0
      DO 6 KSORT=1,MAXKK(JPHASE)
      IF (KNOW .GT.0) THEN
        DO 144 K=KNOW,1,-1
        IF (ARG(IORDER(KSORT)) .GT. ARGN(K)) GO TO 143
        DO 142 I=1,3
        IF (ABS(TEMREF(I,IORDER(KSORT))-REFH(I,K)) .GT. .0001)
     &  GO TO 144
 142    CONTINUE
C SAME H,K,L WITH SAME ARG - IGNORE:
        GO TO 6
 144    CONTINUE
      ENDIF
 143  KNOW=KNOW+1
      CALL GMEQ(TEMREF(1,IORDER(KSORT)),REFH(1,KNOW),1,3)
      IF (FIXED) CALL INDFIX(REFH(1,KNOW),IH)
      CALL CELDER(REFH(1,KNOW),TEMP)
      DSTAR(KNOW)=SQRT(DSTAR2)
      DSP=1./DSTAR(KNOW)
      AMUL(KNOW)=TEMMUL(IORDER(KSORT))
      MUL=NINT(AMUL(KNOW))
C ^^^^ THE FOLLOWING DO LOOP IS NEW
      IF (CAIL .OR. SAPS .OR. APES) THEN
        DO 16 IG=1,NGENPS(4,JPHASE)
        IT2=2*IG
        IT1=IT2-1
        F4PAR(IG,KNOW)=TF4P(IT1,IORDER(KSORT))
        F4PESD(IG,KNOW)=TF4P(IT2,IORDER(KSORT))
  16    CONTINUE
      ENDIF
      ARGK=ARG(IORDER(KSORT))
      ARGN(KNOW)=ARGK
      ZARGK(KNOW)=ARGK
      ICHR=' '
      IF (MODER .LT. 0) THEN
        IF (ISPABS(REFH(1,KNOW))) ICHR='*'
      ENDIF
      MAGNET = .NOT.MAGABS(REFH(1,KNOW),IKK)
      IF (MAGNET) THEN
        ISMAG(KNOW)=IKK
      ELSE
        ISMAG(KNOW)= 0
      ENDIF
C ARE WE DOING A STRUCTURE FACTOR CALCULATION?
      IF (SFC) THEN
C SET UP MULTIPLIERS OF F*F TO GIVE OBSERVED INTENSITY
        IF (TOF) THEN
          FAC=1./(DSTAR2*DSTAR2)
        ELSE
          IF (CN) FAC=1./(SIN(RAD*ARGK)*SIN(0.5*RAD*ARGK))
          IF (LX) FAC=FAC*(1.+COS(DEG*ARGK)**2)
        ENDIF
C NOW CALCULATE NUCLEAR F*F IF REQUIRED
        STHL=0.5/DSP
        IF (ISMAG(KNOW). EQ .0) THEN
          FCAL=FCALC(REFH(1,KNOW))
          FC=CABS(FCAL)
          AF=REAL(FCAL)
          BF=AIMAG(FCAL)
          FCSQ = REAL(FCAL*CONJG(FCAL))
C IF TIC, WE STORE SEPARATE DETAILS OF NUCLEAR AND MAGNETIC INTENSITIES IN
C COMMON /REFLNS/ USING AICALC FOR ARG, AND AIOBS FOR NUCLEAR (+VE) OR
C MAGNETIC (-VE) INTENSITIES.
          IF (TIC) THEN
C%
C             CALL ERRCHK(2,KTIC,%REFS%,0,'intensity contributions')
             CALL ERRCHK(2,KTIC,ITMREF,0,'intensity contributions')
            AICALC(KTIC)=ARGK
            AIOBS(KTIC)=FAC*FCSQ*FLOAT(MUL)
          ENDIF
        ELSE
          FCSQ=0.
        ENDIF
C AND MAGNETIC Q*Q IF NECESSARY
        IF (MAGNET) THEN
          CALL FMCALC(REFH(1,KNOW),FMCMOD,FMCSQR)
          IF (TIC) THEN
C%
C             CALL ERRCHK(2,KTIC,%REFS%,0,'intensity contributions')
             CALL ERRCHK(2,KTIC,ITMREF,0,'intensity contributions')
            AICALC(KTIC)=ARGK
            AIOBS(KTIC)= -FAC*FMCSQR*FLOAT(MUL)
          ENDIF
        ELSE
          FMCSQR = 0.0
        ENDIF
        ANT(KNOW)=FAC*FLOAT(MUL)* (FCSQ + FMCSQR)
C NOW THE PRINTING IF REQUIRED
        IF (TIC .OR. (IPRNT(2) .GT. 0)) THEN
          IF (.NOT. MAG) THEN
            WRITE (LPT,2002) KNOW,ICHR,
     &      (IH(J),J=1,3),ARGK,DSP,MUL,AF,BF,FCSQ,ANT(KNOW)
          ELSE
            IF (IPROP.LE.0) THEN
              WRITE (LPT,2006) KNOW,ICHR,(IH(J),J=1,3),
     &        ARGK,DSP,MUL,FCSQ,FMCSQR,ANT(KNOW)
            ELSE
              WRITE (LPT,2012) KNOW,ICHR,(REFH(J,KNOW),J=1,3),
     &        ARGK,DSP,MUL,FCSQ,FMCSQR,ANT(KNOW)
            ENDIF
          ENDIF
        ENDIF
2002    FORMAT(' ',I4,A1,3I4,F12.3,F10.5,I3,3F9.3,F12.3)
2006    FORMAT(' ',I4,A1,3I4,F12.3,F10.5,I3,2(3X,F9.3),3X,F12.2)
2012    FORMAT(' ',I4,A1,3F6.2,F12.3,F10.5,I3,2(3X,2F9.3),F12.2)
      ELSE
C
C HERE IF WE CAN DO NO CALCULATIONS OF INTENSITY
C
        IF (TIC .OR. (IPRNT(2) .GT. 0)) THEN
          IF (.NOT. MAG .AND. .NOT. ISPABS(REFH(1,KNOW))) THEN
C IF TIC, WE STORE SEPARATE DETAILS OF NUCLEAR AND MAGNETIC REFLECTIONS IN
C COMMON /REFLNS/ USING AICALC FOR ARG, AND AIOBS FOR NUCLEAR (+VE) OR
C MAGNETIC (-VE) REFLECTIONS.
            IF (TIC) THEN
C%
C               CALL ERRCHK(2,KTIC,%REFS%,0,'intensity contributions')
               CALL ERRCHK(2,KTIC,ITMREF,0,'intensity contributions')
              AICALC(KTIC)=ARGK
              AIOBS(KTIC)= 100.*MUL
            ENDIF
          ENDIF
C AND MAGNETIC F*F IF NECESSARY
          IF (MAG .AND. .NOT. MAGABS(REFH(J,KNOW),IKK)) THEN
            IF (TIC) THEN
C%
C               CALL ERRCHK(2,KTIC,%REFS%,0,'intensity contributions')
               CALL ERRCHK(2,KTIC,ITMREF,0,'intensity contributions')
              AICALC(KTIC)=ARGK
              AIOBS(KTIC)= -100.*MUL
            ENDIF
          ENDIF
C
C AND NOW THE WRITING
C
          IF (FIXED) THEN
            WRITE (LPT,2004) KNOW,ICHR,(IH(J),J=1,3),ARGK,DSP,MUL
          ELSE
            WRITE (LPT,2014) KNOW,ICHR,(REFH(J,KNOW),J=1,3)
     &      ,ARGK,DSP,MUL
          ENDIF
        ENDIF
2004    FORMAT(' ',I4,A1,1X,3I4,3X,F12.3,1X,F10.5,1X,I3)
2014    FORMAT(' ',I4,A1,3F6.2,F12.3,1X,F10.5,1X,I3)
      ENDIF
C
C PAWLEY-TYPE SETTING UP - IF NO F4PAR(1 READ SET IT TO BE 1:
      IF (CAIL .AND. F4PAR(1,KNOW) .EQ. 0.) F4PAR(1,KNOW)=1.
      IF (RIET .OR. CAIL) GO TO 6
C
C IF SAPS OR APES, WE HAVE VARIOUS CASES:
C  A) ONCE WE HAVE STARTED, I, SIGI, SIGS AND SIGSIGS ARE ALL READ FROM .HKL
C  B) A .HKL FILE MAY HAVE I, SIGI BUT NO SGSQ AND SIGSIGS;  IN THAT CASE
C     THE INITIAL SIGS VALUES CAN BE CALCULATED BY FDXX (VIA PFXX(7))
C  C) IF THERE IS NO .HKL FILE, AT THIS POINT WE SHALL HAVE NO I AND NO SIGS.
C     IN THAT CASE WE NEED AN INITIAL CYCLE TO GENERATE I AND SIGI.
C     SIGS INITIALLY CAN COME VIA PFXX, AS IN (B).
C
C SAPS AND APES:
C INITIAL CYCLE NEEDED FOR VALUES OF I:
      IF (SAPS .OR. APES) THEN
        IF (PRECYC) THEN
C WE HAVE I VALUES, BUT NOT SIGS:
          CALL PCXX(5)
          CALL PFXX(7)
        ENDIF
      ENDIF
   6  CONTINUE
C FINISHED LIST. STORE NUMBER OF INTENSITIES IN MAXKK
      MAXKK(JPHASE)=KNOW
      IF (TIC) MAXKK(JPHASE)=KTIC
      RETURN
      END
C
C
C
C
C LEVEL 1      SUBROUTINE LIMITS(YVALS,N,MIN,MAX,YMIN,YMAX)
      SUBROUTINE LIMITS(YVALS,N,MIN,MAX,YMIN,YMAX)
C
C *** LIMITS corrected by JCM 28 Dec 92 ***
C
CH Finds the maximum and minimum of the members of a given array
CA On entry YVALS is an array of REAL numbers
CA          N is the number of elements in the array (and must be > 0)
CA On exit  YMIN is the smallest value found, occurring at element MIN
CA          YMAX is the largest value found, occurring at element MAX
C
CN If all elements are equal, MIN=1 and MAX=N
C
      DIMENSION YVALS(N)
C
      MIN=1
      MAX=N
      YMIN=YVALS(1)
      YMAX=YVALS(1)
      DO 1 I=1,N
      IF (YVALS(I).LT.YMIN) THEN
        YMIN=YVALS(I)
        MIN=I
      ENDIF
      IF (YVALS(I).GT.YMAX) THEN
        YMAX=YVALS(I)
        MAX=I
      ENDIF
   1  CONTINUE
      RETURN
      END
C
C
C
C
C LEVEL 1      SUBROUTINE LOGPHA(N)
      SUBROUTINE LOGPHA(N)
C
C *** LOGPHA by JCM 16 May 90 ***
C
CH Converts integer descibing refinement type to and from logicals
CA On entry N=which phase
CD Takes METHOD from /SOURCE/ and sets one of the logicals RIET, CAIL, SAPS,
CD APES, RAPS etc.
C
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
      RIET=METHOD(N).EQ.1
      CAIL=METHOD(N).EQ.2
      SAPS=METHOD(N).EQ.3
      APES=METHOD(N).EQ.4
      RAPS=METHOD(N).EQ.5
C
 100  RETURN
      END
C
C
C
C
C LEVEL 1      SUBROUTINE LOGSOU(N)
      SUBROUTINE LOGSOU(N)
C
C *** LOGSOU updated by JCM 23 Feb 93 ***
C
CH Converts integer descibing data source to logicals
CA On entry N=which source
CD Sets one of the logicals TOF, CN, LX, SR, ED
C
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
      TOF=NDASOU(N).EQ.1
      CN=NDASOU(N).EQ.2
      LX=NDASOU(N).EQ.3
      SR=NDASOU(N).EQ.4
      ED=NDASOU(N).EQ.5
 100  RETURN
      END
C
C
C
C
C LEVEL 1      SUBROUTINE LOGSET
      SUBROUTINE LOGSET
C
C *** LOGSET updated by JCM 14 Nov 90 ***
C
CH Sets up logicals needed for PR after variables have been made
CD Sets NOPKRF for "no peak refine", that is, there are no peak descriptor
CD parameters being refined on this cycle.
CD Sets CYC1 for "this is cycle 1" (CYC1 is thus also .TRUE. if this is
CD the pre-cycle for SAPS or APES.)
C

      INCLUDE 'PARAMS.INC'
      COMMON /CONSTR/JCONST,JROWPT(301),JCMAT(200),AMOUNT(200),
     & NEXTJ
      COMMON /F4PARS/NGEN4(9,5),F4VAL(3,MF4PAR),
     & F4PAR(3,MF4PAR),KF4PAR(3,MF4PAR),F4PESD(3,MF4PAR),KOM6

      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /POINTS/LVRBS(500),LVRPR(500),LBSVR(400),LRDVR(300)
      COMMON /PRBLEM/NFAM,NGENPS(6,9),NSPCPS(6,9),
     & LF1SP(5),LF3SP(10,9,5),LVFST1(6,9,5),
     & LBFST1(6,9,5),NVARF(6,9,5),
     & NBARF(6,9,5),LF6SP(3,5)
      DIMENSION NGENS(6),NSPC(6)
      EQUIVALENCE (NGENS(1),NGENPS(1,1)),(NSPC(1),NSPCPS(1,1))
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END

      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
      CYC1=(ICYC .EQ. NCYC1)
C
C SET NOPKRF TO BE TRUE IF NO PEAK FUNCTION PARAMETERS ARE TO BE REFINED:
      NOPKRF=.FALSE.
      DO 1 JP=1,NPHASE
      DO 1 JS=1,NSOURC
      DO 1 I=1,NPKGEN(JP,JS)
      DO 1 J=1,NPKFSP(I,JP,JS)
      IF (KPFNSP(I,J,JP,JS) .GT. 0) GO TO 9
   1  CONTINUE
      NOPKRF=.TRUE.
   9  CONTINUE
C
**
C IF CAIL, SET UP 2 VECTORS OF BASIC VARIABLE NUMBERS FOR INTS:
      IF (CAIL) THEN
C AND OVER ALL PHASES:
        DO 20 JP=1,NPHASE
        DO 3 K=1,MAXKK(JP)
C NB=WHICH BASIC (OR REDUNDANT) VARIABLE THIS "INTS" IS:
        NB=KF4PAR(1,K)
        IF (NB .GT. 0) NB=LVRBS(NB)
C IF REDUNDANT, IT SHOULD BE BY A SIMPLE CONSTRAINT - SET NB TO BE THE
C BASIC VARIABLE INVOLVED:
        IF (NB .LT. 0) NB=JCMAT(JROWPT(-NB))
        NBASF4(K,1,JP)=NB
        NBASF4(K,2,JP)=NB
   3    CONTINUE
C NOW FILL IN ANY ZEROS (EXCEPT AT THE TWO ENDS) -  ( ,1)=THE FIRST
C NON-ZERO FOR INCREASING K, ( ,2)= THE FIRST NON-ZERO FOR DECREASING K:
        DO 5 K=1,MAXKK(JP)
        IF (NBASF4(K,1,JP) .GT. 0) GO TO 5
        DO 6 I=K+1,MAXKK(JP)
        IF (NBASF4(I,1,JP) .EQ. 0) GO TO 6
        NBASF4(K,1,JP)=NBASF4(I,1,JP)
        GO TO 4
   6    CONTINUE
C
   4    DO 7 I=K-1,1,-1
        IF (NBASF4(I,2,JP) .EQ. 0) GO TO 7
        NBASF4(K,2,JP)=NBASF4(I,2,JP)
        GO TO 5
   7    CONTINUE
   5    CONTINUE
C POINT TO LAST FAMILY 4 BASIC VARIABLE:
        L4END(JP)=LBFST1(4,JP,1)+NBARF(4,JP,1)
  20    CONTINUE
C
      ENDIF
C POINTERS TO START & END OF FAMILY 6 (PHASE-INDEPENDENT):
      L6ST=LBFST1(6,1,1)+1
      L6END=LBFST1(6,1,1)+NBARF(6,1,1)
C
 100  RETURN
      END
C
C
C
C
C LEVEL 2      SUBROUTINE LOWER(C)
      SUBROUTINE LOWER(C)
C
C *** LOWER by JCM 3 Aug 92 ***
C
CX
CC 13C
CH Replaces any upper case letters in C by lower case.
C
      CHARACTER *(*) C
      COMMON /CHARS/LETUP(26),LETLOW(26),ISPCE,IDIGIT(10),ISMBOL(21)
      CHARACTER *1 LETUP,LETLOW,ISPCE,IDIGIT,ISMBOL
C
      L=LENGT(C)
      DO 1 I=1,L
      M=LETTER(C(I:I))
      IF (M .GT. 0) C(I:I)=LETLOW(M)
   1  CONTINUE
      RETURN
      END
C
C
C
C
C LEVEL 6      SUBROUTINE LPSCAL(N)
      SUBROUTINE LPSCAL(N)
C
C *** LPSCAL MK4 BY JCM AUG 89 ***
C
CH Deals with the Profile LSQ parameter SPHA, scale for this phase.
CA On entry N gives the required action:
CA   N=1 reads in an L SPHA card and records the scale factor for this phase
CA   N=3 applies a shift to a specific scale
CA   N=4 writes out a new L SPHA card to unit NEWIN
CA   N=5 deals with absence of L SPHA card
C
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /LREAD/ILREA(22,5),KOM18
      DIMENSION ILREAD(22)
      EQUIVALENCE (ILREAD(1),ILREA(1,1))
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
C
      GO TO (1,100,3,4,5) , N
C
   1  CALL RDREAL(SCALEP(JPHASE),7,IPT,80,IER)
      IF (IER .NE. 0) IERR=IERR+1
      WRITE (LPT,2000) JPHASE,SCALEP(JPHASE)
2000  FORMAT (/' Scale factor for phase',I4,' =',F10.4)
      GO TO 100
C
   3  CALL ADJUST(SCALEP(JPHASE))
      GO TO 100
C
C NEW L SPHA CARD:
   4  WRITE (NEWIN,2005) (SCALEP(JPHASE))
2005  FORMAT ('L SPHA',F10.5)
      GO TO 100
C
C N=5 - DEAL WITH NO SCAL CARDS:
   5  SCALEP(JPHASE)=1.0
      GO TO 100
C
C
      ENTRY LPSCA8(NV)
C RECORD THAT THIS PHASE'S SCALE IS VARIABLE NUMBER NV:
      KSCALP(JPHASE)=NV
      GO TO 100
C
C
      ENTRY LPSCA9
C RECORD THAT THIS PHASE'S SCALE IS FIXED:
      KSCALP(JPHASE)=0
C
 100  RETURN
      END
C
C
C
C
C LEVEL 9      SUBROUTINE LSETPR(PCXX,PFXX)
      SUBROUTINE LSETPR(PCXX,PFXX)
C
C *** LSETPR updated for MK4 by JCM 25 Jan 91 ***
C
CX
CC 6A
CH Set up specific LSQ problem - copy vocabulary to standard COMMON
CP The problem must have already been specified to the extent of:
CP    NFAM=number of families
CP    NGENPS(I,JPHASE)=number of genera in family I, phase JPHASE
CP    NSPCPS(I,JPHASE)=number of species in each genus of family I, phase JPHASE
CD Packs the LSPEC integers to 1 word, with phase and source, usually both
CD zero.
CD Copies both arrays LSPEC and LWORDS into standard arrays IWDSPC  and
CD LSQWD in /WDSPEC/ and /WORDS/.
CD Sets up pointers to starts of families of parameters.
CD Sets up the packing of IFAM, IGEN, ISPC, PHASE, SOURCE  into one integer
CD Sets up the permanent fix, vary and constraint lists
C
      EXTERNAL PFXX,PCXX
      EXTERNAL F2PARS
      EXTERNAL PRPARS
C%
C      CHARACTER *4 TEMWRD(%WORD%)
C%
C      DIMENSION ITMWRD(3,%WORD%)
      DIMENSION LPAK(5)
      COMMON /F2NAMS/F2NAME(40)
      CHARACTER *4 F2NAME
      COMMON /F2NUMS/NF2NUM(3,40)
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /LINKAG/NUMFV,NUMPAK,KKFV(200),KTYPFV(200),KSTFV(200),
     & KTIME(200),KUNPFV(5,30),NTIME,NUMCON,KKCON(500),AMCON(500),
     & KPTCON(201),KSTCON(200),KTPCON(200)
      COMMON /LSETDA/MFAM,MGEN,MSPC,LASTST
      COMMON /LSQPAK/KKPACK(10,3)
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRBLEM/NFAM,NGENPS(6,9),NSPCPS(6,9),
     & LF1SP(5),LF3SP(10,9,5),LVFST1(6,9,5),
     & LBFST1(6,9,5),NVARF(6,9,5),
     & NBARF(6,9,5),LF6SP(3,5)
      DIMENSION NGENS(6),NSPC(6)
      EQUIVALENCE (NGENS(1),NGENPS(1,1)),(NSPC(1),NSPCPS(1,1))
      COMMON /PRNAMS/PRNAME(14)
      CHARACTER *4 PRNAME
      COMMON /PRNUMS/NPRNUM(3,14)
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      COMMON /WDSPC/IWDNUM,IWDSPC(60)
      COMMON /WORDS/LSQWD(60)
      CHARACTER *4 LSQWD
C
C ONLY ENTRY IF SINGLE PHASE, OR FIRST ENTRY IF MULTIPHASE:
      IF (JPHASE .EQ. 1) THEN
        MFAM=0
        MGEN=0
        MSPC=0
C
C PREPARE FIX LIST AND CONSTRAINT LIST FOR CALLS OF ADDFIX, ADDCON
        NUMFV=0
        NUMPAK=0
        NUMCON=0
        KPTCON(1)=1
      ENDIF
C
C%
C      CALL ERRCHK(1,NFAM,%FAMS%,0,'LSQ families of parameters')
      CALL ERRCHK(1,NFAM,6,0,'LSQ families of parameters')
C
C STARTS OF FAMILIES OF PARAMETERS:
      IF (NFAM .GT. MFAM) MFAM=NFAM
      DO 1 I=1,NFAM
      IF (NGENPS(I,JPHASE) .GT. MGEN) MGEN=NGENPS(I,JPHASE)
      IF (NSPCPS(I,JPHASE) .GT. MSPC) MSPC=NSPCPS(I,JPHASE)
   1  CONTINUE
C
C IF LAST PHASE:
      IF (JPHASE .EQ. NPHASE) THEN
C SET UP PACKING OF IFAM,IGEN,ISPC,PHASE,SOURCE:
        LPAK(1)=MFAM
        LPAK(2)=MGEN
        LPAK(3)=MSPC
        LPAK(4)=NPHASE
        LPAK(5)=NSOURC
C THIS INITIALISES ALL SUBSEQUENT CALLS OF KPAK, KUNPAK
        L=3
        IF (MULONE) L=5
        CALL NPACK(N,LPAK,L,0,KKPACK)
C
C WORDS RELEVANT TO THIS PROBLEM FROM DATA INTO COMMON:
        KPHASE=0
        KSOURC=0
C SET UP VOCABULARY: FIRST, THE CORE FOR ALL STRUCTURE FACTOR LSQ:
        IWDNUM=0
C%
C        CALL VOCAB(F2NAME,NF2NUM,%F2PR%)
        CALL VOCAB(F2NAME,NF2NUM,40)
C
C THEN A DEFAULT PROFILE VOCABULARY:
C%
C        CALL VOCAB(PRNAME,NPRNUM,%PRPR%)
        CALL VOCAB(PRNAME,NPRNUM,14)
C
C ADD SPECIAL VOCABULARY LINKED TO PEAK FUNCTION:
        DO 3 JSOUR=1,NSOURC
        JSOURC=JSOUR
        KPHASE=0
        KSOURC=JSOURC
   3    CALL PFXX(1)
C
      ENDIF
 100  RETURN
      END
C
C
C
C
      BLOCK DATA PRPARS
      COMMON /PRNAMS/PRNAME(14)
      CHARACTER *4 PRNAME
      COMMON /PRNUMS/NPRNUM(3,14)
      DATA PRNAME/
     & 'PKFN','FAM4','FAM6',
     & 'EXTN','PROR','SPHA',
     & 'ZERO','PKCN','INTS','SIGS','GAMS',
     & 'SCAL','ABSC','BACK'/
      DATA NPRNUM/
     & 3,0,0, 4,0,0, 6,0,0,
     & 1,1,8, 1,1,9, 1,1,10,
     & 3,1,0, 3,2,0, 4,1,0, 4,2,0, 4,3,0,
     & 6,1,1, 6,2,0, 6,3,0/
      END
C
C
C
C
C LEVEL 6      SUBROUTINE LSSCAL(N)
      SUBROUTINE LSSCAL(N)
C
C *** LSSCAL MK4 by JCM Aug 89 ***
C
C DOES MOST OF THE DEALING WITH THE PARAMETER IN LSQ CALLED 'SCAL' FOR SCALE
C FACTORS.
C
** FOR THE MOMENT WE HAVE LOST N=0 - SO THERE MUST BE AN L SCAL CARD
C N=0 DEALS WITH THE INTRODUCTION OF A SINGLE SCALE FACTOR OF 1., TO BE REFINED,
C     IF NO L SCAL CARDS HAVE BEEN READ.
C N=1 READS IN AN L SCAL CARD AND RECORDS THE SCALE FACTORS
C N=2 DOES NOT FOR THE MOMENT EXIST.  IF IT DID, IT WOULD DO THE 'CALCULATE'
C     STEP, I.E. SEND OUT A CALCULATED VALUE TO USE IN THE REFINEMENT. SINCE
C     THIS IS ACTUALLY A TRIVIAL OPERATION, IT IS DONE IN THE VARIOUS
C     SUBR0UTINES 'CALCXX' RATHER THAN BY A SPECIAL CALL TO LSSCAL.
C N=3 APPLIES A SHIFT TO A SPECIFIC SCALE(ISPC)
C N=4 WRITES OUT A NEW L SCAL CARD
C N=-4 WRITES OUT A NEWLY GENERATED SCALE CARD (IF THERE HAD BEEN NONE AT ALL,
C      SO ONE HAD BEEN MADE
C
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /LREAD/ILREA(22,5),KOM18
      DIMENSION ILREAD(22)
      EQUIVALENCE (ILREAD(1),ILREA(1,1))
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
      IF (N .EQ. 0) THEN
        CALL ERRMES(3,1,'L SCAL')
        GO TO 100
      ENDIF
C
      GO TO (1,100,3,4) , N
C
C%
C   1  CALL RDNUMS(SCALES,7,%SORC%,NUM,IER)
   1  CALL RDNUMS(SCALES,7,5,NUM,IER)
      IF (IER .NE. 0) IERR=IERR+1
      IER=IERR
      IF (IER .NE. IERR) GO TO 100
C
      CALL MESS(LPT,1,'Scale factor(s) :')
      CALL PRILIS(SCALES,1,NUM)
      GO TO 100
C
C TAKE CARE ONLY TO APPLY THE SHIFT ONCE:
   3  IF (JPHASE .EQ. 1) CALL ADJUST(SCALES(JSOURC))
      GO TO 100
C
C NEW L SCAL CARD:
   4  WRITE (NEWIN,2005) (SCALES(J),J=1,NSOURC)
2005  FORMAT ('L SCAL',8F10.5)
** PROVISION FOR *S NEEDED
      GO TO 100
C
C
      ENTRY LSSCA8(NV)
C RECORD THIS SOURCE'S SCALE IS VARIABLE NUMBER NV:
      KSCALS(JSOURC)=NV
      GO TO 100
C
C
      ENTRY LSSCA9
C RECORD THIS SOURCE'S SCALE IS FIXED:
      KSCALS(JSOURC)=0
C
 100  RETURN
      END
C
C
C
C
C LEVEL 1      SUBROUTINE MATTOS(ALSQ,MATSZ)
      SUBROUTINE MATTOS(ALSQ,MATSZ)
C
C *** MATTOS updated by JCM 23 Jun 92 ***
C
C SPEEDED UP CAILS-TYPE VERSION OF  MATTOT
C
C ALL REFERENCE TO THE LSQ MATRIX, ALSQ, IS MADE THROUGH ROUTINES STARTING "MAT"
C THIS ENABLES ALSQ TO BE DIMENSIONED EVERYWHERE EXCEPT IN MAIN AS ALSQ(MATSZ)
C
C   MATTOT  ADDS IN CONTRIBUTIONS TO LSQ MATRIX AND RHS FOR THIS OBSERVATION
C
C%
C      DIMENSION ALSQ(MATSZ),MM(%BVAR%)

      INCLUDE 'PARAMS.INC'

      DIMENSION ALSQ(MATSZ),MM(400)
      EQUIVALENCE (MM(1),MATPNT(2))
      COMMON /DERBAS/DERIVB(400),LVARB
      COMMON /MATDAT/MATPNT(401),BLSQ(400)
      COMMON /OBSCAL/OBS,DOBS,GCALC,YCALC,DIFF,ICODE,SUMWD,NOBS,
     & IWGH(5),WTC(4),WT,SQRTWT,WDIFF,YBACK,YPEAK,YMAX,CSQTOT
      EQUIVALENCE (IWGHT,IWGH(1))
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRBLEM/NFAM,NGENPS(6,9),NSPCPS(6,9),
     & LF1SP(5),LF3SP(10,9,5),LVFST1(6,9,5),
     & LBFST1(6,9,5),NVARF(6,9,5),
     & NBARF(6,9,5),LF6SP(3,5)
      DIMENSION NGENS(6),NSPC(6)
      EQUIVALENCE (NGENS(1),NGENPS(1,1)),(NSPC(1),NSPCPS(1,1))
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END
      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
C
      IF (SIMUL) GO TO 100
      SQWDIF=SQRTWT*DIFF
C
C THIS ONLY WORKS IF THERE ARE NOT 2 CAIL PHASES, (& AT PRESENT IF THE CAIL
C PHASE IS AT THE END)
      DO 3 I=1,LBFST1(4,JPHASE,1)
   3  DERIVB(I)=SQRTWT*DERIVB(I)
      IF (KMAX.NE.0) THEN
        DO 4 I=NBASF4(KMIN,1,JPHASE),NBASF4(KMAX,2,JPHASE)
   4    DERIVB(I)=SQRTWT*DERIVB(I)
      ENDIF
      DO 9 I=L6ST,L6END
   9  DERIVB(I)=SQRTWT*DERIVB(I)
C
      DO 1 I=1,LBFST1(4,JPHASE,1)
      IR=MM(I)
      DO 2 J=I,LBFST1(4,JPHASE,1)
   2  ALSQ(IR+J)=ALSQ(IR+J)+DERIVB(I)*DERIVB(J)
      IF (KMAX.NE.0) THEN
        DO 5 J=NBASF4(KMIN,1,JPHASE),NBASF4(KMAX,2,JPHASE)
   5    ALSQ(IR+J)=ALSQ(IR+J)+DERIVB(I)*DERIVB(J)
      ENDIF
      DO 8 J=L6ST,L6END
   8  ALSQ(IR+J)=ALSQ(IR+J)+DERIVB(I)*DERIVB(J)
   1  BLSQ(I)=BLSQ(I)+SQWDIF*DERIVB(I)
C
      IF (KMAX.NE.0) THEN
        DO 6 I=NBASF4(KMIN,1,JPHASE),NBASF4(KMAX,2,JPHASE)
        IR=MM(I)
        DO 7 J=I,NBASF4(KMAX,2,JPHASE)
   7    ALSQ(IR+J)=ALSQ(IR+J)+DERIVB(I)*DERIVB(J)
        DO 10 J=L6ST,L6END
  10    ALSQ(IR+J)=ALSQ(IR+J)+DERIVB(I)*DERIVB(J)
   6    BLSQ(I)=BLSQ(I)+SQWDIF*DERIVB(I)
      ENDIF
C
      DO 11 I=L6ST,L6END
      IR=MM(I)
      DO 12 J=I,L6END
  12  ALSQ(IR+J)=ALSQ(IR+J)+DERIVB(I)*DERIVB(J)
  11  BLSQ(I)=BLSQ(I)+SQWDIF*DERIVB(I)
C
 100  RETURN
      END
C
C
C
C
C LEVEL 7      SUBROUTINE NWIND2
      SUBROUTINE NWIND2
C
C *** NWIND2 updated by JCM 20 Aug 92 ***
C
CX
CC 7B
CH Writes out a new Crystal Data File for the main program CELLSQ.
CP NWIND2 must be called in the context of CELLSQ, with an old Crystal
CP Data File held on the scratch unit number IO10.  A cycle of
CP LSQ refinement should have adjusted some of the parameters involved.
CD Writes out a new CDF with possibly changed values on the C card or
CD L PKCN, L ZERO or L THE2 cards.
C
CO Writes the updated file to unit NEWIN.
C
      CHARACTER *4 WORD
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /SCRACH/MESSAG,NAMFIL
      CHARACTER *80 ICARD,MESSAG*100,NAMFIL*100
      EQUIVALENCE (ICARD,MESSAG)
C
      CALL NEWCD
      ID=0
   1  ID=ID+1
      IF (ID .GT. NTOTAL(1)) GO TO 100
      READ(IO10,FMT=1000,REC=ID) ICARD
1000  FORMAT (A80)
      L=LETTER(ICARD(1:1))
      IF (L .EQ.3) THEN
C
C OUTPUT NEW C CARD WITH NEW VALUES:
        CALL CELNEW
        GO TO 1
      ELSE IF (L .EQ. 9) THEN
C
C OUTPUT NEW I CARD:
        CALL OTPUTI
        GO TO 1
      ELSE IF (L .EQ. 12) THEN
C
C IF 'L' IS IT ALSO 'PKCN', 'ZERO' OR 'THE2'?
        CALL RDWORD (WORD,ILEN,3,IPT,80,0,IER)
C NEW L PKCN CARD:
        IF (WORD .EQ. 'PKCN') THEN
          CALL PCTF01(4)
          GO TO 1
        ELSE IF (WORD .EQ. 'ZERO') THEN
C NEW L ZERO CARD:
          CALL ZEROPR(4)
          GO TO 1
C NEW L THE2 CARD:
        ELSE IF (WORD .EQ. 'THE2') THEN
          CALL THETA2(4)
          GO TO 1
        ENDIF
      ENDIF
C COPY UNCHANGED CARD:
      WRITE (NEWIN,2000) (ICARD(I:I),I=1,LENGT(ICARD))
2000  FORMAT (80A1)
      GO TO 1
C
 100  RETURN
      END
C
C
C
C
C LEVEL 9      SUBROUTINE NWINPR(PCXX,PFXX,MAGSHF)
      SUBROUTINE NWINPR(PCXX,PFXX,MAGSHF)
C
C *** NWINPR updated by PJB 1 Feb 1994 ***
C
CC 19B
CH Output updated Crystal Data file to unit NEWIN
C
CP All necessary shifts must have already been applied, say by APSHPR
CD Rereads all cards;  selects those which contain variables
CO Writes all new and unchanged cards to unit NEWIN, using calls to
CO parameter-specific routines
C
C
      EXTERNAL PCXX,PFXX,MAGSHF

      INCLUDE 'PARAMS.INC'

      CHARACTER *4 WORD,CHANGE(13)
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /F4PARS/NGEN4(9,5),F4VAL(3,MF4PAR),
     & F4PAR(3,MF4PAR),KF4PAR(3,MF4PAR),F4PESD(3,MF4PAR),KOM6
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /GRDBCK/IBACK,NBACK(5),ARGBAK(100,5),
     & BACKGD(100,5),KBCKGD(100,5),NBK,LBKD(20),ZBAKIN
      LOGICAL ZBAKIN
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PHAS0/INRLP0,ICDLP0,INRLP1,ICDLP1,NCDF0
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
      COMMON /SCRACH/MESSAG,NAMFIL
      CHARACTER *80 ICARD,MESSAG*100,NAMFIL*100
      EQUIVALENCE (ICARD,MESSAG)
      COMMON /SLAKDA/NSLAK(4),SLKSWD(4),SLAKWT(4),
     & CHISQD(4),ISLKTP,NSKTOT,KOM24
      COMMON /SLKGEO/NSTYP,BOBS(500),EOBS(500),IATM(500,2),
     & ISYM(500),ILAT(500),CELLTR(3,500),XSLAK(3,500),
     & COSIN(3,3),IABASE(500),NST1,SLONLY,TOSTAR(6,6),BCALC(500),
     & DERCEL(6,500),DERPOS(3,500,2),ITYPSK(500),INVBON(10,
     & 500),NINVB(500),INANG(100,3),INTOR(100,6),
     & DERBON(10),NVB(10),NUMBON,NTARNM,NUMANG,NUMTOR,KOM25
      LOGICAL SLONLY
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      DATA CHANGE/'TFAC','SCAL','RTYP','PKCN',
     & 'PKFN','ZERO','ATOM','BACK','ABSC','EXTN','PROR','TTHM','SPHA'/
C
      IF (SIMUL) GO TO 100
C OPEN NEW CD FILE:
      CALL NEWCD
C
C START RECORD COUNT IN IO10:
      ID=0
      JPHASE=1
      CALL PHMOVE(1,1)
C
   1  ID=ID+1
      IF (MULFAS .AND. ID .EQ. NCDF0+1) WRITE (NEWIN,2005)
      IF (ID .GT. NTOTAL(JPHASE)) THEN
        IF (JPHASE .EQ. NPHASE) GO TO 100
        WRITE (NEWIN,2005)
2005    FORMAT ('**')
        JPHASE=JPHASE+1
        CALL PHMOVE(1,JPHASE)
      ENDIF
      READ(IO10,REC=ID,FMT=1000) ICARD
1000  FORMAT(A80)
      L=LETTER(ICARD(1:1))
      IF (L .EQ.3) THEN
C OUTPUT NEW C CARD WITH NEW VALUES:
        CALL CELNEW
        GO TO 1
      ELSE IF (L .EQ. 12) THEN
C L CARD - CONSULT LIST OF WORDS INDICATING CARDS TO CHANGE
        CALL RDWORD(WORD,IWDLEN,3,IPT,80,0,IER)
        N=NCFIND(WORD,CHANGE,13)
        IF (N .EQ. 0) GO TO 2
C
        GO TO (21,22,23,24,25,26,27,28,29,30,31,32,33), N
C
      ELSE IF (L.EQ.1 .OR. L.EQ.6 .OR. L.EQ.20) THEN
C TREAT A, F AND T ALIKE:
C NOT IF CAIL/APES - THERE WILL BE NO STRUCTURE PARAMETERS:
        IF (CAIL .OR. APES) GO TO 2
        CALL F2NEW(L)
        GO TO 1
      ELSE IF (L .EQ. 17) THEN
C "Q" CARD:
        IF (.NOT. MAG) GO TO 2
        IF (CAIL .OR. APES) THEN
          CALL PROPAG(4,NEWIN)
        ELSE
          CALL MAGSHF(4)
        ENDIF
        GO TO 1
      ELSE IF (L .EQ. 9) THEN
C OUTPUT NEW I CARD:
        CALL OTPUTI
        GO TO 1
      ENDIF
      GO TO 2
C
C TFAC:
  21  CALL LLTFAC(4)
      GO TO 1
C
C SCAL:
  22  CALL LSSCAL(4)
      GO TO 1
C
C RTYP:
  23  MM=MODERR(JSOURC)
      IF (IABS(MM) .NE. 3) MM=ISIGN(1,MM)
      IF (TOF) THEN
        WRITE(NEWIN,2001) MM,ARGMIN(JSOURC),ARGMAX(JSOURC)
2001    FORMAT ('L RTYP',I5,2F10.2)
      ELSE
        WRITE (NEWIN,2002) MM,ARGMIN(JSOURC),ARGMAX(JSOURC),
     &  ARGSTP(JSOURC)
2002    FORMAT ('L RTYP',I5,3F10.3)
      ENDIF
      GO TO 1
C
C PKCN:
  24  CALL RDWORD(WORD,LEN,IPT,IPT,80,-1,IER)
      IF (WORD .EQ. 'TYPE') GO TO 2
      CALL PCXX(4)
** TEMPORARY - PFXX - IE PFALL - IGNORES ITS OWN 'TYPE' CARDS
      GO TO 1
C
C PKFN:
  25  CALL PFALL(4)
      GO TO 1
C
C ZERO:
  26  CALL ZEROPR(4)
      GO TO 1
C
C L ATOM
  27  CALL GEOMCO(3)
      GO TO 1
C
C L BACK
  28  IF (IBACK .LE. 0) GO TO 2
      CALL BACKPR(4)
      GO TO 1
C
C ABSC
  29  CALL ABCRPR(4)
      GO TO 1
C
C EXTN
  30  CALL EXCRPR(4)
      GO TO 1
C
C PROR
  31  CALL PREFOR(4)
      GO TO 1
C
C TTHM
  32  CALL TTHMLX(4)
      GO TO 1
C
C SPHA:
  33  CALL LPSCAL(4)
      GO TO 1
C
C COPY UNCHANGED CARD:
   2  WRITE (NEWIN,2000) (ICARD(I:I),I=1,LENGT(ICARD))
2000  FORMAT (80A1)
      GO TO 1
C
C
 100  CLOSE(NEWIN)
      END
C
C
C
C
C LEVEL 11       SUBROUTINE OUTTIC
      SUBROUTINE OUTTIC
C
C *** OUTTIC by JBF 17 June 93. ***
C
CH To write an ascii file of TIC marks for GENIE plots
CD Reads an I card for TICS followed by integer:
CD a non-zero integer requests TICs as amplitudes proportional
CD to calculated intensity in powder pattern. Default 0, amplitudes are +/- 10.
CD +ve for nuclear, -ve for magnetic.
C
      LOGICAL ONCARD
      CHARACTER *4 INEED
C%
C      DIMENSION IH(3),H(3),TEMREF(3,%REFS%),IORDER(%REFS%)
C%
C      DIMENSION TEMMUL(%REFS%),ARG(%REFS%),TF4P(6,%REFS%),TEMP(6)
C%
C      DIMENSION ARGN(%REFS%),ANT(%REFS%)
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
      COMMON /SCRACH/MESSAG,NAMFIL
      CHARACTER *80 ICARD,MESSAG*100,NAMFIL*100
      EQUIVALENCE (ICARD,MESSAG)
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      DATA INEED/'TICS'/
C
      MESSAG='TIC list'
      NAMFIL='.TIC'
      CALL OPNFIL(ITC,112)
      ITIC=0
C INTERPRET I CARD:
      IF (.NOT. ONCARD('I',INEED,A)) GO TO 2
C TICS RECOGNISED
      IF (NINT(A).NE.0) ITIC=1
    2 ESD = 0.1
      DO 1 KNOW=1,MAXKK(1)
      IF(ITIC .EQ. 0) THEN
        ATIC=10.
        IF (AIOBS(KNOW) .LT. 0.) ATIC= -10.
        WRITE (ITC,1000) AICALC(KNOW),ATIC,ESD
      ELSE
        WRITE (ITC,1000) AICALC(KNOW),AIOBS(KNOW),ESD
      ENDIF
    1 CONTINUE
 1000 FORMAT (F10.2,2(F12.1))
      RETURN
      END
C
C
C
C
C LEVEL 1      SUBROUTINE P0TEMP(L)
      SUBROUTINE P0TEMP(L)
C
C *** P0TEMP by JCM 23 Jan 92 ***
C
CH Sets or unsets phase 0 for L cards temporarily
C
      LOGICAL L
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /PHAS0/INRLP0,ICDLP0,INRLP1,ICDLP1,NCDF0
C
      IF (L) THEN
        INRLP1=INREA(12,1)
        ICDLP1=ICDN(12,1)
        INREAD(12)=INRLP0
        ICDNO(12)=ICDLP0
      ELSE
        INREAD(12)=INRLP1
        ICDNO(12)=ICDLP1
      ENDIF
      RETURN
      END
C
C
C
C
C LEVEL 10      SUBROUTINE PARSPR(MAGPAR)
      SUBROUTINE PARSPR(MAGPAR)
C
C *** PARSPR updated by PJB and JBF Mar 93 ***
C
CH Collect all parameter fix and vary and relate info for 1 phase PR LSQ
CA On entry MAGPAR is replaced by the name of the subroutine to deal with
CA species 13,14,15 of family 2.  If non-magnetic, these should not occur,
CA so MAGPAR=DUMMY.  For magnetic, MAGPAR=DOMAG (or MAGCNL from PARSPR).
CP On entry JPHASE and JSOURC should hold phase and source.
CP Type of refinement, RIET, CAIL, SAPS, APES 1, must be set in /REFIPR
C
      EXTERNAL MAGPAR
      DIMENSION ISPVEC(10)
C
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
C ABSORB EXISTING CONSTRAINTS ON CELL PARAMETERS DUE TO SYMMETRY:
      CALL CELREL(1,1,2)
C
C ABSORB EXISTING CONSTRAINTS ON STRUCTURE PARAMETERS DUE TO SYMMETRY:
      IF (RIET .OR. SAPS) THEN
C SPECIES OF X:
        ISPVEC(1)=1
C SPECIES OF B11:
        ISPVEC(2)=4
C SPECIES OF SCAT:
        ISPVEC(3)=10
        CALL F2RELA(2,ISPVEC)
      ELSE
C FIX ALL FAMILY 2 IF CAIL:
        CALL ADDFX5(2,0,0,JPHASE,1,5)
      ENDIF
C
C DEAL WITH ABSENCE OF L TFAC CARD:
      IFAM=1
      IGEN=1
      ISPC=1
      CALL LLTFAC(6)
C
C DEAL WITH ABSENCE OF L ABSC CARD:
      DO 1 JSOUR=1,NSOURC
      JSOURC=JSOUR
    1 CALL ABCRPR(6)
C
C DEAL WITH ABSENCE OF L EXTN CARD:
      CALL EXCRPR(6)
C
C DEAL WITH ABSENCE OF L PROR CARD:
      CALL PREFOR(6)
C
C IF XRAY, DEAL WITH ABSENCE OF 'L TTHM' CARD:
      IF (LX) CALL TTHMLX(6)
C
C DEAL WITH ALL MAGNETIC CONSTRAINTS IF APPROPRIATE:
      CALL MAGPAR(5)
C
      JSOURC=1
C IF MULTIPHASE, THERE IS A PHASE 0 WHICH MUST ALSO BE SCANNED:
      IF (MULFAS .AND. JPHASE .EQ. 1) THEN
        CALL P0TEMP(.TRUE.)
C READ ALL 'L RELA' CARDS:
        CALL RDRELA
C READ ALL 'L FUDG' CARDS:
        CALL FUDGIN
C READ ALL 'L FIX' AND 'L VARY' CARDS:
        CALL RDFV
        CALL P0TEMP(.FALSE.)
      ENDIF
C READ ALL 'L RELA' CARDS:
      CALL RDRELA
C READ ALL 'L FUDG' CARDS:
      CALL FUDGIN
C READ ALL 'L FIX' AND 'L VARY' CARDS:
      CALL RDFV
      RETURN
      END
C
C
C
C
C LEVEL 4      SUBROUTINE PAWLS(ALSQ,MATSZ,NSLTYP)
      SUBROUTINE PAWLS(ALSQ,MATSZ,NSLTYP)
C
C *** PAWLS updated by JCM 10 Mar 89 ***
C
CC 19B
CH Application of Pawley-type slack constraints
CH Called from MAIN program to add to the LSQ matrix once per cycle
C
CA ALSQ and MATSZ are handed all through LSQ programs in this fashion
CA      - they are needed here for the call of MATTOT
CA NSLTYP=which type of constraint - only 3 at present:
C
CP On entry, /SLAKDA/ should contain NSLAK(NSLTYP)=actual number of slack
CP constraints of this type present.
CP On entry, /PAWLPR/ holds the paramters specs for these constraint
CP in ISPSLK with weights in WTSLAK.
C
CD For each slack constraint in turn, proceeds exactly as though these are
CD      conventional observations and calculated functions;  makes basic
CD      variable derivatives, gets weights, and adds totals in to LSQ matrix.
C

      INCLUDE 'PARAMS.INC'
      LOGICAL PRNCYC
      DIMENSION ALSQ(MATSZ)
      COMMON /DERVAR/DERIVV(500),LVARV
      COMMON /F4PARS/NGEN4(9,5),F4VAL(3,MF4PAR),
     & F4PAR(3,MF4PAR),KF4PAR(3,MF4PAR),F4PESD(3,MF4PAR),KOM6
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /OBSCAL/OBS,DOBS,GCALC,YCALC,DIFF,ICODE,SUMWD,NOBS,
     & IWGH(5),WTC(4),WT,SQRTWT,WDIFF,YBACK,YPEAK,YMAX,CSQTOT
      EQUIVALENCE (IWGHT,IWGH(1))
      COMMON /PAWLPR/AKLO,AKHI,SLACK,STRKT,STRTOL,SLKTOL,ITST,
     & ISPSLK(2,1000),IGSLAK(1000),AMSLAK(2,1000),WTSLAK(1000),
     & WEELEV,KOM16
      LOGICAL STRKT
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SLAKDA/NSLAK(4),SLKSWD(4),SLAKWT(4),
     & CHISQD(4),ISLKTP,NSKTOT,KOM24
C
C OUT IF SIMULATION CYCLE:
      IF (SIMUL) GO TO 100
C
C OUT IF NOT TYPE 3
      IF (NSLTYP .NE. 3) GO TO 100
C
C OUT IF NO SLACK CONSTRAINTS:
      IF (NSLAK(NSLTYP) .EQ. 0) GO TO 100
C
C HEADING FOR PRINTING IF REQUESTED:
      IF (PRNCYC(8)) THEN
        CALL MESS(LPT,1,'  Slack Constraints')
        CALL MESS(LPT,1,'  No.   Obs      Calc      Diff      Weight')
      ENDIF
C
C FOR NOW ONLY TYPE 3,  PAWLEY SLACK CONSTRAINTS FROM CAIL OR SAPS:
C COUNT ALL SLACK CONSTRAINTS:
      DO 1 ISK=1,NSLAK(NSLTYP)
C
C CLEAR WHOLE DERIVATIVE VECTOR - ONLY A FEW ITEMS WILL BE FILLED BY
C ANY PARTICULAR CONSTRAINT:
*** SO POSSIBLY WE WANT TO ADD 3 ITEMS TO THE LSQ MATRIX AND 1 TO THE RHS
*** DIRECTLY, RATHER THAN PRETEND THAT THESE ARE OBSERVATIONS ***
C
C ^^^^^ THE FOLLOWING SECTION NEEDS ATTENTION
C ^^^^^ WE COULD ALSO DO YCALC = F1/F2 -A1/A2 I.E. CONSTRAIN THE SIG/GAM RATIO
      DO 221 LV=1,LVARV
 221  DERIVV(LV)=0.
      IG=IGSLAK(ISK)
      YCALC=AMSLAK(IG,ISK)*F4PAR(IG,ISPSLK(1,ISK))
     & -AMSLAK(2,ISK)*F4PAR(IG,ISPSLK(2,ISK))
      DERIVV(KF4PAR(IG,ISPSLK(1,ISK)))=AMSLAK(1,ISK)
      DERIVV(KF4PAR(IG,ISPSLK(2,ISK)))=-AMSLAK(2,ISK)
C
      CALL RELATE
      OBS=YCALC
      DIFF=0.
C
C WEIGHT
C FOR NOW, EXTRA WEIGHT IS UNITY:
  20  SLAKWT(NSLTYP)=1.
      WT=WTSLAK(ISK)*SLAKWT(NSLTYP)*SLAKWT(NSLTYP)
      SQRTWT=SQRT(WT)
      WDIFF=SQRTWT*DIFF
      IF (PRNCYC(8)) WRITE(LPT,2001) ISK,OBS,YCALC,DIFF,WTSLAK(ISK)
2001  FORMAT (1X,I4,F10.4,F10.4,F10.5,G12.4)
      CALL MATTOT(ALSQ,MATSZ)
C
C ADD IN  SLACK CONSTRAINT STATISTICS:
      ISLKTP=NSLTYP
      CALL RFACS(4)
   1  CONTINUE
C PRINT SLACK CONSTRAINT STATISTICS:
      CALL RFACS(5)
 100  RETURN
      END
C
C
C
C
C LEVEL 7      SUBROUTINE PCXX(N)
      SUBROUTINE PCXX(N)
C
C **** PCXX by JCM 25 Apr 90 ***
C
CH An explicit routine to cater for multisource peak centres
C
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
C AT PRESENT, EACH PEAK CENTRE TYPE IS 1:
      IF (TOF) CALL PCTF01(N)
      IF (CN.OR.SR.OR.LX) CALL PCCN01(N)
C
C	NEXT LINE 'IF (LX) CALL PCLX01(N)' INTENDED FOR
C	MULTIPLE LAMBDA STUFF.  COMMENTED OUT FOR THE MO, JUNE99
C      IF (LX) CALL PCLX01(N)
C
      GO TO 100
C
C
      ENTRY PCXX8(NP,NV)
C SET PEAK CENTRE PARAMETER NP IS VARIABLE NV:
      KPCNSP(NP,JPHASE,JSOURC)=NV
      GO TO 100
C
C
      ENTRY PCXX9
C SET ALL PEAK CENTRE PARAMETERS FIXED:
      DO 9 JP=1,NPHASE
      DO 9 JS=1,NSOURC
      DO 9 I=1,NPKCSP(JP,JS)
   9  KPCNSP(I,JP,JS)=0
      GO TO 100
C
 100  RETURN
      END
C
C
C
C
C LEVEL 6      SUBROUTINE PFALL(N)
      SUBROUTINE PFALL(N)
C
C *** PFALL updated by JCM 24 Jan 91 ***
C
CH Multiple entry routine to deal with aspects of L PKFN cards common
CH to all peak function types
CA On entry N=1,3 or 4 (as a relic from PFXX entries)
CA     N=1 means interpret the L PKFN card in ICARD
CA     N=3 means apply a shift to a parameter of genus IGEN, species ISPC
CA     N=4 means write out to unit NEWIN a new L PKFN card
CP For N=1 or 4:
CP The card has already been read into /SCRACH/
CP The array PWD holds the allowed vocabulary
CP NPKGEN(JPHASE,JSOURC) holds the total number of words which are names
CP for family 3 genera, and also words to be found after L PKFN.
CD For N=1:
CD Given a card in /SCRACH/ which starts L PKFN, read the remaining  information
CD For N=3:
CD Applies shift (in SHIFT in /NEWOLD/) to peak function parameter in
CD PKFNSP, using genus and species from /NEWOLD/
CD For N=4:
CD Given a card in /SCRACH/ which starts L PKFN, reads the next word to
CD decide the type of card, then writes a new card to unit NEWIN.
CN Used to be entries 1,3,4 of PFXX
C

      INCLUDE 'PARAMS.INC'
      CHARACTER *4 WORD
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END
      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /PWORDS/PWD(10,9,5)
      CHARACTER *4 PWD
      COMMON /SCRACH/MESSAG,NAMFIL
      CHARACTER *80 ICARD,MESSAG*100,NAMFIL*100
      EQUIVALENCE (ICARD,MESSAG)
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      DIMENSION ATEMP(6)
C
      GO TO (1,100,3,4) , N
C
C READ NEXT WORD ON CARD (ASSUMES THAT "L PKFN" HAS NO EXTRA SPACES):
   1  CALL RDWORD(WORD,IWDLEN,8,IPT,80,0,IER)
      IF (WORD .EQ. 'TYPE') GO TO 100
      IF (WORD .EQ. 'LIMS') THEN
        CALL RDREAL(TOLR(1,JSOURC),IPT,IPT,80,IER)
        NO=1
        DO 8 I=1,NO
        IF (TOLR(I,JSOURC) .LE. 1.) THEN
          WRITE (LPT,2008) TOLR(I,JSOURC)
2008      FORMAT (/' Peak limits at ',F6.3,' of peak height')
        ELSE
          WRITE (LPT,2009) TOLR(I,JSOURC)
2009      FORMAT (/' Peak limits at ',F6.1,
     &    ' full widths at half maximum')
        ENDIF
   8    CONTINUE
        GO TO 100
      ENDIF
C
      IF (WORD .EQ. 'NFFT') THEN
        CALL RDINTG(NFFT,IPT,IPT,80,IER)
        WRITE (LPT,2007) NFFT
2007    FORMAT (/' Number of fast Fourier transforms =',I2)
        GO TO 100
      ENDIF
C
      L=NCFIND(WORD,PWD(1,JPHASE,JSOURC),NPKGEN(JPHASE,JSOURC))
      IF (L .LE. 0) THEN
        CALL ERRCH2(WORD,2,'word','after PKFN not recognised')
        GO TO 100
      ENDIF
C
C READ ALL REMAINING NUMBERS ON CARD - SETS NUM TO BE HOW MANY:
C++      CALL RDREAL(TOLER(L,JPHASE,JSOURC),IPT,IPT,80,IER)
      CALL RDNUMS(ATEMP,IPT,7,NUM,IER)
      DO 23 I=1,NUM
  23  PKFNSP(L,I,JPHASE,JSOURC)=ATEMP(I)
      NPKFSP(L,JPHASE,JSOURC)=NUM
C
C PRINT VALUES:
      WRITE (LPT,2000) WORD,NUM,
     & (ATEMP(I),I=1,NUM)
2000  FORMAT (/' Peak Descriptor ',A4,' - ',I3,
     & ' parameters:',6F10.4)
      GO TO 100
C
C APPLY SHIFT:
   3  CALL ADJUST(PKFNSP(IGEN-2,ISPC,JPHASE,JSOURC))
      GO TO 100
C
C WRITE NEW L PKFN CARD TO UNIT NEWIN, GIVEN OLD CARD IN /SCRACH:
   4  CALL RDWORD(WORD,IWDLEN,8,IPT,80,0,IER)
      L=NCFIND(WORD,PWD(1,JPHASE,JSOURC),NPKGEN(JPHASE,JSOURC))
      IF  (L .EQ. 0) THEN
        WRITE (NEWIN,2002) (ICARD(I:I),I=1,LENGT(ICARD))
2002    FORMAT (80A1)
      ELSE
        NUM=NPKFSP(L,JPHASE,JSOURC)
        WRITE (NEWIN,2001) WORD,
     &  (PKFNSP(L,I,JPHASE,JSOURC),I=1,NUM)
*** NEEDS *S IF MULTISOURCE
2001    FORMAT ('L PKFN ',A4,6F10.4)
      ENDIF
      GO TO 100
C
C
      ENTRY PFALL8(NG,NS,NV)
C SET PARAMETER OF PEAK FUNCTION TO BE VARIABLE NV:
      KPFNSP(NG-2,NS,JPHASE,JSOURC)=NV
      GO TO 100
C
C
      ENTRY PFALL9
C SET ALL PARAMETERS OF PEAK FUNCTION TO BE FIXED:
      DO 9 JP=1,NPHASE
      DO 9 JS=1,NSOURC
      DO 9 I=1,NPKGEN(JP,JS)
      DO 9 J=1,NPKFSP(I,JP,JS)
   9  KPFNSP(I,J,JP,JS)=0
      GO TO 100
C
 100  RETURN
      END
C
C
C
C
C LEVEL 8      SUBROUTINE PFXX(N)
      SUBROUTINE PFXX(N)
C
C **** PFXX updated by JCM 23 Feb 93 ***
C
CH An explicit routine to cater for multisource peak functions
C
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
   1  IF (TOF) THEN
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 1) CALL PFTF01(N)
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 2) CALL PFTF02(N)
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 3) CALL PFTF03(N)
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 4) CALL PFTF04(N)
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 5) CALL PFTF05(N)
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 8) CALL PFTF08(N)
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 92) CALL PFTF92(N)
      ELSE IF (CN) THEN
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 1) CALL PFCN01(N)
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 2) CALL PFCN03(N)
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 3) CALL PFCN03(N)
      ELSE IF (LX) THEN
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 1) CALL PFCN01(N)
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 2) CALL PFCN03(N)
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 3) CALL PFCN03(N)
      ELSE IF (SR) THEN
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 1) CALL PFCN01(N)
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 2) CALL PFCN03(N)
        IF (NPFSOU(JPHASE,JSOURC) .EQ. 3) CALL PFCN03(N)
      ENDIF
      RETURN
      END
C
C
C
C LEVEL 1      SUBROUTINE PHCINI(KOMM,N)
      SUBROUTINE PHCINI(KOMM,N)
C
C *** PHCINI BY JCM 6 JUL 87 ***
C
CH Initialises COMMON equivalanced to KOMM by finding its end in N
C
CA On entry KOMM is the array equivalenced to the required COMMON
CA On exit  N is set to point to the last element of KOMM
C
      DIMENSION KOMM(1)
C
      I=0
   2  N=-42
   1  I=I+1
      IF (KOMM(I) .NE. -42) GO TO 1
      N=I
      IF (KOMM(I) .NE. I) GO TO 2
C
      RETURN
      END
C
C
C
C
C LEVEL 1      SUBROUTINE PHFIND(KOMM,N,ISCR)
      SUBROUTINE PHFIND(KOMM,N,ISCR)
C
C *** PHFIND BY JCM 6 JUL 87 **
C
CH Read COMMON block whose contents are equivalenced to KOMM from unit ISCR
C
CA KOMM is an array which has been equivalenced to the entire required
CA   COMMON block.
CA N is the actual number of numbers to transfer
CA ISCR is the number of the unit from which to read KOMM
CA      assumed positioned and reading sequentially
CP A call of PHLOSE must have put the COMMON on to unit ISCR first.
C
      DIMENSION KOMM(N)
C
      READ (ISCR) KOMM
      RETURN
      END
C
C
C
C
C LEVEL 1      SUBROUTINE PHLOSE(KOMM,N,ISCR)
      SUBROUTINE PHLOSE(KOMM,N,ISCR)
C
C *** PHLOSE BY JCM 6 JUL 87 **
C
CH Write COMMON block whose contents are equivalenced to KOMM to unit ISCR
C
CA KOMM is an array which has been equivalenced to the entire required
CA   COMMON block.
CA N is the actual number of numbers to transfer
CA ISCR is the number of the unit to which to write KOMM
C
      DIMENSION KOMM(N)
C
      WRITE (ISCR) KOMM
      RETURN
      END
C
C
C
C
C LEVEL 5      SUBROUTINE PHMOVE(IO,N)
      SUBROUTINE PHMOVE(IO,N)
C
C *** PHMOVE BY JCM 7 FEB 88 ***
C
CH Initialise, write out or read back whole/part phase number N
CA On entry IO =0 for initialise phase moving
CA               -2 for write out phase N, just after reading it from
CA                  the crystal data file, and adjust NATOM etc
CA               -1 for write out phase N
CA                1 for read back phase N, readjust NATOM etc, and set IPHASE=N
CA           N is the required phase number.
C

      INCLUDE 'PARAMS.INC'
      COMMON /ATNAM/ATNAME(150),ATNA(150,9)
      CHARACTER *4 ATNA,ATNAME
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
C
      COMMON /ANISO/ATF(6,50),KATF(6,50),IAPT(150),
     & IATYP(50),KOM1
      DIMENSION KOMM1 (1)
      EQUIVALENCE (KOMM1 (1),ATF(1,1 ))           
      COMMON /ANSCAT/NAMODE(20),FDASH(20),KOM2
      COMPLEX FDASH
      DIMENSION KOMM2 (1)
      EQUIVALENCE (KOMM2 (1),NAMODE(1 ))          
      COMMON /CELFIX/IPTCEL(6),AMCELL(6),NCELF,NCELG,NCELS,KOM3
      DIMENSION KOMM3 (1)
      EQUIVALENCE (KOMM3 (1),IPTCEL(1))           
      COMMON /CELPAR/CELL(3,3,2),V(2),ORTH(3,3,2),CPARS(6,2),KCPARS(6),
     & CELESD(6,6,2),CELLSD(6,6),KOM4
      DIMENSION KOMM4 (1)
      EQUIVALENCE (KOMM4 (1),CELL(1,1,1))         
      COMMON /FORMDA/NFORMF(150),MODE(20),NT(20),F(40,20),
     & S(40,20),CMULT(20),KCMULT(150),NBAKF(20),
     & NUMFNM,KOM7
      DIMENSION KOMM7 (1)
      EQUIVALENCE (KOMM7 (1),NFORMF(1  ))         
      COMMON /FORMD2/NBKF(20,9),NMFNM(9)
      COMMON /FRIED/FRIEDL,KOM8
      LOGICAL FRIEDL
      DIMENSION KOMM8 (1)
      EQUIVALENCE (KOMM8 (1),FRIEDL)              
      COMMON /FUNIT/NASYM,ASYM(3,3),EDGE(3,3),ANG(3),NMUL,KOM10
      DIMENSION KOMM10(1)
      EQUIVALENCE (KOMM10(1),NASYM)               
      COMMON /F4PARS/NGEN4(9,5),F4VAL(3,MF4PAR),
     & F4PAR(3,MF4PAR),KF4PAR(3,MF4PAR),F4PESD(3,MF4PAR),KOM6
      DIMENSION KOMM6 (1)
      EQUIVALENCE (KOMM6 (1),NGEN4(1,1))          
      COMMON /GUNIT/MARK(3,2),BSYM(3,3),IBOX,KOM11
      DIMENSION KOMM11(1)
      EQUIVALENCE (KOMM11(1),MARK(1,1))           
      COMMON /HKLGEN/STEP(3,3),PT(3,3),VECEND(3,3),PRPT(3,3),
     & NPRIM(2,2),NP,LFAC(2),MCOUNT(2),KOM5
      DIMENSION KOMM5 (1)
      EQUIVALENCE (KOMM5 (1),STEP(1,1))           
      COMMON /LREAD/ILREA(22,5),KOM18
      DIMENSION ILREAD(22)
      EQUIVALENCE (ILREAD(1),ILREA(1,1))
      DIMENSION KOMM18(1)
      EQUIVALENCE (KOMM18(1),ILREA(1 ,1))         
      COMMON /MAGDAT/NMAG,MAGAT(150),JMAGAT(10),NMFORM(10),
     & ANGM(4,10),KANGM(4,10),SMOD(2,10),
     & KSMOD(2,10),PHIH(4,10),KPHIH(4,10),
     & LPHI(4,10),NPHI(10),TPTAB(25,10),
     & IPTAB(25,10),SPIND(3,3,2,10),KOM19
      DIMENSION KOMM19(1)
      EQUIVALENCE (KOMM19(1),NMAG)                
      COMMON /NSYM/NOP,NCENT,NOPC,NLAT,NGEN,CENTRC,KOM13
      LOGICAL CENTRC
      DIMENSION KOMM13(1)
      EQUIVALENCE (KOMM13(1),NOP)                 
      COMMON /NTITL/NTITLE,KOM14
      DIMENSION KOMM14(1)
      EQUIVALENCE (KOMM14(1),NTITLE)              
      COMMON /OMITPR/MIS,AMISS(3,100),KOM12
      DIMENSION KOMM12(1)
      EQUIVALENCE (KOMM12(1),MIS)                 
      COMMON /OVER/ITFAC,OTFAC(10),KOTFAC(10),NTFAC,JTFAC,KOM15
      EQUIVALENCE (TFAC,OTFAC(1)),(KTFAC,KOTFAC(1))
      DIMENSION KOMM15(1)
      EQUIVALENCE (KOMM15(1),ITFAC)               
      COMMON /PAWLPR/AKLO,AKHI,SLACK,STRKT,STRTOL,SLKTOL,ITST,
     & ISPSLK(2,1000),IGSLAK(1000),AMSLAK(2,1000),WTSLAK(1000),
     & WEELEV,KOM16
      LOGICAL STRKT
      DIMENSION KOMM16(1)
      EQUIVALENCE (KOMM16(1),AKLO)                
      COMMON /POSNS/NATOM,X(3,150),KX(3,150),AMULT(150),
     & TF(150),KTF(150),SITE(150),KSITE(150),
     & ISGEN(3,150),SDX(3,150),SDTF(150),SDSITE(150),KOM17
      DIMENSION KOMM17(1)
      EQUIVALENCE (KOMM17(1),NATOM)               
      COMMON /POSNS2/NATO(9)
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
      DIMENSION KOMM23(1)
      EQUIVALENCE (KOMM23(1),REFH(1,1    ))       
      COMMON /SATELL/PROP(3),KPROP(3),KSTAB(24),NKSTAR,IPROP,FKSTAR,
     & NKC,KCENT,INCOM,KOM21
      LOGICAL INCOM
      DIMENSION KOMM21(1)
      EQUIVALENCE (KOMM21(1),PROP(1))             
      COMMON /SLAKDA/NSLAK(4),SLKSWD(4),SLAKWT(4),
     & CHISQD(4),ISLKTP,NSKTOT,KOM24
      DIMENSION KOMM24(1)
      EQUIVALENCE (KOMM24(1),NSLAK(1))            
      COMMON /SLKGEO/NSTYP,BOBS(500),EOBS(500),IATM(500,2),
     & ISYM(500),ILAT(500),CELLTR(3,500),XSLAK(3,500),
     & COSIN(3,3),IABASE(500),NST1,SLONLY,TOSTAR(6,6),BCALC(500),
     & DERCEL(6,500),DERPOS(3,500,2),ITYPSK(500),INVBON(10,
     & 500),NINVB(500),INANG(100,3),INTOR(100,6),
     & DERBON(10),NVB(10),NUMBON,NTARNM,NUMANG,NUMTOR,KOM25
      LOGICAL SLONLY
      DIMENSION KOMM25(1)
      EQUIVALENCE (KOMM25(1),NSTYP)               
      COMMON /SYMDA/SYM(3,3,24),TRANS(3,24),ALAT(3,4),
     & ORIGIN(3),KOM26
      DIMENSION KOMM26(1)
      EQUIVALENCE (KOMM26(1),SYM(1,1,1 ))         
      COMMON /SYMMAG/MTSYM(25),MSTAB(24),NMSYM,NFAC,OTRSYM(3,3,25),
     & MTYP,NDOM,FERO,FERA,HELI,AMOD,ANTI,MODUL,KOM20
      LOGICAL FERO,FERA,HELI,AMOD,ANTI,MODUL
      DIMENSION KOMM20(1)
      EQUIVALENCE (KOMM20(1),MTSYM(1 ))           
      COMMON /SYMTAB/MULTAB(24,24),INVERS(24),
     & NORD(24),IGEN(3),KOM22
      DIMENSION KOMM22(1)
      EQUIVALENCE (KOMM22(1),MULTAB(1 ,1 ))       
C
      COMMON /FONAM/FONA(20,9),FONAME(20)
      CHARACTER *4 FONAME,FONA
      COMMON /TITLE/ITITLE
      CHARACTER *80 ITITLE
C
C IF NOT ACTUALLY MULTIPHASE, EXIT:
      IF (.NOT. MULFAS) GO TO 100
C
C BRANCH ON WRITE, INITIALISE OR READ:
      IF (IO .EQ. 0) THEN
C
C INITIALISE:
C ALL NUMBER COMMON:
        CALL PHCINI(KOMM1,KOM1)
        CALL PHCINI(KOMM2,KOM2)
        CALL PHCINI(KOMM3,KOM3)
        CALL PHCINI(KOMM4,KOM4)
        CALL PHCINI(KOMM5,KOM5)
        CALL PHCINI(KOMM6,KOM6)
        CALL PHCINI(KOMM7,KOM7)
        CALL PHCINI(KOMM8,KOM8)
        CALL PHCINI(KOMM10,KOM10)
        CALL PHCINI(KOMM11,KOM11)
        CALL PHCINI(KOMM12,KOM12)
        CALL PHCINI(KOMM13,KOM13)
        CALL PHCINI(KOMM14,KOM14)
        CALL PHCINI(KOMM15,KOM15)
        CALL PHCINI(KOMM16,KOM16)
        CALL PHCINI(KOMM17,KOM17)
        CALL PHCINI(KOMM18,KOM18)
        CALL PHCINI(KOMM19,KOM19)
        CALL PHCINI(KOMM20,KOM20)
        CALL PHCINI(KOMM21,KOM21)
        CALL PHCINI(KOMM22,KOM22)
        CALL PHCINI(KOMM23,KOM23)
        CALL PHCINI(KOMM24,KOM24)
        CALL PHCINI(KOMM25,KOM25)
        CALL PHCINI(KOMM26,KOM26)
C
C   ALL CHARACTER COMMON IS MOVED AROUND BY EXPLICIT NAME.
C
C SET UP THE UNITS ON WHICH TO DUMP EACH PHASE:
        DO 1 I=1,NPHASE
   1    NPHUNI(I)=NOPFIL(1005)
        GO TO 100
      ENDIF
C
C READ PHASE N OR WRITE PHASE N:
C SET ISCR = UNIT NUMBER FOR PHASE - SEQUENTIAL, UNFORMATTED
      ISCR=NPHUNI(N)
C BRANCH ON READ/WRITE:
      IF (IO .LT. 0) GO TO 2
C
C IF ALREADY THERE, EXIT:
      IF (N .EQ. IPHASE) GO TO 100
C
C READ IN ALL COMMONS IN SEQUENCE:
C
C FULL PHASE SWOP:
      READ (ISCR) ITITLE
      CALL PHFIND(KOMM1,KOM1,ISCR)
      CALL PHFIND(KOMM2,KOM2,ISCR)
      CALL PHFIND(KOMM3,KOM3,ISCR)
      CALL PHFIND(KOMM4,KOM4,ISCR)
      CALL PHFIND(KOMM5,KOM5,ISCR)
      CALL PHFIND(KOMM6,KOM6,ISCR)
      CALL PHFIND(KOMM7,KOM7,ISCR)
      CALL PHFIND(KOMM8,KOM8,ISCR)
      CALL PHFIND(KOMM10,KOM10,ISCR)
      CALL PHFIND(KOMM11,KOM11,ISCR)
      CALL PHFIND(KOMM12,KOM12,ISCR)
      CALL PHFIND(KOMM13,KOM13,ISCR)
      CALL PHFIND(KOMM14,KOM14,ISCR)
      CALL PHFIND(KOMM15,KOM15,ISCR)
      CALL PHFIND(KOMM16,KOM16,ISCR)
      CALL PHFIND(KOMM17,KOM17,ISCR)
      CALL PHFIND(KOMM18,KOM18,ISCR)
      CALL PHFIND(KOMM19,KOM19,ISCR)
      CALL PHFIND(KOMM20,KOM20,ISCR)
      CALL PHFIND(KOMM21,KOM21,ISCR)
      CALL PHFIND(KOMM22,KOM22,ISCR)
      CALL PHFIND(KOMM23,KOM23,ISCR)
      CALL PHFIND(KOMM24,KOM24,ISCR)
      CALL PHFIND(KOMM25,KOM25,ISCR)
      CALL PHFIND(KOMM26,KOM26,ISCR)
C
C A NEW BIT WHICH I HOPE IS RIGHT - SET UP SINGLE PHASE ITEMS:
      NATOM=NATO(N)
      DO 19 I=1,NATOM
  19  ATNAME(I)=ATNA(I,N)
      NUMFNM=NMFNM(N)
      DO 20 I=1,NUMFNM
      FONAME(I)=FONA(I,N)
  20  NBAKF(I)=NBKF(I,N)
C AND DO MAGNETIC PHASES (JBF 2-8-94)
      MAG=PHMAG(N)
      FIXED=(.NOT. MAG .OR. IPROP .LE. 0)
C OK FOR THE MOMENT, BUT WE COULD SWAP LESS COMMON IF .NOT. MAG
      CALL LOGPHA(N)
      IPHASE=N
      GO TO 101
C
C WRITE PHASE N:
   2  WRITE (ISCR) ITITLE
      CALL PHLOSE(KOMM1,KOM1,ISCR)
      CALL PHLOSE(KOMM2,KOM2,ISCR)
      CALL PHLOSE(KOMM3,KOM3,ISCR)
      CALL PHLOSE(KOMM4,KOM4,ISCR)
      CALL PHLOSE(KOMM5,KOM5,ISCR)
      CALL PHLOSE(KOMM6,KOM6,ISCR)
      CALL PHLOSE(KOMM7,KOM7,ISCR)
      CALL PHLOSE(KOMM8,KOM8,ISCR)
      CALL PHLOSE(KOMM10,KOM10,ISCR)
      CALL PHLOSE(KOMM11,KOM11,ISCR)
      CALL PHLOSE(KOMM12,KOM12,ISCR)
      CALL PHLOSE(KOMM13,KOM13,ISCR)
      CALL PHLOSE(KOMM14,KOM14,ISCR)
      CALL PHLOSE(KOMM15,KOM15,ISCR)
      CALL PHLOSE(KOMM16,KOM16,ISCR)
      CALL PHLOSE(KOMM17,KOM17,ISCR)
      CALL PHLOSE(KOMM18,KOM18,ISCR)
      CALL PHLOSE(KOMM19,KOM19,ISCR)
      CALL PHLOSE(KOMM20,KOM20,ISCR)
      CALL PHLOSE(KOMM21,KOM21,ISCR)
      CALL PHLOSE(KOMM22,KOM22,ISCR)
      CALL PHLOSE(KOMM23,KOM23,ISCR)
      CALL PHLOSE(KOMM24,KOM24,ISCR)
      CALL PHLOSE(KOMM25,KOM25,ISCR)
      CALL PHLOSE(KOMM26,KOM26,ISCR)
      IF (IO .EQ. -2) THEN
C INITIAL ENTRY - PUT IN PLACE UNCHANGING VECTORS WHICH ARE PHASE DEPENDENT:
        NATO(N)=NATOM
        DO 9 I=1,NATOM
   9    ATNA(I,N)=ATNAME(I)
        NMFNM(N)=NUMFNM
        DO 10 I=1,NUMFNM
        FONA(I,N)=FONAME(I)
  10    NBKF(I,N)=NBAKF(I)
      ENDIF
C
 101  REWIND ISCR
 100  RETURN
      END
C
C
C
C
C
C

C
C
C LEVEL 8      SUBROUTINE PREFOR(N)
      SUBROUTINE PREFOR(N)
C
C *** PREFOR by WIFD 10 Jun 1987 ***
C
C MULTIPLE ENTRY ROUTINE TO DEAL WITH ALL ASPECTS OF THE PREFERRED
C ORIENTATION CORRECTION
C FOR SINGLE FRAME TIME OF FLIGHT LSQ ("TOF").
C
      DIMENSION REFHT(3,48),PHASES(48)
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PREORI/NPRTYP,PRFDIR(3),PRFLEN,PRFPAR,KPRFPR,PRFCOR,DERPRQ
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
C
      GO TO (1,2,3,4,5,6) , N
C
C HAVE IN COMM0N /SCRACH/ A CARD STARTING 'L PROR' - READ REST:
   1  CALL RDINTG(NPRTYP,7,IPT,80,IER)
      IF (NPRTYP .EQ. 0) THEN
        CALL MESS(LPT,1,'No preferred orientation')
        GO TO 50
      ENDIF
      CALL RDREAL(PRFPAR,IPT,IPT,80,IER)
      WRITE (LPT,2000) PRFPAR
2000  FORMAT (/' Preferred orientation coefficient=',F12.4)
C READ ALL REMAINING NUMBERS ON CARD - SETS NUM TO BE HOW MANY:
      CALL GMZER(PRFDIR,1,3)
      CALL RDNUMS(PRFDIR,IPT,3,NUM,IER)
      WRITE (LPT,2010) (PRFDIR(I),I=1,3)
2010  FORMAT (' Preferred orientation direction=',3F4.0)
      PRFLEN=VCTMOD(1.,PRFDIR,2)
      GO TO 100
C
C CALCULATE FUNCTION WHICH WILL BE PART OF P1 IN CALPR
C AND ITS DERIVATIVE
   2  IF (NPRTYP .EQ. 0) GO TO 100
      CALL SYMREF(REFH(1,KNOW),REFHT,IREFT,PHASES)
      PRFCOR=0.
      DERPRQ=0.
      REFLEN= VCTMOD(1.,REFH(1,KNOW),2)
      ATEM= 1./(REFLEN*PRFLEN)
      DO 20 IR=1,IREFT
      SPRD=SCLPRD(PRFDIR,REFHT(1,IR),2)
      CSQA= (ATEM*SPRD)**2
      SSQA=1.-CSQA
      BTEM=CSQA*PRFPAR**2+SSQA/PRFPAR
      BTEM=1./SQRT(BTEM)
      PRFCOR=PRFCOR+BTEM**3
      DERPRQ=DERPRQ-1.5*BTEM**5*(2.*PRFPAR*CSQA-SSQA/PRFPAR**2)
   20 CONTINUE
      DERPRQ=DERPRQ/PRFCOR
      PRFCOR=PRFCOR/FLOAT(IREFT)
*** SHOULD DERPRQ BE TIMES THIS ALSO?
      GO TO 100
C
C APPLY SHIFT IN COEFFICIENT:
   3  CALL ADJUST(PRFPAR)
      GO TO 100
C
C WRITE OUT NEW 'L PROR' CARD:
   4  WRITE (NEWIN,2001) NPRTYP,PRFPAR,(PRFDIR(I),I=1,3)
2001  FORMAT ('L PROR',I5,F10.4,3F4.0)
      GO TO 100
C
C DEAL WITH ABSENCE OF 'L PROR' CARD:
   5  CALL MESS(LPT,1,'No L PROR card - assuming no preferred '//
     & 'orientation correction')
      NPRTYP=0
  50  PRFPAR=1.
      PRFCOR=1.
      DERPRQ=0.
      PRFDIR(1)=0.
      PRFDIR(2)=0.
      PRFDIR(3)=1.
      GO TO 100
C
C FIX PROR COR IF NO CARD WAS GIVEN, OR TYPE 0 READ:
   6  IF (NPRTYP .EQ. 0) CALL ADDFX5(1,1,9,1,1,4)
      GO TO 100
C
C
      ENTRY PREFO8(NV)
C RECORD THAT THE PREFERRED ORIENTATION PARAMETER IS VARIABLE NUMBER NV:
      KPRFPR=NV
      GO TO 100
C
C
      ENTRY PREFO9
C RECORD THAT THE PREFERRED ORIENTATION PARAMETER IS FIXED:
      KPRFPR=0
      GO TO 100
C
100   RETURN
      END
C
C


C
C
C LEVEL 1      SUBROUTINE QPRIN(ARGI,OBS,DOBS,ICODE,ENDIP)
      SUBROUTINE QPRIN(ARGI,OBS,DOBS,ICODE,ENDIP)
C
C *** QPRIN DUMMY by JCM 10 May 88 ***
C
CH User to replace this by his own routine to read observation, if needed
C
      LOGICAL ENDIP
      RETURN
      END
C
C

C
C
C LEVEL 5      SUBROUTINE REFSET
      SUBROUTINE REFSET
C
C *** REFSET updated by JBF July 95 ***
C
CX
CC 19A
CH Finds L REFI and L SORC cards and deduces which refinement required
CH Also L *Sn PKCN and L *Sn PKFN cards.
CD Entered once at the start of a multi-job.  Constructs what were for
CD non-multi-jobs the program name, the peak centre subroutine name, and
CD the peak function name.
CD
CD Reads the first cdf and finds L SORC which should be followed by a
CD string of data sources like TF, CN, LX, ED - one per source;  keeps these
CD in NDASOU.
CD Read every cdf - one per phase - and picks up information:
CD       from L REFI which type of refinement (RIET, CAIL, . .) for this phase
CD       from L *Sn PKCN TYPE <number> which peak centre approximation number
CD                  for this phase and source n,
**CD Altered to expect only one set of L *Sn PKCN cards, therefore on phase 0
CD       from L *Sn PKFN TYPE <number> which peak function approximation number
CD                  for this phase and source n.
CD
CD If used with an old-style L REFI card, expects a signed packed integer.
CO Prints out what it has read. NB No longer sets LOGICAL TIC.
C
      CHARACTER *4 SWORDS(5),WORD
      CHARACTER *27 SORCWD(5),TYPEWD(6)
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /GRDBCK/IBACK,NBACK(5),ARGBAK(100,5),
     & BACKGD(100,5),KBCKGD(100,5),NBK,LBKD(20),ZBAKIN
      LOGICAL ZBAKIN
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      COMMON /WHEN/DAT,TIM(2),MAIN
      CHARACTER *5 TIM
      CHARACTER *10 DAT
      CHARACTER *6 MAIN
      DATA SWORDS/'NTOF','NCON','LABX','SYNX','EDIS'/
      DATA SORCWD/'Time of flight neutron',
     &  'Constant wavelength neutron',
     & 'Laboratory X-ray','Synchrotron X-Ray',
     & 'Energy Dispersive'/
      DATA TYPEWD/'RIET','PAWL','SAPS','APES','RAPS','PEWS'/
C
      CALL WRLINE(1,60,'-',1)
      DO 2 JPHASE=1,NPHASE
C ARRANGE TO ADDRESS THE CORRECT CRYSTAL DATA FILE:
      IF (JPHASE .NE. 1) THEN
        CALL VCSWOP(INREA(1,JPHASE),INREA(1,1),26)
        CALL VCSWOP(ICDN(1,JPHASE),ICDN(1,1),26)
      ELSE
        IF (MULFAS) CALL P0TEMP(.TRUE.)
        CALL FINDCD('L','SORC',4,0,L)
C
        IF (L.EQ.0) THEN
          NSOURC=1
C.. set to SYNX
          NDASOU(1)=4
          CALL MESS(LPT,1,
     &    'Default source of data       : '//SORCWD(NDASOU(1)))
          GOTO 4
        END IF
C
C READ ALL SOURCES FROM THE ONE CARD ON CDF FOR FIRST PHASE:
        NSOURC=0
        IPT=7
   3    CALL RDWORD(WORD,LEN,IPT,IPT,80,0,IER)
        IF (IER .EQ. 100) GO TO 4
C
        CALL ERRCHK(2,NSOURC,5,0,'PR data sources')
        NDASOU(NSOURC)=NCFIND(WORD,SWORDS,5)
  22    IF (NDASOU(NSOURC) .EQ. 0) THEN
          I=2
          CALL ERRCH2(WORD,I,'data source word <','> not recognised')
C.. set to SYNX
          NTEM=4
          NDASOU(NSOURC)=NTEM
          CALL MESS(LPT,1,
     &    'Default source of data       : '//SORCWD(NTEM))
        ELSE
          IF (NSOURC .EQ. 1) CALL MESS(LPT,1,
     &    'Source of data       : '//SORCWD(NDASOU(1)))
          IF (NSOURC .GT. 1)
     &    WRITE (LPT,2005) NSOURC,SORCWD(NDASOU(NSOURC))
2005      FORMAT (' Source of data no.',I3,' : ',A27)
        ENDIF
        GOTO 3
   4    MULSOU=NSOURC .GT. 1
        MULONE=MULFAS .OR. MULSOU
C
C READ "L PKCN" *Sn "TYPE" CARDS - THESE ARE IN PHASE 0 IF MULTI :
        K=0
   6    CALL FINDCD('L','PKCN',4,K,L)
        IF (L .LE. 0) GO TO 7
        K=L
        IPT=7
        CALL RDWORD(WORD,LEN,IPT,IPT,80,1,IER)
        IF (WORD .EQ. 'TYPE') THEN
          CALL RDINTG(NPCSOU(JPHASE,KSOURC),IPT,IPT,80,IER)
          DO 42 IJ=2,NPHASE
  42      NPCSOU(IJ,KSOURC)=NPCSOU(1,KSOURC)
* ONE DAY CHECK COMPATIBILITY
        ENDIF
      GO TO 6
C
C CHECK ALL PEAK CENTRE TYPES SET:
   7  DO 11 I=1,NSOURC
      IF (NPCSOU(JPHASE,I) .EQ. 0) THEN
c        WRITE (LPT,3002) JPHASE,I
c        WRITE (ITO,3002) JPHASE,I
c3002    FORMAT(' L PKCN TYPE card not supplied for phase',I3,
c     &  ' source',I3,' set to type 1')
        NPCSOU(JPHASE,I)=1
      ELSE
        IF (.NOT. MULONE) THEN
          WRITE (LPT,2011) NPCSOU(1,1)
2011      FORMAT(' Peak centre type =',I3)
        ELSE
          IF (.NOT. MULSOU) THEN
            WRITE (LPT,2011) NPCSOU(JPHASE,1)
          ELSE
            WRITE (LPT,2013) I,NPCSOU(JPHASE,I)
2013        FORMAT(' For source',I3,' Peak centre type =',I3)
          ENDIF
        ENDIF
      ENDIF
  11  CONTINUE
C
      IF (MULFAS .AND. JPHASE .EQ. 1) CALL P0TEMP(.FALSE.)
      ENDIF ! above lines associated with JPHASE.eq.1
C
C FOR EACH PHASE, SHOULD BE AN L REFI CARD:
  88  CALL FINDCD('L','REFI',4,0,L)
      IF (L .EQ. 0) THEN
        CALL MESS(LPT,1,
     &  'No L REFI card assuming Rietveld analysis')
        METHOD(JPHASE)=1
      ELSE
        CALL RDWORD(WORD,LEN,7,IPT,80,0,IER)
        METHOD(JPHASE)=NCFIND(WORD,TYPEWD,6)
        IF (METHOD(JPHASE) .EQ. 0) THEN
          CALL ERRCH2(WORD,0,'refinement type word',
     &    'not recognised - assuming Rietveld analysis')
          METHOD(JPHASE)=1
        ELSE
          IF (MULFAS) THEN
            WRITE (LPT,2001) JPHASE,TYPEWD(METHOD(JPHASE))
2001        FORMAT (/' Phase',I3,' : Refinement type ',A27)
          ELSE
            CALL MESS(LPT,1,
     &    'Refinement type '//TYPEWD(METHOD(JPHASE)))
          ENDIF
        ENDIF
      END IF 
C
C READ "L PKFN" *Sn "TYPE" CARDS:
   5  K=0
   8  CALL FINDCD('L','PKFN',4,K,L)
      IF (L .LE. 0) GO TO 12
      K=L
      IPT=7
      CALL RDWORD(WORD,LEN,IPT,IPT,80,1,IER)
      IF (WORD .NE. 'TYPE') GO TO 8
      CALL RDINTG(NPFSOU(JPHASE,KSOURC),IPT,IPT,80,IER)
* CHECK COMPATIBILITY
      GO TO 8
C
C CHECK ALL PEAK FUNCTION TYPES SET:
  12  DO 13 I=1,NSOURC
      IF (NPFSOU(JPHASE,I) .EQ. 0) THEN
c        WRITE (LPT,3003) JPHASE,I
c        WRITE (ITO,3003) JPHASE,I
c3003    FORMAT(' L PKFN TYPE card not supplied for phase',I3,
c     &  ' source',I3,' set to type 3')
        NPFSOU(JPHASE,I)=3
      ELSE
        IF (.NOT. MULONE) THEN
          WRITE (LPT,2021) NPFSOU(1,1)
2021      FORMAT(' Peak function type =',I3)
        ELSE
           IF (.NOT. MULSOU) THEN
            WRITE (LPT,2021) NPFSOU(JPHASE,1)
          ELSE
            WRITE (LPT,2023) I,NPFSOU(JPHASE,I)
2023        FORMAT(' For source',I3,' Peak function type =',I3)
          ENDIF
        ENDIF
      ENDIF
  13  CONTINUE
C
   2  CONTINUE
        CALL WRLINE(1,60,'-',1)
C
C PUT VECTORS BACK:
      DO 14 JPHASE=NPHASE,2,-1
      CALL VCSWOP(INREA(1,JPHASE),INREA(1,1),26)
      CALL VCSWOP(ICDN(1,JPHASE),ICDN(1,1),26)
  14  CONTINUE
C FOR USES OTHER THAN MULTIPHASE LSQ (EG TIC) - HOPE THIS DOES NOT MESS UP THE
C REST:
 101  CALL LOGSOU(1)
      CALL LOGPHA(1)
 100  RETURN
      END
C
C
C
C
C LEVEL 8       SUBROUTINE RFACPR(IRFAC,PCXX)
      SUBROUTINE RFACPR(IRFAC,PCXX)
C
C *** RFACPR updated by JBF 13-Jan-95 ***
C
CH Multiple entry routine to deal with Profile refinement R Factors
CA On entry IRAFC indicates the actions required:
CA   IRFAC=1  set up - clear totals
CA   IRFAC=2  add in contributions, given values, differences and weights
CA   IRFAC=3  just precedes entry 4
CA   IRFAC=4 if required, send to file H,K,L, F CALC, F OBS, DIFF
CA   IRFAC=5 as entry 2, but dealing with a zero Ycalc
CA   IRFAC=6 used for every K out of CALXX - save GCALC and add in to SOMEGA
CA   IRFAC= 11,12,13 as for 1,2,3 but for multiphase applications
C

      INCLUDE 'PARAMS.INC'
      EXTERNAL PCXX
      COMPLEX FCALC
      LOGICAL PRNCYC,TESTOV,LATABS
      DIMENSION IH(3)
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /DERBAS/DERIVB(400),LVARB
      COMMON /F4PARS/NGEN4(9,5),F4VAL(3,MF4PAR),
     & F4PAR(3,MF4PAR),KF4PAR(3,MF4PAR),F4PESD(3,MF4PAR),KOM6
      COMMON /FCAL/FC,FCMOD,COSAL,SINAL,FCDERS(300),DERIVT(300)
      COMPLEX FC,DERIVT
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /GRDBCK/IBACK,NBACK(5),ARGBAK(100,5),
     & BACKGD(100,5),KBCKGD(100,5),NBK,LBKD(20),ZBAKIN
      LOGICAL ZBAKIN
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /NSYM/NOP,NCENT,NOPC,NLAT,NGEN,CENTRC,KOM13
      LOGICAL CENTRC
      COMMON /OBSCAL/OBS,DOBS,GCALC,YCALC,DIFF,ICODE,SUMWD,NOBS,
     & IWGH(5),WTC(4),WT,SQRTWT,WDIFF,YBACK,YPEAK,YMAX,CSQTOT
      EQUIVALENCE (IWGHT,IWGH(1))
      COMMON /OVER/ITFAC,OTFAC(10),KOTFAC(10),NTFAC,JTFAC,KOM15
      EQUIVALENCE (TFAC,OTFAC(1)),(KTFAC,KOTFAC(1))
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRBLEM/NFAM,NGENPS(6,9),NSPCPS(6,9),
     & LF1SP(5),LF3SP(10,9,5),LVFST1(6,9,5),
     & LBFST1(6,9,5),NVARF(6,9,5),
     & NBARF(6,9,5),LF6SP(3,5)
      DIMENSION NGENS(6),NSPC(6)
      EQUIVALENCE (NGENS(1),NGENPS(1,1)),(NSPC(1),NSPCPS(1,1))
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END
      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /PRSTAT/SMYC,SMYD,SMYO,SMIO,SMID,SMWYOS,IZCT,
     & P5,IOP1,IOP2,KMI(9),KMA(9)
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
C>> JCC Moved to an include file
	INCLUDE 'REFLNS.INC'
      COMMON /SCRACH/MESSAG,NAMFIL
      CHARACTER *80 ICARD,MESSAG*100,NAMFIL*100
      EQUIVALENCE (ICARD,MESSAG)
      COMMON /WHEN/DAT,TIM(2),MAIN

      CHARACTER *5 TIM
      CHARACTER *10 DAT
      CHARACTER *6 MAIN
      COMMON /PRCHISQ/ CHISQ,RWPOBS,RWPEXP
	SAVE SMYOB,SWYOBS
C
      GO TO (1,2,3,4,5,6,100,100,100,100,11,12,13) ,IRFAC
C
C INITIAL ENTRY : CLEARS ALL IF SINGLE PHASE
   1  SUMWD=0.0
      SMYC=0.0
      SMYD=0.0
      SMYO=0.0
      SMYOB=0.0
      SWYOBS=0.0
      SMWYOS=0.0
C
C COUNT ZERO Y CALCS
      IZCT=0
C
C OPEN FILE TO RECEIVE PROFILE IF NEEDED:
      MESSAG='File to output Profiles'
      NAMFIL='.PRO'
      IF (PRNCYC(4)) CALL OPNFIL(IOP2,113)
      IF (MULFAS) GO TO 100
C
  11  SMIO=0.0
      SMID=0.0
      RINUM=0.
      RIDEN=0.
C%
C      DO 21 I=1,%REFS%
      DO 21 I=1,REFDIM
      AIOBS(I)=0.0
      ESDOBS(I)=0.0
      SOMEGA(I)=0.0
C TO INDICATE WHETHER OR NOT USED
      AICALC(I)=-9999.
  21  CONTINUE
C
      IF (PRNCYC(1)) CALL MESS(LPT,1,'Argument    Yobs     Ycalc'//
     & '     Diff First and last reflns')
C OPEN FILE FOR FOURIER INPUT IF REQUIRED:
      MESSAG='File for h k l Fc Fo'
      NAMFIL='.FOU'
      IF (PRNCYC(3)) CALL OPNFIL(IOP1,112)
      GO TO 100
C
C DEAL WITH ZERO YCALC:
   5  IZCT=IZCT+1
C IF REQUESTED ON "L REFI" CARD, OMIT ZEROS FROM STATISTICS:
      IF (.NOT. ZBAKIN) GO TO 29
C
C ADDING IN ENTRY: THIS IS THE ENTIRE ENTRY IF SINGLE PHASE
   2  SUMWD=SUMWD+WDIFF*WDIFF
      SMYC=SMYC+ABS(YPEAK)
      SMYD=SMYD+ABS(DIFF)
      SMYO=SMYO+ABS(OBS)
      OB=OBS-YBACK
      SMYOB=SMYOB+ABS(OB)
      SWYOBS=SWYOBS+WT*OB*OB
      SMWYOS=SMWYOS+WT*OBS*OBS
C
      IF (.NOT. PRNCYC(1)) GO TO 29
      IF (IZCT .NE. 0) WRITE (LPT,2001) IZCT
2001  FORMAT (' (',I5,' zeros )')
      IZCT=0
      WRITE (LPT,2002) ARGI,OBS,YCALC,DIFF,KMIN,KMAX
2002  FORMAT (' ',F12.2,2F12.4,F14.4,(2X,I5,2X,I5,2X))
C
C IF REQUESTED, WRITE OUT PROFILE FOR FUTURE REINPUT (INCLUDING ZERO
C YCALCS:
  29  IF (PRNCYC(4)) WRITE (IOP2,2003) ARGI,YBACK,OBS,YCALC,DOBS
2003  FORMAT (F12.4,4G12.4)
      IF (MAIN .EQ. 'FORTY1' .OR. MULFAS) GO TO 100
C
C REMAINING COUNTS - OR SEPARATE ENTRY PER PHASE, IF MULTIPHASE:
  12  KK=KMIN
      OB=OBS-YBACK
      DO 33 J=KMIN,KMAX
      IF (TESTOV(GGCALC(J-KMIN+1),YPEAK)) GO TO 33
      TEMP=GGCALC(J-KMIN+1)/YPEAK
      IF (TESTOV(TEMP,WT)) GO TO 33
C COLLECT INTEGRATED INTENSITIES:
      AIOBS(J)=AIOBS(J)+TEMP*OB
C63: ONE TEMP REMOVED:
      ESDOBS(J)=ESDOBS(J)+TEMP/WT
  33  CONTINUE
      GO TO 100
C
C AT CYCLE END, MAKE I OBS AND SUM THEM, AND DIFFS, THEN PRINT R FACTORS ETC:
C ALL OBEYED FOR SINGLE PHASE:
   3  IF ((IZCT .NE. 0) .AND. PRNCYC(1)) WRITE (LPT,2001) IZCT
C
C NOT IF SIMULATION:
      IF (SIMUL) GO TO 13
C
C PRINT R FACTORS FOR END OF CYCLE:
      CALL MESS(LPT,1,'R Factors:')
C
      IF (TESTOV(SMYD,SMYO)) THEN
        CALL MESS(LPT,0,'- not available because denominators zero')
        GO TO 13
      ENDIF
C
      WRITE (LPT,2016) 100.*SMYD/SMYO
2016  FORMAT (/' Profile R factors'
     & /' 100 (Sum Y Diffs/Y Obs) =                  ',F8.2)
      WRITE (LPT,2021) 100.*SMYD/SMYOB
2021  FORMAT (' 100 (Sum Y Diffs/(Sum Y Obs - Y Back)) =   ',F8.2)
      WRITE (LPT,2012) 100.*SQRT(SUMWD/SMWYOS)
2012  FORMAT (/' Weighted Profile R factors'
     & /' 100 Sqrt(Sum wt diffs sqrd/Sum wt obs sqrd)  ',
     & '=        ',F8.2)
      WRITE (LPT,2022) 100.*SQRT(SUMWD/SWYOBS)
2022  FORMAT (' 100 Sqrt(Sum wt diffs sqrd/Sum wt (obs-back) ',
     & 'sqrd)  = ',F8.2)
      FREE=FLOAT(NOBS-LVARB)
      WRITE (LPT,2013) 100.*SQRT(FREE/SMWYOS)
2013  FORMAT (/' Expected R factor =                  ',F8.2)
      WRITE (LPT,2023) 100.*SQRT(FREE/SWYOBS)
2023  FORMAT (' Expected R factor (using obs-back) = ',F8.2)
      WRITE (LPT,2014) FREE
2014  FORMAT (/' N-P+C =',F8.0)
      RWPOBS=100.*SQRT(SUMWD/SWYOBS)
      RWPEXP=100.*SQRT(FREE/SWYOBS)
      CHISQ=SUMWD/FREE
C      WRITE (ITO,2004) CHISQ,NOBS,LVARB
      WRITE (LPT,2004) CHISQ,NOBS,LVARB
2004  FORMAT (' Chi squared =',F10.4,' for',I6,' observations',
     & ' and',I4,' basic variables')
      WRITE (LPT,2019) SMYD,SMYO,SMYOB,SMYC,SMWYOS,SWYOBS,SUMWD
2019  FORMAT (//6X,'SumYdif    SumYobs     SumYobs     SumYcalc    ',
     & 'Sum w obs sqrd '/18X,'as read     -Yback',20X,'as read'/
     & 1X,3F12.2,1X,F12.2,1X,F12.2//2X,'Sum w obs sqrd    ',
     & 'SumWdiff sq'/6X,'- Yback'/1X,2F13.2)
      IF (MAIN .EQ. 'FORTY1' .OR. MULFAS) GO TO 100
C
C PRINTING ENTRY PER PHASE IF MULTIPHASE, OR EVERY TIME IF SINGLE:
  13  DO 24 K=1,MAXKK(JPHASE)
C IGNORE IF NOT USED:
      IF (AICALC(K) .EQ. -9999.) GO TO 24
C IGNORE IF DIVIDING SUM HAS STAYED ZERO:
      IF (SOMEGA(K) .EQ. 0.) GO TO 24
      AIOBS(K)=AIOBS(K)/SOMEGA(K)
      SMIO=SMIO+AIOBS(K)
      D=ABS(AIOBS(K)-ABS(AICALC(K)))
      SMID=SMID+D
      IF (.NOT. TESTOV(SOMEGA(K),ESDOBS(K))) THEN
        TEMP=SOMEGA(K)*SOMEGA(K)/ESDOBS(K)
        RINUM=RINUM+D*D*TEMP
        RIDEN=RIDEN+AIOBS(K)*AIOBS(K)*TEMP
      ENDIF
  24  CONTINUE
C
      IF (TESTOV(SMID,SMIO)) GO TO 14
      IF (NVARF(2,JPHASE,1) .EQ. 0) GO TO 14
      IF (MULFAS) WRITE(LPT,2080) JPHASE
2080  FORMAT (/' Phase',I3,' :')
C
      WRITE (LPT,2011) 100.*SMID/SMIO
2011  FORMAT (/' Integrated Intensity R factor'
     & /' 100 (Sum I Diffs/Sum I Obs) = ',F8.2)
C
C WEIGHTED, SQUARED INTENSITY R FACTOR:
      WRITE (LPT,2029) 100.*RINUM/RIDEN
2029  FORMAT (/' Weighted, squared Integrated Intensity R factor'/
     & ' 100 (Sqrd sum I Diffs/Sqrd sum I Obs)'/
     & ' weighted by 1/sigma sqrd     = ',F8.2)
C
C CHI SQUARED FOR INTENSITIES:
      WRITE (LPT,2028) RINUM/(FLOAT(MAXKK(JPHASE)-NVARF(2,JPHASE,1))),
     & MAXKK(JPHASE),NVARF(2,JPHASE,1)
2028  FORMAT (/' Chi squared for Intensities =',F10.4,' for',I5,
     & ' reflections and',I4,' structure variables')
C
C AND SUMS OF IDIFFS, IOBS:
      WRITE (LPT,2024) SMID,SMIO
2024  FORMAT (' Sum I diffs =',G12.2,6X,'Sum I obs =',G12.2)
C
C AND OTHER CONSTITUENT PARTS:
      WRITE (LPT,2027) RINUM,RIDEN
2027  FORMAT (/' Sum weighted I diffs sqrd =',F12.2,' Sum weighted',
     & ' I obs sqrd =',F12.2)
C
C  PRINT IOBS, ICALC ETC.
  14  IF (.NOT. PRNCYC(2) .AND. .NOT. PRECYC) GO TO 4
      IF (PRECYC) THEN
        DO 87 I=1,MAXKK(JPHASE)
        F4PAR(1,I)=0.
  87    F4PESD(1,I)=0.
      ENDIF
      IF (MAG .AND. .NOT. FIXED) CALL MESS(LPT,1,'      h       k'//
     & '       l      Argument      I(obs)       I(calc)'//
     & '         Diff        Esd(obs)     F*F       Q*Q')
      IF (MAG .AND. FIXED) CALL MESS(LPT,1,'    h    k'//
     & '    l      Argument      I(obs)       I(calc)'//
     & '         Diff        Esd(obs)     F*F       Q*Q')
      IF (.NOT. MAG) CALL MESS(LPT,1,'    h    k    l    Argument'//
     & '      I(obs)       I(calc)         Diff'//
     & '        Esd(obs)     F*F')
      DO 25 K=1,MAXKK(JPHASE)
      CALL INDFIX(REFH(1,K),IH)
      IF (AICALC(K) .NE. -9999.) GO TO 26
      IF (FIXED) THEN
        WRITE (LPT,2008) IH
      ELSE
        WRITE (LPT,2009) (REFH(I,K),I=1,3)
      ENDIF
2008  FORMAT (1X,3I5,' not used')
2009  FORMAT (1X,3F8.3,' not used')
      GO TO 25
  26  IF (SOMEGA(K) .NE. 0.) GO TO 27
      WRITE (LPT,2007) IH
2007  FORMAT (1X,3I5,' gave zero denominator')
      GO TO 25
C
  27  AIDIFF=AIOBS(K)-AICALC(K)
C63: TEMPORARY AS ESDOBS COMING -VE:
      ESDOB=0.
      IF (ESDOBS(K) .GE. 0.)  ESDOB=SQRT(ESDOBS(K))/SOMEGA(K)
C FOR PCTF1 WHICH REFERS TO DSTAR2(KNOW) TO GET WAVELENGTH:
      KNOW=K
      CALL PCXX(2)
C   BY JBF 5/1/95 TO REMOVE A NUCLEAR CALCULATION IF SHOULD BE ABSENT
      FNSQ = 0.0
      IF (.NOT. LATABS(REFH(1,K))) THEN
        FC=FCALC(REFH(1,K))
        FNSQ=FC*CONJG(FC)
      ENDIF
      IF (MAG) THEN
        CALL FMCALC(REFH(1,K),FMCMOD,FMCSQR)
        IF (.NOT. FIXED) THEN
          WRITE (LPT,2042) (REFH(I,K),I=1,3),ARGK,AIOBS(K),
     &    AICALC(K),AIDIFF,ESDOB,FNSQ,FMCSQR
        ELSE
          WRITE (LPT,2043) IH,ARGK,AIOBS(K),
     &    AICALC(K),AIDIFF,ESDOB,FNSQ,FMCSQR
        ENDIF
2042    FORMAT(1X,3F8.3,F12.2,4F14.4,2F10.3)
2043    FORMAT(1X,3I5,F12.2,4F14.4,2F10.3)
      ELSE
        WRITE (LPT,2006) IH,ARGK,AIOBS(K),AICALC(K),AIDIFF,
     &  ESDOB,FNSQ
2006    FORMAT (1X,3I5,F12.2,4F14.4,F10.3)
      ENDIF
      IF (PRECYC) THEN
        F4PAR(1,K)=AIOBS(K)
        F4PESD(1,K)=ESDOB
      ENDIF
  25  CONTINUE
C
C SEND H,K,L, F CALC, F OBS AND DIFF TO FILE FOR FOURIER
   4  IF (.NOT. PRNCYC(3)) GO TO 100
      DO 22 K=1,MAXKK(JPHASE)
      IF (AICALC(K) .EQ. -9999.) GO TO 22
      IF (SOMEGA(K) .EQ. 0.) GO TO 22
      FCA=0.
      IF (AICALC(K) .GT. 0.) FCA=SQRT(AICALC(K))
      FOB=0.
      IF (AIOBS(K) .GT. 0.) FOB=SQRT(AIOBS(K))
C  IS THIS A PROBLEM JBF 5-1-95
      FC=(0.0,0.0)
      IF (.NOT. LATABS(REFH(1,K))) THEN
        FC=FCALC(REFH(1,K))
      ENDIF
      STHL=VCTMOD(0.5,REFH(1,K),2)
      E=EXP(-TFAC*STHL*STHL)
      CALL INDFIX(REFH(1,K),IH)
      A=REAL(FC)
      B=AIMAG(FC)
      FCMOD=SQRT(A*A+B*B)
      IF (.NOT. TESTOV(FOB,FCA)) FOB=FCMOD*E*FOB/FCA
      IF (CENTRC) THEN
        WRITE (IOP1,2030) IH,A,FOB
2030    FORMAT (3I5,3F10.3)
      ELSE
        WRITE (IOP1,2030) IH,FC,FOB
      ENDIF
  22  CONTINUE
C READY FOR REINPUT BY FOURIER:
      REWIND IOP1
      GO TO 100
C
C ENTRY FROM CALXX TO KEEP GCALC OF ALL K FOR THIS ONE I, AND ADD IN
C CONTRIBUTIONS TO SOMEGA - KNOW HOLDS CURRENT K:
C>> JCC There is an array bound error here sometimes - needs fixing.
C>> It seems that KMIN is far bigger than KNOW
C   6  GGCALC(KNOW-KMIN+1)=GCALC
C For now just check the bound and skip if its outside the range ..
    6 CONTINUE
      II = KNOW-KMIN+1
	IF (II.GT.0 .AND. II.LE.500) GGCALC(II)=GCALC
      SOMEGA(KNOW)=SOMEGA(KNOW)+P5
      GO TO 100
C
 100  RETURN
      END
C
C
C
C
C LEVEL 5      SUBROUTINE RUNPAR(IFAM,IGEN,ISPC)
      SUBROUTINE RUNPAR(IFAM,IGEN,ISPC)
C
C *** RUNPAR corrected by PJB and JBF Jun 93 ***
C
CH Control cycling over all parameters in LSQ
C
CA IFAM on exit contains family of "next" parameter, or -1 if end
CA IGEN on exit contains genus of "next" parameter
CA ISPC on exit contains species of "next" parameter
CA JPHASE on exit contains the phase of the "next" parameter.
CA JSOURC on exit contains the source of the "next" parameter.
CA On entry, if IFAM=0 the cycle is to be initialised
CA       and otherwise IFAM,IGEN,ISPC,JPHASE,JSOURC contain the "previous"
CA       values.
C
CD If JPHASE is changed, the new phase is read into store.
CD If SAPS, expects family 4 geners to start at 2, not 1
CD For family 4, cycles genus before species to keep together variables suitable
CD to make a banded matrix.
C
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRBLEM/NFAM,NGENPS(6,9),NSPCPS(6,9),
     & LF1SP(5),LF3SP(10,9,5),LVFST1(6,9,5),
     & LBFST1(6,9,5),NVARF(6,9,5),
     & NBARF(6,9,5),LF6SP(3,5)
      DIMENSION NGENS(6),NSPC(6)
      EQUIVALENCE (NGENS(1),NGENPS(1,1)),(NSPC(1),NSPCPS(1,1))
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
C INITIALISE ENTRY:
      IF (IFAM .EQ. 0) THEN
        JPHASE=1
        GO TO 5
      ENDIF
C
C ENTRY TO ADVANCE - IF FAMILY 4, WANT TO ADVANCE IGEN NOT ISPC FIRST:
      IF (IFAM .NE. 4) GO TO 6
C
C THIS LETS OUT THE FIRST FAMILY 4 MEMBER AS USUAL
      IGEN=IGEN+1
   8  IF (IGEN .LE. NGENPS(IFAM,JPHASE)) GO TO 100
C FOR FAMILY 4, NEXT SPECIES:
*** I THINK SPECIES 1 OF GAMS DISAPPEARS - INVESTIGATE
      ISPC=ISPC+1
      IGEN=1
      IF (SAPS) IGEN=2
      IF (ISPC .LE. NSPCPS(4,JPHASE)) GO TO 8
C FAMILY 4 END:
      ISPC=1
      GO TO 4
C
C FAMILIES OTHER THAN 4 JUST AS IN PARRUN:
   6  ISPC=ISPC+1
C CHECK NOT TOO MANY SPECIES FOR THIS FAMILY+GENUS:
   3  IF (ISPC .GT. NSPCPS(IFAM,JPHASE)) GO TO 2
C ALSO, FAMILIES 1, 3 AND 6 HAVE INDIVIDUAL GENERA OF DIFFERING LENGTHS:
      IF (IFAM.EQ.1 .AND. ISPC.GT.IABS(LF1SP(IGEN))) GO TO 2
      IF (IFAM.EQ.3 .AND. ISPC.GT.IABS(LF3SP(IGEN,JPHASE,JSOURC)))
     & GO TO 2
      IF (IFAM.EQ.6 .AND. ISPC.GT.IABS(LF6SP(IGEN,JSOURC))) GO TO 2
C
      GO TO 100
C
C NEXT GENUS:
   2  IGEN=IGEN+1
   1  ISPC=1
      IF (IGEN .LE. NGENPS(IFAM,JPHASE)) GO TO 3
C ARE THERE OTHER SOURCES?
      IF (IFAM .NE. 3 .AND. IFAM .NE. 6) GO TO 4
C NEXT SOURCE:
      JSOURC=JSOURC+1
      IF (JSOURC .LE. NSOURC) GO TO 7
   4  IFAM=IFAM+1
      JSOURC=1
   7  IGEN=1
      IF (SAPS .AND. IFAM .EQ. 4) IGEN=2
C
C IF LAST PHASE AND FAMILY 6, TO END:
      IF (JPHASE .GT. 1.AND. IFAM .EQ. 6) GO TO 42
C
C IN CASE NGENPS(IFAM,JPHASE) = 0
      IF (IFAM .LE. NFAM) GO TO 1
C NEXT PHASE:
   42 IF (JPHASE .GE. NPHASE) GO TO 101
      JPHASE = JPHASE + 1
   5  IFAM=0
      IF (MULFAS) CALL PHMOVE(1,JPHASE)
      GO TO 4
C
 101  IFAM=-1
 100  RETURN
      END
C
C
C
C
C LEVEL 13      SUBROUTINE SETPR(PCXX,PFXX,MAGSET)
      SUBROUTINE SETPR(PCXX,PFXX,MAGSET)
C
C *** SETPR updated by PJB 1 Feb 1994 ***
C
CC 12C
CH Sets up sizes and pointers for PR LSQ for one phase.
CH Also reads in most of CDF to find out exactly what it is doing
CA PCXX is the subroutine to deal with peak centres
CA PFXX is the subroutine to deal with peak functions
CA MAGSET is a subroutine to deal with magnetic setting up, if needed.
CA            MAGSET=DUMMY for non-magnetic, DOMAG for magnetic.
CD Sets up the COMM0N /PRBLEM with NFAM, NGENPS, NSPCPS, LF1SP, LF3SP etc
CD then call LSETPR to set up packing of parameter names, etc
C

      INCLUDE 'PARAMS.INC'
       EXTERNAL PFXX,PCXX,MAGSET
      COMMON /F4PARS/NGEN4(9,5),F4VAL(3,MF4PAR),
     & F4PAR(3,MF4PAR),KF4PAR(3,MF4PAR),F4PESD(3,MF4PAR),KOM6
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /GRDBCK/IBACK,NBACK(5),ARGBAK(100,5),
     & BACKGD(100,5),KBCKGD(100,5),NBK,LBKD(20),ZBAKIN
      LOGICAL ZBAKIN
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /POSNS2/NATO(9)
      COMMON /PRBLEM/NFAM,NGENPS(6,9),NSPCPS(6,9),
     & LF1SP(5),LF3SP(10,9,5),LVFST1(6,9,5),
     & LBFST1(6,9,5),NVARF(6,9,5),
     & NBARF(6,9,5),LF6SP(3,5)
      DIMENSION NGENS(6),NSPC(6)
      EQUIVALENCE (NGENS(1),NGENPS(1,1)),(NSPC(1),NSPCPS(1,1))
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END
      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /PWORDS/PWD(10,9,5)
      CHARACTER *4 PWD
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SCLDAT/ISCALE,NSCALE,SCALE(20),KSCALE(20),
     & NSCL,LSCD(10)
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
      DO 1 JSOUR = 1,NSOURC
      JSOURC = JSOUR
      CALL LOGSOU(JSOURC)
C SET UP WHICH DATA SOURCE, WHICH PEAK FUNCTION:
      CALL PFXX(0)
C
C UNLESS CAIL OR APES SET UP REST OF STRUCTURE FACTOR CALCULATION:
      IF (RIET .OR. SAPS) THEN
** TO USE SLONLY, TAKE SETFCM APART & USE INDIVDUALLY
        CALL SETFCM(MAGSET)
        IF (PHMAG(JPHASE)) THEN
          CALL MAGCNC
          CALL MAGSET(2)
        ENDIF
      ELSE
        CALL RECIP
        CALL OPSYM(1)
C ENSURE POSSIBLE PROPAGATION VECTOR IS READ EVEN IF CAILS
        CALL PROPAG(1,INOUT)
        MAG=(INOUT.EQ.1)
      ENDIF
C SET UP ASYMMETRIC UNIT:
      CALL SYMUNI
C
C READ I AND MOST L CARDS:
      IF (.NOT. MULFAS) CALL STLSP0(PCXX,PFXX)
      CALL STLSPR(PCXX,PFXX)
C
C ADJUST WORDS AND THEIR SPECS TO FIT PRECISE PROBLEM:
** READ L ADDP CARDS AND ADD TO TEMWRD AND ITMWD OR WHATEVER
** AND IF FAMILY 3 OR 1, EXPECT A VALUE FOR LFnSP() ON CARD ALSO.
C
C SPECIFY PROBLEM:
      NGENPS(1,JPHASE)=1
      NSPCPS(1,JPHASE)=20
      NGENPS(6,JPHASE)=3
C%
C      NSPCPS(6,JPHASE)=%BACK%
      NSPCPS(6,JPHASE)=100
      NFAM=6
      IF (RIET) THEN
        NGENPS(4,JPHASE)=0
        NSPCPS(4,JPHASE)=0
      ELSE
        IF (CAIL) THEN
          NGENPS(4,JPHASE)=1
        ELSE
          NGENPS(4,JPHASE)=NGEN4(JPHASE,JSOURC)
        ENDIF
C SPECIES IN FAMILY 4 ALSO SET WHEN MAX K KNOWN - THIS IS FOR PACKING KK:
C%
C        NSPCPS(4,JPHASE)=%REFS%
        NSPCPS(4,JPHASE)=ITMREF
      ENDIF
C IN CASE USER GIVES A CARDS ETC FOR A CAIL PHASE, AND L RELA ETC:
*      IF (RIET .OR. SAPS) THEN
        NGENPS(2,JPHASE)=NATO(JPHASE)
C ALLOW ALL MAGNETIC:
        NSPCPS(2,JPHASE)=22
*      ELSE
C NO STRUCTURE PARAMETERS IN CAIL OR APES:
*        NGENPS(2,JPHASE)=0
*        NSPCPS(2,JPHASE)=0
*      ENDIF
C
C FAMILY 5 ARE MULTIPOLES, AND EXCLUDED:
      NGENPS(5,JPHASE)=0
      NSPCPS(5,JPHASE)=0
C
C NOW DEAL WITH FAMILY 3
      NGENPS(3,JPHASE)=10
      NSPCPS(3,JPHASE)=6
C
C SPECIES TYPES FOR EACH GENUS OF FAMILY 1:
      LF1SP(1)=13
C AND FOR FAMILY 3:
      LF3SP(1,JPHASE,JSOURC)=-1
      LF3SP(2,JPHASE,JSOURC)=-2
C LF3SP(3,4, ETC) SET INDIVIDUALLY IN PFXX:
C NPKGEN(JPHASE,JSOURC) IS NUMBER OF PEAK FUNCTION GENERA, AND SET INDIVIDUALLY
C IN PFXX
      L1=NPKGEN(JPHASE,JSOURC)+3
      L2=NGENPS(3,JPHASE)
      DO 6 I=L1,L2
   6  LF3SP(I,JPHASE,JSOURC)=0
C
C LF6SP(1,JSOURC) VARIES ACCORDING TO PEAK FUNCTION:
      LF6SP(2,JSOURC)=-2
      LF6SP(3,JSOURC)=-NBACK(JSOURC)
   1  CONTINUE
      CALL LSETPR(PCXX,PFXX)
 100  RETURN
      END
C
C
C
C
C LEVEL 11       SUBROUTINE SETTIC(PCXX)
       SUBROUTINE SETTIC(PCXX)
C
C *** SETTIC by JCM 8 Aug 91 ***
C
CH Prepare to write GENIE files by reading L cards and generating reflection
      EXTERNAL PCXX,DUMMY
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /DGEOM/IGEOM,UM(9),NLR,ANGLIN(3),ALAMBD(5,5),
     & NLAMB,ILAMB
      EQUIVALENCE (WLGTH,ALAMBD(1,1))
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /LREAD/ILREA(22,5),KOM18
      DIMENSION ILREAD(22)
      EQUIVALENCE (ILREAD(1),ILREA(1,1))
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /PRZERO/ZEROSP(6,9,5),KZROSP(6,
     & 9,5),DKDZER(6),NZERSP(9,5)
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
C READ RELEVANT L CARDS:
      CALL INPLPR(PCXX,DUMMY)
C
C DEAL WITH THE CARDS WHICH ARE DIFFERENT ACCORDING TO TYPE OF DIFFRACTION:
C
C TF:
C NEED L THE2 CARD GIVING 2 THETA DEGREES:
      IF (TOF) THEN
        IF (ILREAD(18) .EQ. 0)
     &  CALL ERRMES(2,1,'L THE2 card giving counter angle')
C FOR TF MUST HAVE L PKCN CARD:
        IF (ILREAD(7) .EQ. 0)
     &  CALL ERRMES(2,1,'L PKCN card giving peak centre')
      ELSE
C
C CN AND/OR LX - NEED L WVLN CARD:
        IF (ILREAD(13) .EQ. 0) THEN
          IF (CN) THEN
            NLAMB=1
            ALAMBD(1,KSOURC)=1.900
          ELSE IF (SR) THEN
            NLAMB=1
            ALAMBD(1,KSOURC)=0.85000
          ELSE IF (LX) THEN
            NLAMB=2
            ALAMBD(1,KSOURC)=1.544390
            ALAMBD(2,KSOURC)=1.540562
          ENDIF
          WRITE(LPT,2002) NLAMB,(ALAMBD(I,KSOURC),I=1,NLAMB)
2002      FORMAT (' ',I3,' Wavelength(s): ',5(1X,F9.6))
        ENDIF
        PKCNSP(1,JPHASE,JSOURC)=96.0505
        TWOTHD(JSOURC)=RADIAN(168.329)
      ENDIF
C
**??NOT USED ELSEWHERE:
C IF NO L ZERO CARD THEN ZEROPT=0:
      IF (ILREAD(8) .EQ. 0) ZEROSP(1,JPHASE,JSOURC)=0.
C
      CALL PCXX(6)
      WRITE (LPT,2018) STHLMX
2018  FORMAT (/' Maximum sin theta for generation of indices is',F10.4)
C
C GENERATE REFLECTIONS:
      CALL INRFPR(PCXX,DUMMY)
C
      RETURN
      END
C
C
C
C
C
C LEVEL 11      SUBROUTINE STLSP0(PCXX,PFXX)
      SUBROUTINE STLSP0(PCXX,PFXX)
C
C *** STLSP0 updated by JCM 28 Dec 92 ***
C
      EXTERNAL PCXX,PFXX

	INCLUDE 'PARAMS.INC'
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /EXCREG/NEXCL(5),EXCLUD(40,5)
      COMMON /FUDG/NFUDGE,IFDGPT(20),FUDGE1(20),FUDGE2(20),
     & IFDTYP(20)
      COMMON /GRDBCK/IBACK,NBACK(5),ARGBAK(100,5),
     & BACKGD(100,5),KBCKGD(100,5),NBK,LBKD(20),ZBAKIN
      LOGICAL ZBAKIN
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /LREAD/ILREA(22,5),KOM18
      DIMENSION ILREAD(22)
      EQUIVALENCE (ILREAD(1),ILREA(1,1))
      COMMON /OBSCAL/OBS,DOBS,GCALC,YCALC,DIFF,ICODE,SUMWD,NOBS,
     & IWGH(5),WTC(4),WT,SQRTWT,WDIFF,YBACK,YPEAK,YMAX,CSQTOT
      EQUIVALENCE (IWGHT,IWGH(1))
      COMMON /OMITPR/MIS,AMISS(3,100),KOM12
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRBLEM/NFAM,NGENPS(6,9),NSPCPS(6,9),
     & LF1SP(5),LF3SP(10,9,5),LVFST1(6,9,5),
     & LBFST1(6,9,5),NVARF(6,9,5),
     & NBARF(6,9,5),LF6SP(3,5)
      DIMENSION NGENS(6),NSPC(6)
      EQUIVALENCE (NGENS(1),NGENPS(1,1)),(NSPC(1),NSPCPS(1,1))
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END
      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SCLDAT/ISCALE,NSCALE,SCALE(20),KSCALE(20),
     & NSCL,LSCD(10)
      COMMON /SLAKDA/NSLAK(4),SLKSWD(4),SLAKWT(4),
     & CHISQD(4),ISLKTP,NSKTOT,KOM24
      COMMON /SLKGEO/NSTYP,BOBS(500),EOBS(500),IATM(500,2),
     & ISYM(500),ILAT(500),CELLTR(3,500),XSLAK(3,500),
     & COSIN(3,3),IABASE(500),NST1,SLONLY,TOSTAR(6,6),BCALC(500),
     & DERCEL(6,500),DERPOS(3,500,2),ITYPSK(500),INVBON(10,
     & 500),NINVB(500),INANG(100,3),INTOR(100,6),
     & DERBON(10),NVB(10),NUMBON,NTARNM,NUMANG,NUMTOR,KOM25
      LOGICAL SLONLY
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      COMMON /SPLBCK/SCOEFF(100,5)
      COMMON /PRZERO/ZEROSP(6,9,5),KZROSP(6,
     & 9,5),DKDZER(6),NZERSP(9,5)
C
C READ THE I CARDS AND ALL THE (RELEVANT) L CARDS.
C
      IF (INREAD(9) .GT. 0) CALL INPUTI
C READ & INTERPRET 'I' CARDS - ALSO SETS (AND REPORTS) SIMUL:
      CALL IICD2
C
C INITIALISE COUNTS FOR THINGS OF WHICH MORE THAN 1 MAY APPEAR:
      MIS=0
      NFUDGE=0
C DEFAULT NO. OF FFT:
      NFFT=1
C
      DO 1 J=1,NSOURC
      NBACK(J)=0
      NEXCL(J)=0
C DEFAULTS, AS YET UNPRINTED:
      TOLR(1,J)=0.01
      TOLR(2,J)=0.01
   1  CONTINUE
C
C READ AND INTERPRET ALL PHASE-INDEPENDENT L CARDS:
      CALL INPLP0(PCXX,PFXX)
C
C CYCLE OVER SOURCES:
C      DO 3 JSOURC=1,NSOURC
C
C SET TOF, CN ETC:
      CALL LOGSOU(JSOURC)
C DEFAULT WEIGHTING IS TYPE 3:
      IF (ILREA(6,JSOURC) .EQ. 0) THEN
        IWGH(JSOURC)=3
        CALL MESS(LPT,1,
     &  'No L WGHT card given - assuming 1/s^2 weights')
      ENDIF
C
C DEFAULT IF NO L OTYP CARD GIVING FORMAT TYPE OF OBSERVATION DATA:
      IF (ILREA(10,JSOURC) .EQ. 0) THEN
        MODEOB(JSOURC)=1
        CALL MESS(LPT,1,'No L OTYP card - assuming observations given'//
     &  ' in mode 1 (format 3F)')
      ENDIF
C
C L BACK CARDS NEEDED:
      IF (ILREA(11,JSOURC) .EQ. 0)
     & CALL ERRMES(2,1,'L BACK cards')
C
C SET UP SPLINE COEFFICIENTS IF REQUIRED:
      IF (IBACK .EQ. -2) CALL SPLINE(NBACK(JSOURC),
     & ARGBAK(1,JSOURC),BACKGD(1,JSOURC),SCOEFF(1,JSOURC))
C
C REMARK IF NO EXCLUDED ZONES:
  10  IF (ILREA(12,JSOURC).EQ.0) CALL MESS(LPT,1,'No excluded regions')
C
C DEFAULT KNOTS (NOT PRINTED IN CASE NOT NEEDED AT ALL)
C WIFD 23-Jun-99 AKNOTS=-1 means no knots
!        IF (ILREAD(20) .EQ. 0) AKNOTS=-1.
C
C NOW THE CARDS WHICH ARE DIFFERENT ACCORDING TO SOURCE OF DATA:
C
C TOF AND/OR ED:
C NEED L THE2 CARD GIVING 2 THETA DEGREES:
      IF ((TOF .OR. ED) .AND. ILREA(18,JSOURC) .EQ. 0)
     & CALL ERRMES(2,1,'L THE2 card giving counter angle')
C
C CN, SR AND/OR LX:
C NEED L WVLN CARD:
      IF ((CN .OR. LX .OR. SR) .AND. ILREA(13,JSOURC) .EQ. 0)
     & CALL ERRMES(2,1,'L WVLN card giving wavelength')
C
C LX:
C NEED L TTHM:
      IF (LX .AND. ILREA(17,JSOURC) .EQ. 0) CALL TTHMLX(5)
C
C DEFAULT IF NO L SCAL:
      IF (ILREA(2,JSOURC) .EQ. 0) CALL LSSCAL(0)
C
C DEFAULT IF NO L SLIM CARD AND CAIL, SAPS OR APES:
*        IF (ILREAD(3) .EQ. 0 .AND. .NOT. RIET) CALL FAM4PR(5)
C FOR TOF MUST HAVE L PKCN CARD:
      IF (TOF .AND. ILREAD(7) .EQ. 0) THEN
        CALL ERRMES(2,1,'L PKCN card giving peak centre')
      ELSE
C COPY PKCN COEFFICIENTS FOR ALL PHASES.. AT PRESENT PKCN IS PHASE-INDEPENDENT,
C BUT I HAVE A SUSPICIOUS NATURE . .
        DO 42 IJ=2,NPHASE
        PKCNSP(1,IJ,KSOURC)=PKCNSP(1,1,KSOURC)
  42    PKCNSP(2,IJ,KSOURC)=PKCNSP(2,1,KSOURC)
      ENDIF
C
C MUST HAVE L ZERO CARD:
      IF (ILREAD(8) .EQ. 0) THEN
        CALL ERRMES(2,1,'L ZERO card giving zero point')
      ELSE
C COMMENT AS FOR PKCN ABOVE:
        DO 43 IJ=2,NPHASE
  43    ZEROSP(1,IJ,KSOURC)=ZEROSP(1,1,KSOURC)
      ENDIF
C
C DEFAULT IF NO L ABSC CARD FOR ABSORPTION CORRECTION:
  21  IF (ILREA(14,JSOURC) .EQ. 0)  CALL ABCRPR(5)
C
C DEFAULT IF NO RTYP CARD - TYPE 1:
      IF (ILREA(4,JSOURC) .EQ. 0) THEN
        MODERR(JSOURC)=1
        CALL MESS(LPT,1,'No L RTYP card - assuming  reflection '//
     &  'indices input as a list of 3I5 h,k,l on given file')
      ENDIF
C
      CALL PCXX(6)
      WRITE (LPT,2008) STHMXX(JSOURC)
2008  FORMAT (/' Maximum sin theta is',F10.4)
C
   3  CONTINUE
C
C DEFAULT IF NO L EXTN CARD FOR EXTINCTION CORRECTION:
      IF (ILREAD(15) .EQ. 0)  CALL EXCRPR(5)
C
C DEFAULT IF NO L PROR CARD FOR PREFERRED ORIENTATION
      IF (ILREAD(16) .EQ. 0) CALL PREFOR(5)
C
 100  RETURN
      END
C
C
C
C
C LEVEL 11      SUBROUTINE STLSPR(PCXX,PFXX)
      SUBROUTINE STLSPR(PCXX,PFXX)
C
C *** STLSPR updated by JCM Jun 92 ***
C
      EXTERNAL PCXX,PFXX

      INCLUDE 'PARAMS.INC'
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /CARDRC/ICRYDA,NTOTAL(9),NYZ,NTOTL,INREA(26,9),
     & ICDN(26,9),IERR,IO10,SDREAD
      LOGICAL SDREAD
      DIMENSION INREAD(26),ICDNO(26)
      EQUIVALENCE (INREAD(1),INREA(1,1))
      EQUIVALENCE (ICDNO(1),ICDN(1,1))
      COMMON /EXCREG/NEXCL(5),EXCLUD(40,5)
      COMMON /FUDG/NFUDGE,IFDGPT(20),FUDGE1(20),FUDGE2(20),
     & IFDTYP(20)
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /GRDBCK/IBACK,NBACK(5),ARGBAK(100,5),
     & BACKGD(100,5),KBCKGD(100,5),NBK,LBKD(20),ZBAKIN
      LOGICAL ZBAKIN
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /LREAD/ILREA(22,5),KOM18
      DIMENSION ILREAD(22)
      EQUIVALENCE (ILREAD(1),ILREA(1,1))
      COMMON /OBSCAL/OBS,DOBS,GCALC,YCALC,DIFF,ICODE,SUMWD,NOBS,
     & IWGH(5),WTC(4),WT,SQRTWT,WDIFF,YBACK,YPEAK,YMAX,CSQTOT
      EQUIVALENCE (IWGHT,IWGH(1))
      COMMON /OMITPR/MIS,AMISS(3,100),KOM12
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRBLEM/NFAM,NGENPS(6,9),NSPCPS(6,9),
     & LF1SP(5),LF3SP(10,9,5),LVFST1(6,9,5),
     & LBFST1(6,9,5),NVARF(6,9,5),
     & NBARF(6,9,5),LF6SP(3,5)
      DIMENSION NGENS(6),NSPC(6)
      EQUIVALENCE (NGENS(1),NGENPS(1,1)),(NSPC(1),NSPCPS(1,1))
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END
      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SCLDAT/ISCALE,NSCALE,SCALE(20),KSCALE(20),
     & NSCL,LSCD(10)
      COMMON /SLAKDA/NSLAK(4),SLKSWD(4),SLAKWT(4),
     & CHISQD(4),ISLKTP,NSKTOT,KOM24
      COMMON /SLKGEO/NSTYP,BOBS(500),EOBS(500),IATM(500,2),
     & ISYM(500),ILAT(500),CELLTR(3,500),XSLAK(3,500),
     & COSIN(3,3),IABASE(500),NST1,SLONLY,TOSTAR(6,6),BCALC(500),
     & DERCEL(6,500),DERPOS(3,500,2),ITYPSK(500),INVBON(10,
     & 500),NINVB(500),INANG(100,3),INTOR(100,6),
     & DERBON(10),NVB(10),NUMBON,NTARNM,NUMANG,NUMTOR,KOM25
      LOGICAL SLONLY
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      COMMON /SPLBCK/SCOEFF(100,5)
C
C READ AND INTERPRET ALL L CARDS EXCEPT SLAK ETC., FUDG,REFI, FIX,
C VARY, RELA:
      CALL INPLPR(PCXX,PFXX)
C
C MUST HAVE L PKFN CARDS:
        IF (ILREAD(9) .EQ. 0)
     &  CALL ERRMES(2,1,'L PKFN cards giving peak function')
C
C NOW FOR THIS PHASE:
C CLEAR CONSTRAINT COUNTS FOR GEOMETRY AND PAWLEY:
      NUMBON=0
      NSKTOT=0
C%
C      CALL JGMZER(NSLAK,1,%SKTP%)
      CALL JGMZER(NSLAK,1,4)
C
C DEFAULT IF NO L TFAC:
  40  IF (ILREAD(1) .EQ. 0) CALL LLTFAC(5)
C
C DEFALT IF NO L SPHA (FOR INSTANCE, IF NOT MULTI):
      IF (ILREAD(5) .EQ. 0) CALL LPSCAL(5)
C
      CALL GEOMIN(1)
      CALL ERRMES(0,0,'for Profile Refinement')
 100  RETURN
      END
C
C
C
C
C LEVEL 6      SUBROUTINE THETA2(N)
      SUBROUTINE THETA2(N)
C
C *** THETA2 updated by JCM 10 Mar 92 ***
C
CX
CC 6A
CH Multiple entry routine to deal with 2theta in CELLSQ
C
CA On entry MODE says which action is required.
CA MODE=1: reads 2theta from an L THE2 card (or set a default of
CA         180 degrees, and set up related constants.
CA MODE=2: dummy entry
CA MODE=3: apply a shift to 2theta, and adjust the constants.
CA MODE=4: write out new L THE2 card.
C
CA ENTRY THET28 sets the parameter as a variable
CA ENTRY THET29 sets the parameter as initially fixed.
C
CD The various entries are used in the main program CELLSQ, which
CD refines cell parameters and 2theta.  Entry 2 would normally form
CD 2theta as a calculated function, but this is done in the main program.
C
CI Reads and interprets L THE2 card from copy of the Crystal Data File
CI on unit IO10.
CO Writes out new L THE2 to unit NEWIN.
C
      LOGICAL ONCARD
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PRPKCN/ARGK,PKCNSP(6,9,5),
     & KPCNSP(6,9,5),DTDPCN(6),DTDWL,
     & NPKCSP(9,5),ARGMIN(5),ARGMAX(5),
     & ARGSTP(5),PCON
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      COMMON /THET2/THE2,KTHE2,THCON1
C
      GO TO (1,100,3,4) , N
C
C FIND L THE2 CARD IF THERE IS ONE, AND READ 2THETA FROM IT:
   1  THE2=180.
      IF (ONCARD('L','THE2',THE2)) THEN
        WRITE (LPT,2001) THE2
2001    FORMAT (/' 2 theta =',F10.3,' degrees')
      ELSE
        CALL MESS(LPT,1,'No L THE2 card - 2 theta = 180 degrees')
      ENDIF
C SET UP THETA-RELATED QUANTITIES:
      GO TO 101
C
C APPLY SHIFT:
   3  CALL ADJUST(THE2)
      GO TO 101
C
C NEW L THE2 CARD:
   4  WRITE(NEWIN,2000) THE2
2000  FORMAT ('L THE2',F10.2)
      GO TO 100
C
C SET THE2 TO BE A VARIABLE:
      ENTRY THET28(NV)
      KTHET2=NV
      GO TO 100
C
C SET THET2 TO BE INITIALLY FIXED:
      ENTRY THET29
      KTHET2=0
      GO TO 100
C
 101  THRAD=RADIAN(THE2/2.)
      TWSNTH(JSOURC)=2.*SIN(THRAD)
      THCON1=RADIAN(COS(THRAD))
 100  RETURN
      END
C
C
C
C
C LEVEL 8      SUBROUTINE TTHMLX(N)
      SUBROUTINE TTHMLX(N)
C
C *** TTHMLX updated by JCM 4 Apr 89 ***
C
CH Multiple entry routine to deal with all aspects of 2 theta
CH   monochromator for constant wavelength X Ray Profile Refinement
C

      INCLUDE 'PARAMS.INC'
      COMMON /BRAGG/STHMXX(5),STHL,SINTH,COSTH,SSQRD,TWSNTH(5),
     & DSTAR2,TWOTHD(5),DIFANG(6)
      EQUIVALENCE(STHLMX,STHMXX(1))
      COMMON /CELPAR/CELL(3,3,2),V(2),ORTH(3,3,2),CPARS(6,2),KCPARS(6),
     & CELESD(6,6,2),CELLSD(6,6),KOM4
      COMMON /DGEOM/IGEOM,UM(9),NLR,ANGLIN(3),ALAMBD(5,5),
     & NLAMB,ILAMB
      EQUIVALENCE (WLGTH,ALAMBD(1,1))
      COMMON /FCAL/FC,FCMOD,COSAL,SINAL,FCDERS(300),DERIVT(300)
      COMPLEX FC,DERIVT
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRPKFN/ARGI,YNORM,PKFNSP(8,6,9,5),
     & KPFNSP(8,6,9,5),
     & DERPFN(8,6),NPKFSP(8,9,5),TOLER(8,9,
     & 5),NPKGEN(9,5),PKFNVA(8),DYNDVQ(8),
     & DYNDKQ,REFUSE,CYC1,NOPKRF,TOLR(2,5),NFFT,AKNOTS,
     & NBASF4(MPRPKF,2,9),L4END(9),L6ST,L6END
      LOGICAL REFUSE,CYC1,NOPKRF
      COMMON /PRZERO/ZEROSP(6,9,5),KZROSP(6,
     & 9,5),DKDZER(6),NZERSP(9,5)
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
      COMMON /TTHMNC/TTHMON(5),KTHMON(5),C2TMON(5),
     & S4TMON(5),OPCMON(5),ALPCOR,DLPCOR
C
      GO TO (1,2,3,4,5,6) , N
C
C GIVEN AN 'L TTHM' CARD IN COMM0N /SCRACH/, READ REST OF IT:
   1  CALL RDREAL(TTHMON(JSOURC),7,IPT,80,IER)
      WRITE (LPT,2000) TTHMON(JSOURC)
2000  FORMAT (/' Monochromator 2 theta angle = ',F10.5)
      GO TO 19
C
C ENTRY FROM CALPR FOR LP CORRECTION:
 2    DTEM=RADIAN(ARGI-ZEROSP(1,JPHASE,JSOURC))
      STEM=SIN(DTEM)
      CTEM=COS(DTEM)
      SHTEM=SIN(0.5*DTEM)
      CCTEM=C2TMON(JSOURC)*CTEM
      CCTEM=1.+CCTEM*CCTEM
      ALPCOR=CCTEM/(STEM*SHTEM*OPCMON(JSOURC))
      DLPCOR=RADIAN(S4TMON(JSOURC)*STEM*STEM)/(CCTEM*OPCMON(JSOURC))
      GO TO 100
C
C APPLY SHIFT IN COEFFICIENT:
   3  IF (JPHASE .NE. 1) GO TO 100
      CALL ADJUST(TTHMON(JSOURC))
  19  C2TMON(JSOURC)=COS(RADIAN(TTHMON(JSOURC)))
      S4TMON(JSOURC)=SIN(2.*RADIAN(TTHMON(JSOURC)))
      OPCMON(JSOURC)=1.+C2TMON(JSOURC)*C2TMON(JSOURC)
      GO TO 100
C
C WRITE OUT NEW 'L TTHM' CARD FOR LX:
   4  WRITE (NEWIN,2001) TTHMON(JSOURC)
2001  FORMAT ('L TTHM',F10.5)
*** WE WILL NEED OUTPUT FACILITIES FOR THESE *S CARDS AS WELL AS IN
      GO TO 100
C
C
C DEAL WITH ABSENCE OF 'L TTHM' CARD:
   5  CALL MESS(LPT,1,'No L TTHM card - assuming monochromator'//
     & ' 2 theta = 0')
  10  TTHMON(JSOURC)=0.0
      GO TO 19
C
C FIX TTHMON  IF NO CARD GIVEN:
   6  IF (ABS(TTHMON(JSOURC)).LT.0.001)
     & CALL ADDFX5(6,1,2,1,JSOURC,4)
      GO TO 100
C
C
      ENTRY THMLX8(NV)
C RECORD PARAMETER AS VARIABLE NUMBER NV:
      KTHMON(JSOURC)=NV
      GO TO 100
C
C
      ENTRY THMLX9
C RECORD PARAMETER AS FIXED:
      KTHMON(JSOURC)=0
C
 100  RETURN
      END
C
C

C

C
C
C LEVEL 10      SUBROUTINE VARSPR
      SUBROUTINE VARSPR
C
C *** VARSPR by JCM 7 Dec 90 ***
C
CX
CC 19B
CH Records which parameters are which variables for PR
C
CD Identifies species of parameter, then calls specific routines actually
CD    to set variables, thus not needing all COMMONs to be explicit here
CD
CN This exists separately from VARSPM, magnetic.  The other places where we
CN need the distinction, a function name MAGxxx is used as an argument.  But
CN this is called from VARMAK, and at present it is easier done this way.
C
      COMMON /DERBAS/DERIVB(400),LVARB
      COMMON /DERVAR/DERIVV(500),LVARV
      COMMON /GLOBAL/NINIT,NBATCH,NSYSTM,MULFAS,MULSOU,MULONE
      LOGICAL MULFAS,MULSOU,MULONE
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /POINTS/LVRBS(500),LVRPR(500),LBSVR(400),LRDVR(300)
      COMMON /REFINE/IREF,NCYC,NCYC1,LASTCY,ICYC,MODERR(5),
     & MODEOB(5),IPRNT(20),MAXCOR,IONLY(9),SIMUL,MAG,MPL,
     & FIXED,DONE,CONV
      LOGICAL SIMUL,MAG,MPL,FIXED,DONE
      EQUIVALENCE (MODER,MODERR(1))
      COMMON /REFIPR/RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      LOGICAL RIET,CAIL,SAPS,APES,RAPS,TOF,CN,LX,SR,ED,PRECYC,TIC
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
      IF (SIMUL) GO TO 100
C SET ALL VARIABLES FIXED:
      DO 111 JPHASE=1,NPHASE
      CALL PHMOVE(1,JPHASE)
      CALL LTFAC9
      CALL CELVAR(0,0)
      CALL F2VAR9
      CALL FM4PR9
      CALL LPSCA9
      CALL PHMOVE(-1,JPHASE)
 111  CONTINUE
C
C BE SURE TO PUT THESE IN THE APPROPRIATE "ALL PHASE" OR "ALL SOURCE" LOOPS:
      CALL PFALL9
      CALL EXCPR9
      CALL PREFO9
      CALL LSSCA9
      CALL THMLX9
      CALL ABCPR9
      CALL BACKP9
      CALL ZERPR9
      CALL PCXX9
C
C SET STARTING PHASE & SOURCE:
      JP=0
      JS=0
C
C SCAN ALL VARIABLES:
      DO 1 I=1,LVARV
C UNPACK PARAMETER SPEC:
      CALL KUNPAK(LVRPR(I),IFAM,IGEN,ISPC,JPHASE,JSOURC)
      IF (JPHASE .NE. IPHASE) THEN
        CALL PHMOVE(-1,IPHASE)
        CALL PHMOVE(1,JPHASE)
        CALL LOGPHA(JPHASE)
      ENDIF
       IF ((IFAM .EQ. 3 .OR. IFAM .EQ. 6) .AND. (JS .NE. JSOURC))
     & CALL LOGSOU(JSOURC)
      JP=JPHASE
      JS=JSOURC
C
C BRANCH ON FAMILY:
      GO TO (11,12,13,14,15,16), IFAM
C
C
C FAMILY 1, GENUS 1 - MISCELLANEOUS SINGLY NAMED SPECIES (TFAC, A* ETC,
C EXTN,PROR,SPHA)
  11  GO TO (31,35,35,35,35,35,35,36,37,38) , ISPC
C
C TFAC:
  31  CALL LTFAC8(I)
      GO TO 1
C
C FAMILY 1 GENUS 1 ALSO CONTAINS THE CELL PARAMETERS:
  35  CALL CELVAR(ISPC-1,I)
      GO TO 1
C
C EXTINCTION CORRECTION PARAMETER EXTN:
  36  CALL EXCPR8(I)
      GO TO 1
C
C PREFERRED ORIENTATION:
  37  CALL PREFO8(I)
      GO TO 1
C
C FAMILY 1, GENUS 1, SPECIES 10 - SCALE FOR PHASE, SPHA:
  38  CALL LPSCA8(I)
      GO TO 1
C
C FAMILY 6: MISCELLANEOUS SOURCE DEPENDENT;
  16  GO TO (61,62,63) , IGEN
C
C FAMIL6 GENUS 1 - SINGLY NAMED, SOURCE-DEPENDENT SPECIES (SCAL,TTHM)
  61  GO TO (51,52) , ISPC
C
C FAMILY 6, GENUS 1, SPECIES 1 - SCALE FOR SOURCE, SCAL:
  51  CALL LSSCA8(I)
      GO TO 1
C
C MONOCHROMATOR 2 THETA FOR LX:
  52  CALL THMLX8(I)
      GO TO 1
C
C FAMILY 6, GENUS 2 - ABSC:
  62  CALL ABCPR8(ISPC,I)
      GO TO 1
C
C FAMILY 6, GENUS 3 - BACK:
  63  CALL BACKP8(ISPC,I)
      GO TO 1
C
C FAMILY 2 - THESE ARE ALL TO DO WITH THE STRUCTURE FACTOR:
  12  IF (ISPC .LE. 12) CALL F2VAR8(IGEN,ISPC,I)
      GO TO 1
C
C FAMILY 3 - ZERO POINT, PEAK CENTRE AND PEAK FUNCTION PARAMETERS:
C GENUS 1=ZERO POINT, 2=PEAK CENTRE, REST ARE PEAK FUNCTION:
  13  GO TO (41,42) , IGEN
      GO TO 43
C
C ZERO:
  41  CALL ZERPR8(ISPC,I)
      GO TO 1
C
C PEAK CENTRE PARAMETERS DEPEND ON TYPE OF REFINEMENT:
  42  CALL PCXX8(ISPC,I)
      GO TO 1
C
C REMAINING PEAK FUNCTION PARAMETERS:
  43  CALL PFALL8(IGEN,ISPC,I)
      GO TO 1
C
C FAMILY 4 - LONG VECTORS (SO FAR, INTS, SIGS, GAMS . . IN PAWLEY)
  14  CALL FM4PR8(IGEN,ISPC,I)
      GO TO 1
C
C FAMILY 5 ARE MULTIPOLES, EXCLUDED FOR NOW:
  15  GO TO 1
   1  CONTINUE
      IF (MULFAS) CALL PHMOVE(-1,IPHASE)
C
 100  RETURN
      END
C
C
C
C
C LEVEL 1      SUBROUTINE VCSWOP(N1,N2,J)
      SUBROUTINE VCSWOP(N1,N2,J)
C
C *** VCSWOP BY JCM 3 FEB 88 ***
C
CX
CC 12C
CH Swops 2 integer vectors
CA On entry N1 and N2 are integer vectors each of length at least J
CA On exit their elements have been interchanged from  1 to J
C
      DIMENSION N1(J),N2(J)
C
      DO 1 I=1,J
      NTEMP=N1(I)
      N1(I)=N2(I)
      N2(I)=NTEMP
   1  CONTINUE
      RETURN
      END
C
C
C
C
C LEVEL 1      SUBROUTINE WRDATA(EOD,IUNIT,IVAL,N)
      SUBROUTINE WRDATA(EOD,IUNIT,IVAL,N)
      PARAMETER (NBLCKS=128)
C  Routine to write out fixed length blocks(NBLCKS integers) to a file
C  It accepts an array of values and splits it into blocks. Whenever part
C  of a block is left over it is stored for blocking at a later run of
C  the routine. To clear  out the block at the end of a file a flag,EOD should
C  be set to .TRUE.
C
C  input parameters:
C      EOD      logical, .TRUE. if this is the last record, otherwise .FALSE.
C      IUNIT      unit number to write to
C      IVAL      array containing data
C      N      number of values to be written
      LOGICAL EOD
      DIMENSION IVAL(1),IWORK(NBLCKS)
C ensure IWORK cleared to start with and point to start of IWORK
C THIS SHOULD REALLY BE COMMON:
      DATA IWORK/NBLCKS*0/,INEXT/1/
C
C
C  calculate total number of values to be written
      ILEFT=N
      ITOT=ILEFT+INEXT-1
C
C  if at least 1 block then write out as many whole blocks as possible
      IF (ITOT.GT.NBLCKS) THEN
C  First block is probably part IWORK, part IVAL
        IPART=NBLCKS+1-INEXT
        WRITE(IUNIT) (IWORK(I),I=1,INEXT-1),(IVAL(I),I=1,IPART)
        ITOT=ITOT-NBLCKS
C  next blocks are all wholly IVAL
        NBLOCK=ITOT/NBLCKS
        IF (NBLOCK.GT.0) THEN
          DO 10 I=1,NBLOCK
          WRITE(IUNIT) (IVAL(IPART+(I-1)*NBLCKS+J),
     +                                    J=1,NBLCKS)
 10       CONTINUE
        ENDIF
C  then at the end there are probably a few values left over
        ILEFT=ITOT-NBLOCK*NBLCKS
        INEXT=1
      ENDIF
C  transfer the left overs into the temporary work space and save for next time
      IF (ILEFT.GT.0) THEN
        DO 20 I=1,ILEFT
        IWORK(I+INEXT-1)=IVAL(N-ILEFT+I)
 20     CONTINUE
        INEXT=INEXT+ILEFT
      ENDIF
C  However if I've been told that this is the last block of this file
C  clear it out totally, providing there is something to clear out!
      IF (EOD.AND.INEXT.GT.1) THEN
        WRITE(IUNIT)(IWORK(I),I=1,INEXT-1)
        INEXT=1
      ENDIF
      RETURN
      END
C
C
C
C
C LEVEL 2      SUBROUTINE WRINST(N)
      SUBROUTINE WRINST(N)
C
C *** WRINST by JCM 13 Aug 91 ***
C
CH Set and write first 155 elements of IWORK, instument parameters etc,
CH for TIC & PICTIC
CA On entry N=no. of points to set in IWORK(55)
C
	INCLUDE 'params.inc'

      COMMON /FCCDAT/DATFIL,INSTNM,LONGTI,RUNUSR,STTIME,
     & WSHIST,XCAPT,YCAPT,MCAPT
      CHARACTER DATFIL*80,INSTNM*8,LONGTI*80,RUNUSR*20,
     & STTIME*20,WSHIST*200,XCAPT*40,YCAPT*40,MCAPT*40

      COMMON /FOCDAT/NOTC,NCYMIN,NCYMAX,DELTA,LDFIL,FI,
     & INSTCO,INSTST,NXCODE,LNPDFN,AL1,AL2,NOSPEC,NPT,
     & NUMRUN,RUNDUR,TTHET,XMN,XMX,YMN,YMX,NYCODE,NEMODE,
     & EFIXED,USERPR(30),TDATA(MFOCDA),BACK(MFOCDA),OBSDAT(MFOCDA),
     & CALDAT(33000),ERR(MFOCDA),STADAT(MFOCDA),YRANGE,IUNIT

      COMMON /WORKG/IWORK(256)
      REAL RWORK(256)
      CHARACTER*1024 CWORK
C NON-STANDARD FORTRAN 77:
CVMS
      EQUIVALENCE (IWORK,CWORK),(IWORK,RWORK)
C
      IWORK(1)        = NCYMIN
      IWORK(2)        = NCYMAX
      RWORK(3)        = DELTA
      IWORK(4)        = LDFIL
      CWORK(17:96)    = DATFIL
      RWORK(25)       = FI
      IWORK(26)       = INSTCO
      CWORK(105:112)  = INSTNM
      IWORK(29)       = INSTST
      IWORK(30)       = NXCODE
      IWORK(31)       = LNPDFN
      RWORK(32)       = AL1
      RWORK(33)       = AL2
      CWORK(133:212)  = LONGTI
      IWORK(54)       = 1
C N SET AS INPUT ARGUMENT:
      IWORK(55)       = N
      IWORK(56)       = NUMRUN
      CWORK(225:244)  = RUNUSR
      RWORK(62)       = RUNDUR
      CWORK(249:268)  = STTIME
      RWORK(68)       = TTHET
      CWORK(273:472)  = WSHIST
      RWORK(119)      = XMN
      RWORK(120)      = XMX
      RWORK(121)      = YMN
      RWORK(122)      = YMX
** NOW RELYING ON CAPTS SET OUTSIDE
      CWORK(489:528)  = XCAPT
      CWORK(529:568)  = YCAPT
      CWORK(569:608)  = MCAPT
      IWORK(153)      = NYCODE
      IWORK(154)      = NEMODE
      IWORK(155)      = EFIXED
C
C      WRITE THIS DATA TO FILE
C
      CALL WRDATA(.FALSE.,IUNIT,IWORK,155)
      RETURN
      END
C
C


C
C
C
C LEVEL 1      SUBROUTINE WRLINE(N1,LEN,CHAR,N2)
      SUBROUTINE WRLINE(N1,LEN,CHAR,N2)
C
C *** WRLINE by JCM 31 Jan 91 ***
C
CX
CH Writes a line of a specified character to unit LPT
CA On entry N1 is the number of empty lines required before.
CA          LEN is the required line length
CA          CHAR is the *1 character to be repeated
CA          N2 is the number of empty lines required after.
CO Writes LEN copies of CHAR to unit LPT
C
      CHARACTER *1 CHAR
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
C
      DO 1 I=1,N1
      WRITE(LPT,2001)
2001  FORMAT(1X)
   1  CONTINUE
C
      WRITE (LPT,2000) (CHAR,I=1,LEN)
2000  FORMAT (1X,120A1)
C
      DO 2 I=1,N2
      WRITE(LPT,2001)
   2  CONTINUE
      RETURN
      END
C
C
C
C
C LEVEL 2      SUBROUTINE WRSTRT(N,NS)
      SUBROUTINE WRSTRT(N,NS)
C
C *** WRSTRT
C
CH Write start of Genie file
CA On entry N= no. of X, Y, or E values
CA          NS= number of spectra (1 for TIC, 3 for PICTIC)
C
      COMMON /WORKG/IWORK(256)
      REAL RWORK(256)
      CHARACTER*1024 CWORK
C NON-STANDARD FORTRAN 77:
CVMS
      EQUIVALENCE (IWORK,CWORK),(IWORK,RWORK)
C
C
      CWORK(1:80)    = ' '
C VERSION:
      IWORK(21)      = 1
C ADDRESS OF HISTORY SECTION (NONE):
      IWORK(22)      = 42
C ADDRESS OF DETECTOR SECTION:
      IWORK(23)      = 0
C ADDRESS OF X VALUES SECTION:
      IWORK(24)      = 0
C ADDRESS OF SPECTRA SECTION
      IWORK(25)      = 92
C NO OF SPECTRA (TIC MARKS)
      IWORK(26)      = NS
C LENGTH OF P BLOCK (GENIE HDR1+HDR2)
      IWORK(27)      = 155+30
C LENGTH OF X BLOCK
      IWORK(28)      = N
C LENGTH OF Y BLOCK
      IWORK(29)      = N
C LENGTH OF E BLOCK
      IWORK(30)      = N
C IWORK(31-41) LENGTHS OF U1-U11 BLOCKS
      DO 1 I=31,41
   1  IWORK(I)=0
C COMMON HISTORY BLANK SO FAR:
      CWORK(165:364) = ' '
C
C      WRITE THESE PARAMETERS TO THE FILE
      CALL WRDATA(.FALSE.,IUNIT,IWORK,91)
C
      RETURN
      END
C
C
C
C
C LEVEL 6      SUBROUTINE ZEROPR(N)
      SUBROUTINE ZEROPR(N)
C
C *** ZEROPR by JCM 9 May 88 ***
C
C MULTIPLE ENTRY ROUTINE DEALING WITH ALL ASPECTS OF ZERO POINT(S)
C
C ENTRY 2 ('USE') IS SO SIMPLE THAT IT IS EXPECTED TO BE DONE IN THE CALLING
C ROUTINE, E.G. CALTF1
C
      COMMON /IOUNIT/LPT,ITI,ITO,IPLO,LUNI,IOUT
      COMMON /NEWOLD/SHIFT,XOLD,XNEW,ESD,IFAM,IGEN,ISPC,
     & NEWIN,KPACK,LKH,SHESD,ISHFT,AVSHFT,AMAXSH
      COMMON /PHASE/NPHASE,IPHASE,JPHASE,KPHASE,NPHUNI(9),
     & SCALEP(9),KSCALP(9),PHMAG(9)
      LOGICAL PHMAG
      COMMON /PRZERO/ZEROSP(6,9,5),KZROSP(6,
     & 9,5),DKDZER(6),NZERSP(9,5)
      COMMON /SOURCE/NSOURC,JSOURC,KSOURC,NDASOU(5),METHOD(
     & 9),NPFSOU(9,5),NSOBS(5),SCALES(5),
     & KSCALS(5),NPCSOU(9,5)
C
      GO TO (1,2,3,4) , N
C
C GIVEN AN 'L ZERO' CARD IN COMM0N /SCRACH/, READ REST OF IT:
   1  CALL RDREAL (ZEROSP(1,JPHASE,JSOURC),7,IPT,80,IER)
      WRITE (LPT,2000) ZEROSP(1,JPHASE,JSOURC)
2000  FORMAT (/' Zero point =',F10.4)
      NZERSP(JPHASE,JSOURC)=1
      GO TO 100
C
C ENTRY 2 DUMMY - DONE IN CALL TO PCTF1:
   2  GO TO 100
C
C APPLY SHIFT IN COEFFICIENT:
   3  CALL ADJUST(ZEROSP(ISPC,JPHASE,JSOURC))
      GO TO 100
C
C WRITE OUT NEW 'L ZERO' CARD FOR TOF:
   4  WRITE (NEWIN,2001) ZEROSP(1,JPHASE,JSOURC)
2001  FORMAT ('L ZERO',F10.4)
      GO TO 100
C
C
      ENTRY ZERPR8(NP,NV)
C SET PARAMETER NP TO BE VARIABLE NV
      KZROSP(NP,JPHASE,JSOURC)=NV
      GO TO 100
C
C
      ENTRY ZERPR9
C SET ALL ZEROPOINT PARAMETERS FIXED:
      DO 9 I=1,NZERSP(JPHASE,JSOURC)
   9  KZROSP(I,JPHASE,JSOURC)=0
      GO TO 100
C
 100  RETURN
      END
